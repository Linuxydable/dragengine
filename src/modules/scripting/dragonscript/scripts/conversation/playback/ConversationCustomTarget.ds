/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Scenery
pin Dragengine.LoadSave



/**
 * \brief Custom conversation target.
 * 
 * Used for ConversationPlaybackLookAt. Provides a subclassable custom target
 * for use by scripts outside conversation playback. ConversationTarget can
 * only be used during a conversation. ConversationCustomTarget on the other
 * hand can be added to ConversationLookAtPlayback any time. This allows to
 * use the playback also for non-conversation use simplify game design.
 * Subclass is responsible for registering its own PersistencyFactory.
 */
class ConversationCustomTarget implements Persistable
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "ConversationCustomTarget"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return ConversationCustomTarget.new( env, reader )
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	/** \brief Local matrix. */
	private var DMatrix pLocalMatrix
	
	
	
	/** \brief Create custom conversation target. */
	public func new( DMatrix localMatrix )
		if localMatrix == null
			throw EInvalidParam.new()
		end
		this.pLocalMatrix = localMatrix
	end
	
	/** \brief Read from file. */
	public func new( PersistencyEnvironment env, FileReader reader )
		this.pLocalMatrix = DMatrix.readFromFile( reader )
	end
	
	/** \brief Dispose of custom conversation target breaking cyclic references. */
	public func void dispose()
	end
	
	
	
	/** \brief Local matrix. */
	public func DMatrix getLocalMatrix()
		return this.pLocalMatrix
	end
	
	/** \brief Set local matrix. */
	public func void setLocalMatrix( DMatrix matrix )
		if matrix == null
			throw EInvalidParam.new()
		end
		this.pLocalMatrix = matrix
	end
	
	
	
	/**
	 * \brief Calculate target matrix.
	 * 
	 * Override in subclass to calculate the matrix to use for look-at calculation.
	 * The default implementation returns the local matrix.
	 */
	public func DMatrix getMatrix()
		return this.pLocalMatrix
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile( PersistencyEnvironment env, FileWriter writer )
		this.pLocalMatrix.writeToFile( writer )
	end
end
