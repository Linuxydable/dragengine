/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.ConversationSystem

pin Dragengine.CameraDirectors
pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.TriggerSystem
pin Dragengine.Utils


/**
 * \brief Conversation playback for use with BaseGameApp.
 */
class BaseConversationPlayback extends ConversationPlayback
	/** \brief Factory for loading. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "BaseConversationPlayback"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			var BaseConversationPlayback playback = BaseConversationPlayback.new( env, reader )
			playback.readDelayedFromFile( env, reader )
			return playback
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	private var ECBehaviorPlayerControllable.Tracker pPlayerControlledActor
	private var InputProcessor pInputProcessor
	
	private var CameraDirector pRestoreCameraDirector
	private var InputProcessor pRestoreInputProcessor
	
	
	
	/** \brief Create conversation playback. */
	public func new( Conversation conversation ) \
	this( conversation, BaseGameApp.getApp().getPlayerControlledActor() )
	end
	
	/** \brief Create conversation playback. */
	public func new( Conversation conversation, ECBehaviorPlayerControllable.Tracker playerControlledActor ) \
	super( conversation )
		this.pPlayerControlledActor = playerControlledActor
		this.setSubTitle( BaseGameApp.getApp().getWindowSubTitle() )
		this.setPlayerChoice( BaseGameApp.getApp().getWindowPlayerChoice() )
		this.setCameraDirector( this.createCameraDirector() )
		this.pInputProcessor = this.createInputProcessor()
	end
	
	/**
	 * \brief Read from file.
	 * 
	 * This call loads only data not accessing subclass implemented methods.
	 * To finish loading call readRemainingFromFile().
	 * 
	 * These objects are not persisted. Subclass is responsible to set them.
	 * - CameraDirector
	 * - SubTitle
	 * - pPlayerChoice
	 */
	public func new( PersistencyEnvironment env, FileReader reader ) super( env, reader )
		this.setSubTitle( BaseGameApp.getApp().getWindowSubTitle() )
		this.setPlayerChoice( BaseGameApp.getApp().getWindowPlayerChoice() )
		this.setCameraDirector( this.createCameraDirector() )
		this.pInputProcessor = this.createInputProcessor()
	end
	
	/** \brief Dispose of conversation playback. */
	public func void dispose()
		super.dispose()
		
		this.pPlayerControlledActor = null
		this.pInputProcessor = null
		this.pRestoreCameraDirector = null
		this.pRestoreInputProcessor = null
	end
	
	
	
	/** \brief Player controlled actor. */
	public func ECBehaviorPlayerControllable.Tracker getPlayerControlledActor()
		return this.pPlayerControlledActor
	end
	
	/** \brief Input processor or \em null to not change. */
	public func InputProcessor getInputProcessor()
		return this.pInputProcessor
	end
	
	/** \brief Set input processor or \em null to not change. */
	public func void setInputProcessor( InputProcessor inputProcessor )
		this.pInputProcessor = inputProcessor
	end
	
	
	
	/** \brief Set conversation topic. */
	public func void setTopic( String idTopicGroup, String idTopic )
		var Conversation conversation = this.getConversation()
		
		var ConversationTopicGroup topicGroup = conversation.getTopicGroupWithID( \
			StringID.new( idTopicGroup ) )
		if topicGroup == null
			BaseGameApp.getApp().getConsole().addMessage( \
				"BaseConversationPlayback.setTopic: Not found '" + idTopicGroup + "' => '" + idTopic )
			throw EInvalidParam.new()
		end
		
		var ConversationTopic topic = topicGroup.getTopicWithID( StringID.new( idTopic ) )
		
		if topic == null
			BaseGameApp.getApp().getConsole().addMessage( \
				"BaseConversationPlayback.setTopic: Not found '" + idTopicGroup + "' => '" + idTopic )
			throw EInvalidParam.new()
		end
		
		this.setTopic( topicGroup, topic )
	end
	
	/** \brief Add actor controlled by player with alias "player". */
	public func void addPlayerActor()
		this.addPlayerActor( StringID.new( "player" ) )
	end
	
	/** \brief Add actor controlled by player. */
	public func void addPlayerActor( StringID alias )
		this.addActor( ECBehaviorConversationActor.getInstanceIn( \
			this.pPlayerControlledActor.getActor().getElement() ), alias )
	end
	
	/** \brief Add actor. */
	public func void addActor( BaseActor actor, StringID alias )
		this.addActor( actor.getConversationActor(), alias )
	end
	
	/** \brief Add actor. */
	public func void addActor( ECBehaviorConversationActor.Instance actor, StringID alias )
		this.addActor( actor.getConversationActor(), alias )
	end
	
	
	
	/**
	 * \brief Get actor matching conversation identifier.
	 * 
	 * This is used by readFromFile to add actors for playing back the conversation.
	 * Subclass to return the actors matching a conversation identifier.
	 * 
	 * Default implementation looks up the identifier in the getConvoActorList() from
	 * the current GameWorld loaded into WindowGameWorld of BaseGameApp.
	 */
	public func ConversationActor loadConversationActor( StringID id )
		return BaseGameApp.getApp().getWindowGameWorld().getGameWorld() \
			.getConvoActorList().getAt( id )
	end
	
	/**
	 * \brief Create coordinate system matching conversation identifier.
	 * 
	 * This is used to add coordinate system for playing back the conversation. Subclass to
	 * create the coordinate system matching a conversation identifier.
	 * 
	 * Default implementation looks up the identifier in the getConvoCoordSystemList() from
	 * the current GameWorld loaded into WindowGameWorld of BaseGameApp.
	 */
	public func ConversationCoordSystem createConversationCoordSystem( StringID id )
		return BaseGameApp.getApp().getWindowGameWorld().getGameWorld() \
			.getConvoCoordSystemList().getAt( id )
	end
	
	/** \brief Trigger table to use. */
	public func TSTriggerTable getTriggerTable()
		return BaseGameApp.getApp().getTriggerTable()
	end
	
	/**
	 * Game command send by the conversation script. Overload to make the game execute
	 * the action. The default implementation does nothing.
	 */
	public func void gameCommand( String command )
		BaseGameApp.getApp().getConsole().addMessage( \
			"BaseConversationPlayback.gameCommand: Unknown command '" + command + "'" )
	end
	
	/**
	 * Game condition command send by the conversation script. Overload to make the game
	 * evaluate the command returning true or false as result. The default implementation
	 * returns false.
	 */
	public func bool conditionGameCommand( String command )
		BaseGameApp.getApp().getConsole().addMessage( \
			"BaseConversationPlayback.conditionGameCommand: Unknown command '" + command + "'" )
		return false
	end
	
	
	
	/**
	 * \brief Conversation started hook method.
	 * 
	 * Called if running state changed to true after sending notifications to listeners.
	 */
	public func void onConversationStarted()
		var ConversationCameraDirector director = this.getCameraDirector()
		
		if director != null
			var WindowGameWorld window = BaseGameApp.getApp().getWindowGameWorld()
			this.pRestoreCameraDirector = window.getCameraDirector()
			window.setCameraDirector( director )
		end
		
		if this.pInputProcessor != null
			this.pRestoreInputProcessor = BaseGameApp.getApp().getInputProcessor()
			BaseGameApp.getApp().setInputProcessor( this.pInputProcessor )
		end
	end
	
	/**
	 * \brief Conversation stopped hook method.
	 * 
	 * Called if running state changed to false after sending notifications to listeners.
	 */
	public func void onConversationStopped()
		this.removeAllActors()
		
		if this.pRestoreCameraDirector != null
			BaseGameApp.getApp().getWindowGameWorld().setCameraDirector( this.pRestoreCameraDirector )
		end
		
		if this.pRestoreInputProcessor != null
			BaseGameApp.getApp().setInputProcessor( this.pRestoreInputProcessor )
		end
		
		this.dispose()
	end
	
	
	
	/**
	 * \brief Create camera director or \em null to keep the current one.
	 * 
	 * Default implementation creates instance of .
	 */
	protected func ConversationCameraDirector createCameraDirector()
		var WindowGameWorld window = BaseGameApp.getApp().getWindowGameWorld()
		return ConversationCameraDirector.new( window.getCamera(), window.getMicrophone() )
	end
	
	/**
	 * \brief Create input processor or \em null to keep the current one.
	 * 
	 * Default implementation creates instance of ConversationInputProcessor.
	 */
	protected func InputProcessor createInputProcessor()
		var ConversationInputProcessor inputProcessor = ConversationInputProcessor.new( this )
		inputProcessor.setBindingManager( BaseGameApp.getApp().getBindingManager() )
		return inputProcessor
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
end
