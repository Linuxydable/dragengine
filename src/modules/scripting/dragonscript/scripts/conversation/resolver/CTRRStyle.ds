/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition.Nodes



/**
 * \brief Rule for resolving a style tag in actor speak action text.
 * 
 * Resolves tags of the form {stylename:text}. Formats text with a specific style
 * instead of the default style. Useful to put emphasis on some words for example.
 */
class CTRRStyle implements ConversationTagResolverRule
	/** \brief Style to use. */
	private var STDStyle pStyle
	
	
	
	/** \brief Create resolve tag rule. */
	public func new( STDStyle style )
		if style == null
			throw EInvalidParam.new()
		end
		this.pStyle = style
	end
	
	
	
	/** \brief Style or \em null if not used. */
	public func STDStyle getStyle()
		return this.pStyle
	end
	
	/** \brief Set style or \em null if not used. */
	public func void setStyle( STDStyle style )
		if style == null
			throw EInvalidParam.new()
		end
		this.pStyle = style
	end
	
	
	
	/**
	 * \brief Resolve tag outputing result to styled text.
	 * \param styledText Styled text to add resolved text to.
	 * \param textNode Text node to add text to.
	 * \param parameters Parameters inside tag.
	 */
	public func void resolveTag( StyledTextDefinition styledText, STDNText textNode, String parameters )
		var String styleName = this.pStyle.getName()
		if not styledText.hasStyleNamed( styleName )
			styledText.addStyle( this.pStyle )
		end
		textNode.addSpan( STDNTextSpan.new( parameters, styleName ) )
	end
end
