/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Utils



/**
 * \brief Conversation condition using value returned by command send to game.
 * 
 * The command is a single text string parsed by the conversation script into
 * an array of arguments and then send to the conversation playback. The
 * format of the command depends on the game. The command returns a boolean
 * value use directly as condition result.
 */
class CConditionGameCommand extends ConversationCondition
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "CConditionGameCommand"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return CConditionGameCommand.new( env, reader )
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	private var String pCommand
	private var bool pNegate
	
	
	
	/** \brief Create conversation action. */
	public func new()
		this.pCommand = ""
		this.pNegate = false
	end
	
	/** \brief Read from file. */
	public func new( PersistencyEnvironment env, FileReader reader )
		this.pCommand = reader.readString16()
		this.pNegate = env.readBool( reader )
	end
	
	
	
	/** \brief Command to send. */
	public func String getCommand()
		return this.pCommand
	end
	
	/** \brief Set command to send. */
	public func void setCommand( String command )
		this.pCommand = command
	end
	
	/** \brief Result of the condition is negated. */
	public func bool getNegate()
		return this.pNegate
	end
	
	/** \brief Set result of the condition is negated. */
	public func void setNegate( bool negate )
		this.pNegate = negate
	end
	
	
	
	/** \brief Condition is true. */
	public func bool evaluate( ConversationPlayback playback )
		if this.pNegate
			return not playback.conditionGameCommand( this.getCommand() )
			
		else
			return playback.conditionGameCommand( this.getCommand() )
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile( PersistencyEnvironment env, FileWriter writer )
		writer.writeString16( this.pCommand )
		env.writeBool( writer, this.pNegate )
	end
end
