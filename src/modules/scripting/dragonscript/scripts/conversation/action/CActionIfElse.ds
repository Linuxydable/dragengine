/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action processing action list depending on condition checking.
 * 
 * Executes the first if-case with a condition evaluationg to true or else instead.
 */
class CActionIfElse extends ConversationAction
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionIfElse"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return CActionIfElse.new( env, reader )
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	private var Array pCases
	private var Array pElseActions
	
	
	
	/** \brief Create conversation action. */
	public func new()
		this.pCases = Array.new()
		this.pElseActions = Array.new()
	end
	
	/** \brief Read from file. */
	public func new( PersistencyEnvironment env, FileReader reader )
		var int i, count = reader.readUShort()
		this.pCases = Array.new()
		for i = 0 to count
			this.pCases.add( CActionIfElseCase.readFromFile( env, reader ) )
		end
		
		count = reader.readUShort()
		this.pElseActions = Array.new()
		for i = 0 to count
			this.pElseActions.add( env.readObject( reader ) )
		end
	end
	
	
	
	/** \brief Visits all if-cases. */
	public func void forEachCase( Block aBlock )
		this.pCases.forEach( aBlock )
	end
	
	/** \brief Add if-case. */
	public func void addCase( CActionIfElseCase ifcase )
		if ifcase == null
			throw EInvalidParam.new()
		end
		this.pCases.add( ifcase )
	end
	
	
	
	/** \brief Visit all else actions. */
	public func void forEachElseAction( Block aBlock )
		this.pElseActions.forEach( aBlock )
	end
	
	/** \brief Add else action. */
	public func void addElseAction( ConversationAction action )
		if action == null
			throw EInvalidParam.new()
		end
		this.pElseActions.add( action )
	end
	
	/** \brief Else actions iterator. */
	public func ConversationActionIterator getIteratorElseActions()
		return ConversationActionIterator.new( this.pElseActions, 0 )
	end
	
	
	
	/** \brief Execute action. */
	public func void execute( ConversationPlayback playback )
		var CActionIfElseCase ifcase = this.pCases.find( block CActionIfElseCase each
			var ConversationCondition condition = each.getCondition()
			return condition != null and condition.evaluate( playback )
		end ) cast CActionIfElseCase
		
		if ifcase != null
			if ifcase.getActions().getCount() > 0
				playback.pushLayer( ConversationPlaybackLayer.new( ifcase.getIteratorActions() ) )
				
			else
				playback.advanceToNextAction()
			end
			
		else
			if this.pElseActions.getCount() > 0
				playback.pushLayer( ConversationPlaybackLayer.new( this.getIteratorElseActions() ) )
				
			else
				playback.advanceToNextAction()
			end
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile( PersistencyEnvironment env, FileWriter writer )
		writer.writeUShort( this.pCases.getCount() )
		this.pCases.forEach( block CActionIfElseCase each
			each.writeToFile( env, writer )
		end )
		
		writer.writeUShort( this.pElseActions.getCount() )
		this.pElseActions.forEach( block ConversationAction each
			env.writeObject( writer, each )
		end )
	end
end
