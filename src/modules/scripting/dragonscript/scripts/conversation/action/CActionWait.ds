/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action waiting for condition to become false while looping actions.
 */
class CActionWait extends ConversationAction
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionWait"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return CActionWait.new( env, reader )
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	private var ConversationCondition pCondition
	private var float pInterval
	private var Array pActions
	
	
	
	/** \brief Create conversation action. */
	public func new()
		this.pInterval = 0.2
		this.pActions = Array.new()
	end
	
	/** \brief Read from file. */
	public func new( PersistencyEnvironment env, FileReader reader )
		this.pCondition = env.readObjectOrNull( reader ) cast ConversationCondition
		this.pInterval = reader.readFloat()
		
		var int i, count = reader.readUShort()
		this.pActions = Array.new()
		for i = 0 to count
			this.pActions.add( env.readObject( reader ) )
		end
	end
	
	
	
	/** \brief Condition or \em null to skip action. */
	public func ConversationCondition getCondition()
		return this.pCondition
	end
	
	/** \brief Set condition or \em null to skip action. */
	public func void setCondition( ConversationCondition condition )
		this.pCondition = condition
	end
	
	/** \brief Interval to wait before testing the condition again to improve performance. */
	public func float getInterval()
		return this.pInterval
	end
	
	/** \brief Set interval to wait before testing the condition again to improve performance. */
	public func void setInterval( float interval )
		this.pInterval = DEMath.max( interval, 0.0 )
	end
	
	
	
	/** \brief Visits actions. */
	public func void forEachAction( Block aBlock )
		this.pActions.forEach( aBlock )
	end
	
	/** \brief Add action. */
	public func void addAction( ConversationAction action )
		if action == null
			throw EInvalidParam.new()
		end
		this.pActions.add( action )
	end
	
	/** \brief Actions to loop while condition is true. */
	public func ConversationActionIterator getIteratorActions()
		return ConversationActionIterator.new( this.pActions, 0 )
	end
	
	
	
	/** \brief Execute action. */
	public func void execute( ConversationPlayback playback )
		if this.pCondition == null
			playback.advanceToNextAction()
			return
		end
		
		var ConversationPlaybackLayer layer = ConversationPlaybackLayer.new( this.getIteratorActions() )
		layer.setLoopCondition( this.pCondition )
		layer.setLoopEvalConditionInterval( this.pInterval )
		layer.setLooping( true )
		
		playback.pushLayer( layer )
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile( PersistencyEnvironment env, FileWriter writer )
		env.writeObjectOrNull( writer, this.pCondition )
		writer.writeFloat( this.pInterval )
		
		writer.writeUShort( this.pActions.getCount() )
		this.pActions.forEach( block ConversationAction each
			env.writeObject( writer, each )
		end )
	end
end
