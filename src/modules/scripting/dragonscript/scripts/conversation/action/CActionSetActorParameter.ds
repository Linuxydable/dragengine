/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action setting an actor parameter.
 */
class CActionSetActorParameter extends ConversationAction
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionSetActorParameter"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return CActionSetActorParameter.new( env, reader )
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	/** \brief Operator. */
	public enum Operator
		/** \brief Sets the parameter. */
		set
		
		/** \brief Increments the parameter. */
		increment
		
		/** \brief Decrements the parameter. */
		decrement
		
		/** \brief Randomize variable. */
		random
	end
	
	
	
	private var StringID pActorID
	private var String pName
	private var Operator pOperator
	private var int pValue
	private var String pValueVariable
	
	
	
	/** \brief Create conversation action. */
	public func new()
		this.pOperator = Operator.set
		this.pValue = 0
	end
	
	/** \brief Read from file. */
	public func new( PersistencyEnvironment env, FileReader reader ) super( env, reader )
		select reader.readByte() // version
		case 0
			this.pActorID = env.readStringIDOrNullIfEmpty( reader )
			this.pName = env.readString8OrNullIfEmpty( reader )
			this.pOperator = Operator.withOrder( reader.readByte() )
			this.pValue = reader.readInt()
			this.pValueVariable = env.readString8OrNullIfEmpty( reader )
			
		else
			throw EInvalidParam.new( "unsupported version" )
		end
	end
	
	
	
	/** \brief Actor ID or null if not set. */
	public func StringID getActorID()
		return this.pActorID
	end
	
	/** \brief Set actor ID or null if not set. */
	public func void setActorID( StringID id )
		this.pActorID = id
	end
	
	/** \brief Name of the parameter to set. */
	public func String getName()
		return this.pName
	end
	
	/** \brief Set name of the parameter to set. */
	public func void setName( String name )
		this.pName = name
	end
	
	/** \brief Operator. */
	public func Operator getOperator()
		return this.pOperator
	end
	
	/** \brief Set operator. */
	public func void setOperator( Operator operator )
		this.pOperator = operator
	end
	
	/** \brief Value to use for operation. */
	public func int getValue()
		return this.pValue
	end
	
	/** \brief Set value to use for operation. */
	public func void setValue( int value )
		this.pValue = value
	end
	
	/** \brief Variable value to use for operation or null to use value. */
	public func String getValueVariable()
		return this.pValueVariable
	end
	
	/** \brief Set variable value to use for operation or null to use value. */
	public func void setValueVariable( String variable )
		this.pValueVariable = variable
	end
	
	
	
	/** \brief Execute action. */
	public func void execute( ConversationPlayback playback )
		var ConversationActor actor = playback.getActorMatching( this.pActorID )
		
		if actor == null or this.pName == null
			playback.advanceToNextAction()
			return
		end
		
		var int value = this.pValue
		if this.pValueVariable != null
			value = playback.getVariable( this.pValueVariable, value )
		end
		
		select this.pOperator
		case Operator.set
			actor.setParameter( this.pName, value )
			
		case Operator.increment
			actor.setParameter( this.pName, actor.getParameter( this.pName ) + value )
			
		case Operator.decrement
			actor.setParameter( this.pName, actor.getParameter( this.pName ) - value )
			
		case Operator.random
			actor.setParameter( this.pName, DEMath.random( 0, value ) )
		end
		
		playback.advanceToNextAction()
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile( PersistencyEnvironment env, FileWriter writer )
		super.writeObjectToFile( env, writer )
		
		writer.writeByte( 0 ) // version
		
		env.writeStringIDOrEmptyIfNull( writer, this.pActorID )
		env.writeString8OrEmptyIfNull( writer, this.pName )
		writer.writeByte( this.pOperator.order() )
		writer.writeInt( this.pValue )
	end
end
