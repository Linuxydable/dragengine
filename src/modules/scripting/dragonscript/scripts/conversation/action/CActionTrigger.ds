/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.TriggerSystem
pin Dragengine.Utils



/**
 * \brief Conversation action operating a trigger.
 */
class CActionTrigger extends ConversationAction
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionTrigger"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return CActionTrigger.new( env, reader )
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	/** \brief Actions. */
	public enum Action
		/** \brief Fire the trigger. */
		fire
		
		/** \brief Reset the trigger. */
		reset
		
		/** \brief Fire and immediately reset the trigger. */
		pulse
		
		/** \brief Fully resets the trigger. */
		fullReset
	end
	
	
	
	private var StringID pName
	private var Action pAction
	
	// NOTE we can not store the trigger target here to avoid fetching it all the time.
	//      this is because conversation are shared resources held by the conversation loader.
	//      each conversation playback can have different trigger table. by storing the target
	//      we can reference a wrong trigger target
// 	private var TSTriggerTarget pTriggerTarget
	
	
	
	/** \brief Create conversation action. */
	public func new()
		this.pAction = Action.fire
	end
	
	/** \brief Read from file. */
	public func new( PersistencyEnvironment env, FileReader reader )
		select reader.readByte() // version
		case 0
			this.pName = env.readStringIDOrNullIfEmpty( reader )
			this.pAction = Action.withOrder( reader.readByte() )
			
		else
			throw EInvalidParam.new( "unsupported version" )
		end
	end
	
	
	
	/** \brief Name of the trigger to set. */
	public func StringID getName()
		return this.pName
	end
	
	/** \brief Set name of the trigger to set. */
	public func void setName( StringID name )
		this.pName = name
	end
	
	/** \brief Action. */
	public func Action getAction()
		return this.pAction
	end
	
	/** \brief Set action. */
	public func void setAction( Action action )
		this.pAction = action
	end
	
	
	
	/** \brief Execute action. */
	public func void execute( ConversationPlayback playback )
		if this.pName == null
			playback.advanceToNextAction()
			return
		end
		
		var TSTriggerTarget target
		// if run the first time get trigger target adding it if not existing yet
// 		if this.pTriggerTarget == null
			target = playback.getTriggerTable().getOrAddNamed( this.pName )
// 		end
		
		// operate the trigger
		select this.pAction
		case Action.fire
			target.fire()
			
		case Action.reset
			target.reset()
			
		case Action.pulse
			target.fire()
			target.reset()
			
		case Action.fullReset
			target.fullReset()
		end
		
		playback.advanceToNextAction()
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile( PersistencyEnvironment env, FileWriter writer )
		writer.writeByte( 0 ) // version
		
		env.writeStringIDOrEmptyIfNull( writer, this.pName )
		writer.writeByte( this.pAction.order() )
	end
end
