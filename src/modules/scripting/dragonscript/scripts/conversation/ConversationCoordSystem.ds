/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery



/**
 * \brief Coordinate system for use in conversation.
 * 
 * Returns a coordinate system matrix for conversation targets. In contrary to conversation
 * actors coordinate system objects can be added to multiple conversation playback objects
 * at the same time. Conversation coordinate systems can be static or dynamic. The game
 * scripts are responsible to update the coordinate system if it changes position or orientation
 * dynamically.
 */
class ConversationCoordSystem
	private var StringID pID
	private var StringID pAliasID
	private var DMatrix pLocalMatrix
	
	
	
	/** \brief Create conversation coordinate system. */
	public func new( StringID id ) this( id, DMatrix.new() )
	end
	
	/** \brief Create conversation coordinate system. */
	public func new( StringID id, DMatrix localMatrix )
		if id == null or localMatrix == null
			throw EInvalidParam.new()
		end
		
		this.pID = id
		this.pLocalMatrix = localMatrix
	end
	
	/** \brief Create copy of conversation coordinate system. */
	public func new( ConversationCoordSystem coordSystem )
		this.pID = coordSystem.pID
		this.pAliasID = coordSystem.pAliasID
		this.pLocalMatrix = coordSystem.pLocalMatrix
	end
	
	/** \brief Dispose of the coordinate system breaking cyclic references. */
	public func void dispose()
	end
	
	
	
	/** \brief Unique identifier of the actor in the conversation. */
	public func StringID getID()
		return this.pID
	end
	
	/** \brief Optional unique alias identifier of the coordinate system in the conversation. */
	public func StringID getAliasID()
		return this.pAliasID
	end
	
	/** \brief Set optional unique alias identifier of the coordinate system in the conversation. */
	public func void setAliasID( StringID id )
		this.pAliasID = id
	end
	
	/** \brief Local matrix to use. */
	public func DMatrix getLocalMatrix()
		return this.pLocalMatrix
	end
	
	/** \brief Set local matrix to use. */
	public func void setLocalMatrix( DMatrix matrix )
		if matrix == null
			throw EInvalidParam.new()
		end
		this.pLocalMatrix = matrix
	end
	
	
	
	/** \brief Coordinate system matrix. */
	public func DMatrix getMatrix()
		return this.pLocalMatrix
	end
	
	
	
	/**
	 * \brief Read from file.
	 * \details Used if ConversationPlayback.createConversationCoordSystem() is used.
	 */
	public func void readFromFile( PersistencyEnvironment env, FileReader reader )
		// ID has been read by ConversationPlayback
		
		select reader.readByte() // version
		case 0
			this.pAliasID = env.readStringIDOrNullIfEmpty( reader )
			this.pLocalMatrix.readFromFile( reader )
			
		else
			throw EInvalidParam.new( "unsupported version" )
		end
	end
	
	/**
	 * \brief Write to file.
	 * \details Used if ConversationPlayback.createConversationCoordSystem() is used.
	 */
	public func void writeToFile( PersistencyEnvironment env, FileWriter writer )
		writer.writeString8( this.pID.toString() )
		
		writer.writeByte( 0 ) // version
		
		env.writeStringIDOrEmptyIfNull( writer, this.pAliasID )
		this.pLocalMatrix.writeToFile( writer )
	end
end
