/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.LoadSave

pin Dragengine.ConversationSystem
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * Loads a conversation script from a conversation.xml file. Supports caching conversations
 * to avoid loading the same conversation multiple times. The returned conversation can thus
 * be shared so do not change it.
 */
class LoadConversation extends BaseXmlLoader
	/** Dictionary of loaded conversations. */
	private var Dictionary pConversations
	
	
	
	/** Creates a new loader. */
	public func new( Console console ) this( console, "LoadConversation" )
	end
	
	/** Creates a new loader. */
	public func new( Console console, String name ) super( console, name )
		this.pConversations = Dictionary.new()
	end
	
	
	
	/** Load conversation from file. */
	public func Conversation loadFromFile( String filename )
		var Conversation conversation = this.pConversations.getAt( filename, null ) cast Conversation
		
		if conversation == null
			this.logLoadingFromFile( filename )
			
			var EasyXML document = EasyXML.new( filename )
			if document.hasParseFailed()
				this.logParsingFailed( document.getParseLog() )
				throw EInvalidParam.new()
			end
			
			var EasyXMLElement root = document.getRootElement()
			if not root.getTagName().equals( "conversation" )
				this.logUnknownTag( root )
				throw EInvalidParam.new()
			end
			
			conversation = Conversation.new( filename )
			this.pReadConversation( root, conversation )
			this.pConversations.setAt( filename, conversation )
		end
		
		return conversation
	end
	
	
	
	/** Read conversation tag. */
	private func void pReadConversation( EasyXMLElement root, Conversation conversation )
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "target" )
				this.pReadTarget( element, conversation )
				
			elif tagName.equals( "cameraShot" )
				this.pReadCameraShot( element, conversation )
				
			elif tagName.equals( "pose" )
				// not used right now
				
			elif tagName.equals( "gesture" )
				this.pReadGesture( element, conversation )
				
			elif tagName.equals( "facePoseControllerNames" )
				// for editing only
				
			elif tagName.equals( "facePose" )
				this.pReadFacePose( element, conversation )
				
			elif tagName.equals( "lookAt" )
				this.pReadLookAt( element, conversation )
				
			elif tagName.equals( "file" ) // DEPRECATED
				this.pReadTopicGroup( element, conversation )
				
			elif tagName.equals( "topicGroup" )
				this.pReadTopicGroup( element, conversation )
				
			else
				this.logUnknownTag( element )
			end
		end )
	end
	
	/** Read target tag. */
	private func void pReadTarget( EasyXMLElement root, Conversation conversation )
		var ConversationTarget target = ConversationTarget.new( \
			StringID.new( root.getAttributeNamed( "name" ) ) )
		if conversation.getTargetNamed( target.getName() ) != null
			this.printOnConsole( root, "A target exists already with the name '" \
				+ target.getName().getString() + "'." )
			throw EInvalidParam.new()
		end
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				target.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "coordSystem" )
				target.setCoordSystemID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "bone" )
				target.setBone( element.getFirstCData() )
				
			elif tagName.equals( "position" )
				target.setPosition( this.readVector( element ) )
				
			elif tagName.equals( "orientation" )
				target.setOrientation( Matrix.newRotation( this.readVector( element ) ).toQuaternion() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		conversation.addTarget( target )
	end
	
	/** Read camera shot tag. */
	private func void pReadCameraShot( EasyXMLElement root, Conversation conversation )
		var ConversationCameraShot cameraShot = ConversationCameraShot.new( \
			StringID.new( root.getAttributeNamed( "name" ) ) )
		if conversation.getCameraShotNamed( cameraShot.getName() ) != null
			this.printOnConsole( root, "A camera shot exists already with the name '" \
				+ cameraShot.getName().getString() + "'." )
			throw EInvalidParam.new()
		end
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actorCount" )
				cameraShot.setActorCount( element.getFirstCDataInt() )
				
			elif tagName.equals( "cameraTarget" )
				// only for editing purpose
				
			elif tagName.equals( "offsetCameraFrom" )
				cameraShot.setOffsetCameraFrom( this.readVector( element ) )
				
			elif tagName.equals( "offsetCameraTo" )
				cameraShot.setOffsetCameraTo( this.readVector( element ) )
				
			elif tagName.equals( "cameraOrbitFrom" )
				cameraShot.setCameraOrbitFrom( this.readVector( element ) )
				
			elif tagName.equals( "cameraOrbitTo" )
				cameraShot.setCameraOrbitTo( this.readVector( element ) )
				
			elif tagName.equals( "cameraDistanceFrom" )
				cameraShot.setCameraDistanceFrom( element.getFirstCDataFloat() )
				
			elif tagName.equals( "cameraDistanceTo" )
				cameraShot.setCameraDistanceTo( element.getFirstCDataFloat() )
				
			elif tagName.equals( "lookAtTarget" )
				// only for editing purpose
				
			elif tagName.equals( "offsetLookAtFrom" )
				cameraShot.setOffsetLookAtFrom( this.readVector( element ) )
				
			elif tagName.equals( "offsetLookAtTo" )
				cameraShot.setOffsetLookAtTo( this.readVector( element ) )
				
			elif tagName.equals( "positionFrom" )
				cameraShot.setPositionFrom( this.readVector( element ) )
				
			elif tagName.equals( "positionTo" )
				cameraShot.setPositionTo( this.readVector( element ) )
				
			elif tagName.equals( "rotationFrom" )
				cameraShot.setRotationFrom( this.readVector( element ) )
				
			elif tagName.equals( "rotationTo" )
				cameraShot.setRotationTo( this.readVector( element ) )
				
			elif tagName.equals( "tiltFrom" )
				cameraShot.setTiltFrom( element.getFirstCDataFloat() )
				
			elif tagName.equals( "tiltTo" )
				cameraShot.setTiltTo( element.getFirstCDataFloat() )
				
			elif tagName.equals( "fovFrom" )
				cameraShot.setFovFrom( element.getFirstCDataFloat() )
				
			elif tagName.equals( "fovTo" )
				cameraShot.setFovTo( element.getFirstCDataFloat() )
				
			elif tagName.equals( "alignTargets" )
				cameraShot.setAlignTargets( element.getFirstCDataBool() )
				
			elif tagName.equals( "lockUpAxis" )
				cameraShot.setLockUpAxis( element.getFirstCDataBool() )
				
			elif tagName.equals( "relativeToLookAt" )
				cameraShot.setRelativeToLookAt( element.getFirstCDataBool() )
				
			elif tagName.equals( "lockCameraTarget" )
				cameraShot.setLockCameraTarget( element.getFirstCDataBool() )
				
			elif tagName.equals( "lockLookAtTarget" )
				cameraShot.setLockLookAtTarget( element.getFirstCDataBool() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		conversation.addCameraShot( cameraShot )
	end
	
	/** Read gesture tag. */
	private func void pReadGesture( EasyXMLElement root, Conversation conversation )
		var ConversationGesture gesture = ConversationGesture.new( \
			StringID.new( root.getAttributeNamed( "name" ) ) )
		if conversation.getGestureNamed( gesture.getName() ) != null
			this.printOnConsole( root, "A gesture exists already with the name '" \
				+ gesture.getName().getString() + "'." )
			throw EInvalidParam.new()
		end
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "animator" )
				gesture.setAnimator( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "hold" )
				gesture.setHold( element.getFirstCDataBool() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		conversation.addGesture( gesture )
	end
	
	/** Read face pose tag. */
	private func void pReadFacePose( EasyXMLElement root, Conversation conversation )
		var ConversationFacePose facePose = ConversationFacePose.new( \
			StringID.new( root.getAttributeNamed( "name" ) ) )
		if conversation.getFacePoseNamed( facePose.getName() ) != null
			this.printOnConsole( root, "A face pose exists already with the name '" \
				+ facePose.getName().getString() + "'." )
			throw EInvalidParam.new()
		end
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "controller" )
				facePose.addControllerValue( ConversationControllerValue.new( \
					element.getAttributeIntNamed( "index" ), \
					element.getAttributeFloatNamed( "value" ) ) )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		conversation.addFacePose( facePose )
	end
	
	/** Read look-at tag. */
	private func void pReadLookAt( EasyXMLElement root, Conversation conversation )
		var ConversationLookAt lookAt = ConversationLookAt.new( \
			StringID.new( root.getAttributeNamed( "name" ) ) )
		if conversation.getLookAtNamed( lookAt.getName() ) != null
			this.printOnConsole( root, "A look-at exists already with the name '" \
				+ lookAt.getName().getString() + "'." )
			throw EInvalidParam.new()
		end
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "target" )
				lookAt.setTarget( StringID.new( element.getFirstCData() ) )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		conversation.addLookAt( lookAt )
	end
	
	/** Read file tag. */
	private func void pReadTopicGroup( EasyXMLElement root, Conversation conversation )
		var ConversationTopicGroup topicGroup = ConversationTopicGroup.new( \
			StringID.new( root.getAttributeNamed( "id" ) ) )
		if conversation.getTopicGroupWithID( topicGroup.getID() ) != null
			this.printOnConsole( root, "A topic group exists already with the id '" \
				+ topicGroup.getID().getString() + "'." )
			throw EInvalidParam.new()
		end
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "topic" )
				this.pReadTopic( element, topicGroup )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		conversation.addTopicGroup( topicGroup )
	end
	
	/** Read topic tag. */
	private func void pReadTopic( EasyXMLElement root, ConversationTopicGroup file )
		var ConversationTopic topic = ConversationTopic.new( \
			StringID.new( root.getAttributeNamed( "id" ) ) )
		if file.getTopicWithID( topic.getID() ) != null
			this.printOnConsole( root, "A topic exists already with the id '" \
				+ topic.getID().getString() + "'." )
			throw EInvalidParam.new()
		end
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actions" )
				this.pReadActions( element ).forEach( block ConversationAction each
					topic.addAction( each )
				end )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		file.addTopic( topic )
	end
	
	/** Read actions. */
	private func Array pReadActions( EasyXMLElement root )
		var Array actions = Array.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "cameraShot" )
				actions.add( this.pReadActionCameraShot( element ) )
				
			elif tagName.equals( "music" )
				actions.add( this.pReadActionMusic( element ) )
				
			elif tagName.equals( "actorSpeak" )
				actions.add( this.pReadActionActorSpeak( element ) )
				
			elif tagName.equals( "ifElse" )
				actions.add( this.pReadActionIfElse( element ) )
				
			elif tagName.equals( "playerChoice" )
				actions.add( this.pReadActionPlayerChoice( element ) )
				
			elif tagName.equals( "stopConversation" )
				actions.add( this.pReadActionStopConversation( element ) )
				
			elif tagName.equals( "stopTopic" )
				actions.add( this.pReadActionStopTopic( element ) )
				
			elif tagName.equals( "snippet" )
				actions.add( this.pReadActionSnippet( element ) )
				
			elif tagName.equals( "setVariable" )
				actions.add( this.pReadActionSetVariable( element ) )
				
			elif tagName.equals( "setActorParameter" )
				actions.add( this.pReadActionSetActorParameter( element ) )
				
			elif tagName.equals( "actorCommand" )
				actions.add( this.pReadActionActorCommand( element ) )
				
			elif tagName.equals( "gameCommand" )
				actions.add( this.pReadActionGameCommand( element ) )
				
			elif tagName.equals( "wait" )
				actions.add( this.pReadActionWait( element ) )
				
			elif tagName.equals( "trigger" )
				actions.add( this.pReadActionTrigger( element ) )
				
			elif tagName.equals( "actorAdd" )
				actions.add( this.pReadActionActorAdd( element ) )
				
			elif tagName.equals( "actorRemove" )
				actions.add( this.pReadActionActorRemove( element ) )
				
			elif tagName.equals( "coordSystemAdd" )
				actions.add( this.pReadActionCoordSystemAdd( element ) )
				
			elif tagName.equals( "coordSystemRemove" )
				actions.add( this.pReadActionCoordSystemRemove( element ) )
				
			elif tagName.equals( "comment" )
				// comments are ignored
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return actions
	end
	
	/** Read common action. */
	private func bool pReadActionCommon( EasyXMLElement root, ConversationAction action )
		var String tagName = root.getTagName()
		
		if tagName.equals( "waitForActor" )
			action.setWaitForActor( root.getFirstCDataBool() )
			return true
			
		elif tagName.equals( "waitForActorID" )
			action.setWaitForActorID( root.getFirstCData() )
			return true
			
		elif tagName.equals( "delay" )
			action.setDelay( root.getFirstCDataFloat() )
			return true
		end
		
		return false
	end
	
	/** Read camera shot action. */
	private func ConversationAction pReadActionCameraShot( EasyXMLElement root )
		var CActionCameraShot action = CActionCameraShot.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "name" )
				action.setName( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "duration" )
				action.setDuration( element.getFirstCDataFloat() )
				
			elif tagName.equals( "cameraTarget" )
				action.setCameraTarget( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "lookAtTarget" )
				action.setLookAtTarget( StringID.new( element.getFirstCData() ) )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** \brief Read music action. */
	private func ConversationAction pReadActionMusic( EasyXMLElement root )
		var CActionMusic action = CActionMusic.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "name" )
				action.setName( element.getFirstCData() )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read actor speak action. */
	private func ConversationAction pReadActionActorSpeak( EasyXMLElement root )
		var CActionActorSpeak action = CActionActorSpeak.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				var String actorID = element.getFirstCData()
				
				if not actorID.empty()
					action.setActorID( StringID.new( actorID ) )
				end
				
			elif tagName.equals( "textBoxText" )
				action.setTextBoxText( UnicodeString.newFromUTF8( this.readMultilineString( element ) ) )
				
			elif tagName.equals( "textBoxTextStyle" )
				action.setTextBoxTextStyle( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "pathSound" )
				action.setPathSound( element.getFirstCData() )
				
			elif tagName.equals( "words" )
				this.pReadStrips( element ).forEach( block ConversationStrip each
					action.addWord( each )
				end )
				
			elif tagName.equals( "facePoses" )
				this.pReadStrips( element ).forEach( block ConversationStrip each
					action.addFacePose( each )
				end )
				
			elif tagName.equals( "gestures" )
				this.pReadStrips( element ).forEach( block ConversationStrip each
					action.addGesture( each )
				end )
				
			elif tagName.equals( "bodyLookAts" )
				this.pReadStrips( element ).forEach( block ConversationStrip each
					action.addBodyLookAt( each )
				end )
				
			elif tagName.equals( "headLookAts" )
				this.pReadStrips( element ).forEach( block ConversationStrip each
					action.addHeadLookAt( each )
				end )
				
			elif tagName.equals( "eyesLookAts" )
				this.pReadStrips( element ).forEach( block ConversationStrip each
					action.addEyesLookAt( each )
				end )
				
			elif tagName.equals( "movement" )
				// not yet used
				
			elif tagName.equals( "useSpeechAnimation" )
				action.setUseSpeechAnimation( element.getFirstCDataBool() )
				
			elif tagName.equals( "minSpeechTime" )
				action.setMinSpeechTime( element.getFirstCDataFloat() )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read if-else action. */
	private func ConversationAction pReadActionIfElse( EasyXMLElement root )
		var CActionIfElse action = CActionIfElse.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "case" )
				action.addCase( this.pReadActionIfElseCase( element ) )
				
			elif tagName.equals( "else" )
				this.pReadActions( element ).forEach( block ConversationAction each
					action.addElseAction( each )
				end )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** \brief Read if-else if-case action. */
	private func CActionIfElseCase pReadActionIfElseCase( EasyXMLElement root )
		var CActionIfElseCase ifcase = CActionIfElseCase.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "condition" )
				ifcase.setCondition( this.pReadSingleCondition( element ) )
				
			elif tagName.equals( "actions" )
				this.pReadActions( element ).forEach( block ConversationAction each
					ifcase.addAction( each )
				end )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return ifcase
	end
	
	/** Read player choice action. */
	private func ConversationAction pReadActionPlayerChoice( EasyXMLElement root )
		var CActionPlayerChoice action = CActionPlayerChoice.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "variable" )
				action.setVariable( element.getFirstCData() )
				
			elif tagName.equals( "option" )
				action.addOption( this.pReadActionPlayerChoiceOption( element ) )
				
			elif tagName.equals( "actions" )
				this.pReadActions( element ).forEach( block ConversationAction each
					action.addAction( each )
				end )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read player choice option action. */
	private func CActionPlayerChoiceOption pReadActionPlayerChoiceOption( EasyXMLElement root )
		var CActionPlayerChoiceOption option = CActionPlayerChoiceOption.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "text" )
				option.setText( UnicodeString.newFromUTF8( element.getFirstCData() ) )
				
			elif tagName.equals( "condition" )
				option.setCondition( this.pReadSingleCondition( element ) )
				
			elif tagName.equals( "actions" )
				this.pReadActions( element ).forEach( block ConversationAction each
					option.addAction( each )
				end )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return option
	end
	
	/** \brief Read stop conversation action. */
	private func ConversationAction pReadActionStopConversation( EasyXMLElement root )
		var CActionStopConversation action = CActionStopConversation.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** \brief Read stop topic action. */
	private func ConversationAction pReadActionStopTopic( EasyXMLElement root )
		var CActionStopTopic action = CActionStopTopic.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read snippet action. */
	private func ConversationAction pReadActionSnippet( EasyXMLElement root )
		var CActionSnippet action = CActionSnippet.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "file" )
				action.setGroupID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "topic" )
				action.setTopicID( StringID.new( element.getFirstCData() ) )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read set variable action. */
	private func ConversationAction pReadActionSetVariable( EasyXMLElement root )
		var CActionSetVariable action = CActionSetVariable.new()
		var String identifier
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "name" )
				action.setName( element.getFirstCData() )
				
			elif tagName.equals( "operator" )
				identifier = element.getFirstCData()
				
				if identifier.equals( "set" )
					action.setOperator( CActionSetVariable.Operator.set )
					
				elif identifier.equals( "increment" )
					action.setOperator( CActionSetVariable.Operator.increment )
					
				elif identifier.equals( "decrement" )
					action.setOperator( CActionSetVariable.Operator.decrement )
					
				elif identifier.equals( "random" )
					action.setOperator( CActionSetVariable.Operator.random )
					
				else
					this.logInvalidValue( element, identifier )
				end
				
			elif tagName.equals( "value" )
				action.setValue( element.getFirstCDataInt() )
				
			elif tagName.equals( "valueVariable" )
				var String valueVariable = element.getFirstCData()
				if not valueVariable.empty()
					action.setValueVariable( valueVariable )
				end
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read set actor parameter action. */
	private func ConversationAction pReadActionSetActorParameter( EasyXMLElement root )
		var CActionSetActorParameter action = CActionSetActorParameter.new()
		var String identifier
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				action.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "name" )
				action.setName( element.getFirstCData() )
				
			elif tagName.equals( "operator" )
				identifier = element.getFirstCData()
				
				if identifier.equals( "set" )
					action.setOperator( CActionSetActorParameter.Operator.set )
					
				elif identifier.equals( "increment" )
					action.setOperator( CActionSetActorParameter.Operator.increment )
					
				elif identifier.equals( "decrement" )
					action.setOperator( CActionSetActorParameter.Operator.decrement )
					
				elif identifier.equals( "random" )
					action.setOperator( CActionSetActorParameter.Operator.random )
					
				else
					this.logInvalidValue( element, identifier )
				end
				
			elif tagName.equals( "value" )
				action.setValue( element.getFirstCDataInt() )
				
			elif tagName.equals( "valueVariable" )
				var String valueVariable = element.getFirstCData()
				if not valueVariable.empty()
					action.setValueVariable( valueVariable )
				end
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read send actor command action. */
	private func ConversationAction pReadActionActorCommand( EasyXMLElement root )
		var CActionActorCommand action = CActionActorCommand.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				action.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "command" )
				action.setCommand( element.getFirstCData() )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read send ganme command action. */
	private func ConversationAction pReadActionGameCommand( EasyXMLElement root )
		var CActionGameCommand action = CActionGameCommand.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "command" )
				action.setCommand( element.getFirstCData() )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read wait action. */
	private func ConversationAction pReadActionWait( EasyXMLElement root )
		var CActionWait action = CActionWait.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "condition" )
				action.setCondition( this.pReadSingleCondition( element ) )
				
			elif tagName.equals( "interval" )
				action.setInterval( element.getFirstCDataFloat() )
				
			elif tagName.equals( "actions" )
				this.pReadActions( element ).forEach( block ConversationAction each
					action.addAction( each )
				end )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read set variable action. */
	private func ConversationAction pReadActionTrigger( EasyXMLElement root )
		var CActionTrigger action = CActionTrigger.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "name" )
				var String name = element.getFirstCData()
				if not name.empty()
					action.setName( StringID.new( name ) )
				end
				
			elif tagName.equals( "action" )
				var String identifier = element.getFirstCData()
				
				if identifier.equals( "fire" )
					action.setAction( CActionTrigger.Action.fire )
					
				elif identifier.equals( "reset" )
					action.setAction( CActionTrigger.Action.reset )
					
				elif identifier.equals( "pulse" )
					action.setAction( CActionTrigger.Action.pulse )
					
				elif identifier.equals( "fullReset" )
					action.setAction( CActionTrigger.Action.fullReset )
					
				else
					this.logInvalidValue( element, identifier )
				end
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read actor add action. */
	private func ConversationAction pReadActionActorAdd( EasyXMLElement root )
		var CActionActorAdd action = CActionActorAdd.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				action.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "aliasID" )
				action.setAliasID( StringID.new( element.getFirstCData() ) )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read actor remove action. */
	private func ConversationAction pReadActionActorRemove( EasyXMLElement root )
		var CActionActorRemove action = CActionActorRemove.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				action.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read coordinate system add action. */
	private func ConversationAction pReadActionCoordSystemAdd( EasyXMLElement root )
		var CActionCoordSystemAdd action = CActionCoordSystemAdd.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "coordSystem" )
				action.setCoordSystemID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "aliasID" )
				action.setAliasID( StringID.new( element.getFirstCData() ) )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read coordinate system remove action. */
	private func ConversationAction pReadActionCoordSystemRemove( EasyXMLElement root )
		var CActionCoordSystemRemove action = CActionCoordSystemRemove.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "coordSystem" )
				action.setCoordSystemID( StringID.new( element.getFirstCData() ) )
				
			elif not this.pReadActionCommon( element, action )
				this.logUnknownTag( element )
			end
		end )
		
		return action
	end
	
	/** Read conditions. */
	private func Array pReadConditions( EasyXMLElement root )
		var Array conditions = Array.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "logic" )
				conditions.add( this.pReadConditionLogic( element ) )
				
			elif tagName.equals( "hasActor" )
				conditions.add( this.pReadConditionHasActor( element ) )
				
			elif tagName.equals( "actorInConversation" )
				conditions.add( this.pReadConditionActorInConversation( element ) )
				
			elif tagName.equals( "variable" )
				conditions.add( this.pReadConditionVariable( element ) )
				
			elif tagName.equals( "actorParameter" )
				conditions.add( this.pReadConditionActorParameter( element ) )
				
			elif tagName.equals( "actorCommand" )
				conditions.add( this.pReadConditionActorCommand( element ) )
				
			elif tagName.equals( "gameCommand" )
				conditions.add( this.pReadConditionGameCommand( element ) )
				
			elif tagName.equals( "trigger" )
				conditions.add( this.pReadConditionTrigger( element ) )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return conditions
	end
	
	/** Read at most one conditions. */
	private func ConversationCondition pReadSingleCondition( EasyXMLElement root )
		var Array conditions = this.pReadConditions( root )
		
		if conditions.getCount() == 1
			return conditions.getAt( 0 ) cast ConversationCondition
			
		else
			this.printOnConsole( root, "Exactly one condition expected but not found." )
			throw EInvalidParam.new()
		end
	end
	
	/** Read logic condition. */
	private func ConversationCondition pReadConditionLogic( EasyXMLElement root )
		var CConditionLogic condition = CConditionLogic.new()
		var String identifier
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "operator" )
				identifier = element.getFirstCData()
				
				if identifier.equals( "none" )
					condition.setOperator( CConditionLogic.Operator.none )
					
				elif identifier.equals( "any" )
					condition.setOperator( CConditionLogic.Operator.any )
					
				elif identifier.equals( "all" )
					condition.setOperator( CConditionLogic.Operator.all )
					
				else
					this.logInvalidValue( element, identifier )
				end
				
			elif tagName.equals( "conditions" )
				this.pReadConditions( element ).forEach( block ConversationCondition each
					condition.addCondition( each )
				end )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return condition
	end
	
	/** Read has actor condition. */
	private func ConversationCondition pReadConditionHasActor( EasyXMLElement root )
		var CConditionHasActor condition = CConditionHasActor.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				condition.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "negate" )
				condition.setNegate( element.getFirstCDataBool() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return condition
	end
	
	/** \brief Read actor in conversation condition. */
	private func ConversationCondition pReadConditionActorInConversation( EasyXMLElement root )
		var CConditionActorInConversation condition = CConditionActorInConversation.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				condition.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "negate" )
				condition.setNegate( element.getFirstCDataBool() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return condition
	end
	
	/** Read variable condition. */
	private func ConversationCondition pReadConditionVariable( EasyXMLElement root )
		var CConditionVariable condition = CConditionVariable.new()
		var String identifier
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "operator" )
				identifier = element.getFirstCData()
				
				if identifier.equals( "equal" )
					condition.setOperator( CConditionVariable.Operator.equal )
					
				elif identifier.equals( "notEqual" )
					condition.setOperator( CConditionVariable.Operator.notEqual )
					
				elif identifier.equals( "less" )
					condition.setOperator( CConditionVariable.Operator.lessThan )
					
				elif identifier.equals( "lessEqual" )
					condition.setOperator( CConditionVariable.Operator.lessThanOrEqual )
					
				elif identifier.equals( "greater" )
					condition.setOperator( CConditionVariable.Operator.greaterThan )
					
				elif identifier.equals( "greaterEqual" )
					condition.setOperator( CConditionVariable.Operator.greaterThanOrEqual )
					
				else
					this.logInvalidValue( element, identifier )
				end
				
			elif tagName.equals( "variable" )
				condition.setVariable( element.getFirstCData() )
				
			elif tagName.equals( "testValue" )
				condition.setTestValue( element.getFirstCDataInt() )
				
			elif tagName.equals( "testVariable" )
				condition.setTestVariable( element.getFirstCData() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return condition
	end
	
	/** Read actor parameter condition. */
	private func ConversationCondition pReadConditionActorParameter( EasyXMLElement root )
		var CConditionActorParameter condition = CConditionActorParameter.new()
		var String identifier
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				condition.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "operator" )
				identifier = element.getFirstCData()
				
				if identifier.equals( "equal" )
					condition.setOperator( CConditionActorParameter.Operator.equal )
					
				elif identifier.equals( "notEqual" )
					condition.setOperator( CConditionActorParameter.Operator.notEqual )
					
				elif identifier.equals( "less" )
					condition.setOperator( CConditionActorParameter.Operator.lessThan )
					
				elif identifier.equals( "lessEqual" )
					condition.setOperator( CConditionActorParameter.Operator.lessThanOrEqual )
					
				elif identifier.equals( "greater" )
					condition.setOperator( CConditionActorParameter.Operator.greaterThan )
					
				elif identifier.equals( "greaterEqual" )
					condition.setOperator( CConditionActorParameter.Operator.greaterThanOrEqual )
					
				else
					this.logInvalidValue( element, identifier )
				end
				
			elif tagName.equals( "parameter" )
				condition.setParameter( element.getFirstCData() )
				
			elif tagName.equals( "testValue" )
				condition.setTestValue( element.getFirstCDataInt() )
				
			elif tagName.equals( "testVariable" )
				condition.setTestVariable( element.getFirstCData() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return condition
	end
	
	/** Read actor command condition. */
	private func ConversationCondition pReadConditionActorCommand( EasyXMLElement root )
		var CConditionActorCommand condition = CConditionActorCommand.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "actor" )
				condition.setActorID( StringID.new( element.getFirstCData() ) )
				
			elif tagName.equals( "command" )
				condition.setCommand( element.getFirstCData() )
				
			elif tagName.equals( "negate" )
				condition.setNegate( element.getFirstCDataBool() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return condition
	end
	
	/** Read game command condition. */
	private func ConversationCondition pReadConditionGameCommand( EasyXMLElement root )
		var CConditionGameCommand condition = CConditionGameCommand.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "command" )
				condition.setCommand( element.getFirstCData() )
				
			elif tagName.equals( "negate" )
				condition.setNegate( element.getFirstCDataBool() )
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return condition
	end
	
	/** Read trigger condition. */
	private func ConversationCondition pReadConditionTrigger( EasyXMLElement root )
		var CConditionTrigger condition = CConditionTrigger.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "testMode" )
				var String identifier = element.getFirstCData()
				
				if identifier.equals( "fired" )
					condition.setTestMode( CConditionTrigger.TestMode.fired )
					
				elif identifier.equals( "notFired" )
					condition.setTestMode( CConditionTrigger.TestMode.notFired )
					
				elif identifier.equals( "everFired" )
					condition.setTestMode( CConditionTrigger.TestMode.everFired )
					
				elif identifier.equals( "neverFired" )
					condition.setTestMode( CConditionTrigger.TestMode.neverFired )
					
				else
					this.logInvalidValue( element, identifier )
				end
				
			elif tagName.equals( "trigger" )
				var String trigger = element.getFirstCData()
				if not trigger.empty()
					condition.setTrigger( StringID.new( trigger ) )
				end
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return condition
	end
	
	/** Read strips. */
	private func Array pReadStrips( EasyXMLElement root )
		var Array strips = Array.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "entry" )
				var float duration = element.getAttributeFloatNamed( "duration" )
				var String id = element.getFirstCData()
				var float pause = 0.0
				
				if element.hasAttributeNamed( "pause" )
					pause = element.getAttributeFloatNamed( "pause" )
				end
				
				if id.empty()
					strips.add( ConversationStrip.new( null, pause, duration ) )
					
				else
					strips.add( ConversationStrip.new( StringID.new( id ), pause, duration ) )
				end
				
			else
				this.logUnknownTag( element )
			end
		end )
		
		return strips
	end
end
