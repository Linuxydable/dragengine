/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.LoadSave

pin Dragengine.Scenery



/**
 * Loads a navigation space from a .navspace file.
 */
class LoadNavigationSpace
	/** Creates a new loader. */
	public func new()
	end
	
	
	
	/** Load portal system from file. */
	public func NavigationSpace loadFromFile( String filename )
		var String signatureCheck = "Drag[en]gine Navigation Space"
		var NavigationSpace navspace = NavigationSpace.new()
		var FileReader fileReader
		var String signature //29
		var int version, flags
		var int vertexCount = 0
		var int edgeCount = 0
		var int cornerCount = 0
		var int faceCount = 0
		var int wallCount = 0
		var int roomCount = 0
		var int v1, v2, v3, v4
		var float px, py, pz
		var int i
		
		fileReader = FileReader.new( filename )
		
		signature = fileReader.readString( 29 )
		if not signature.equals( signatureCheck )
			throw EInvalidParam.new() // dueInvalidFileFormat
		end
		
		version = fileReader.readUShort()
		flags = fileReader.readUShort()
		
		if version == 1
			// read counts
			vertexCount = fileReader.readUShort()
			edgeCount = fileReader.readUShort()
			cornerCount = fileReader.readUShort()
			faceCount = fileReader.readUShort()
			wallCount = fileReader.readUShort()
			roomCount = fileReader.readUShort()
			
			navspace.setType( NavigationSpaceType.withOrder( fileReader.readUShort() ) )
			
			navspace.setVertexCount( vertexCount )
			navspace.setEdgeCount( edgeCount )
			navspace.setCornerCount( cornerCount )
			navspace.setFaceCount( faceCount )
			navspace.setWallCount( wallCount )
			navspace.setRoomCount( roomCount )
			
			// read vertices
			for i = 0 to vertexCount
				px = fileReader.readFloat()
				py = fileReader.readFloat()
				pz = fileReader.readFloat()
				navspace.setVertexAt( i, Vector.new( px, py, pz ) )
			end
			
			// read edges
			for i = 0 to edgeCount
				v1 = fileReader.readUShort() // vertex 1
				v2 = fileReader.readUShort() // vertex 2
				v3 = fileReader.readUShort() // type number 1
				v4 = fileReader.readUShort() // type number 2
				navspace.setEdgeAt( i, v1, v2, v3, v4 )
			end
			
			// read corners
			for i = 0 to cornerCount
				v1 = fileReader.readUShort() // vertex
				v2 = fileReader.readUShort() // type number
				navspace.setCornerAt( i, v1, v2 )
			end
			
			// read faces
			for  i = 0 to faceCount
				v1 = fileReader.readUShort() // corner count
				v2 = fileReader.readUShort() // type number
				navspace.setFaceAt( i, v1, v2 )
			end
			
			// read walls
			for i = 0 to wallCount
				v1 = fileReader.readUShort() // face
				v2 = fileReader.readUShort() // type
				navspace.setWallAt( i, v1, v2 )
			end
			
			// read rooms
			for i = 0 to roomCount
				v1 = fileReader.readUShort() // front wall count
				v2 = fileReader.readUShort() // back wall count
				v3 = fileReader.readUShort() // type number
				navspace.setRoomAt( i, v1, v2, v3 )
			end
		end
		
		navspace.layoutChanged()
		
		return navspace 
	end
end
