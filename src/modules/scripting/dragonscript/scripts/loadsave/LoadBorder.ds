/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.LoadSave

pin Dragengine.Gui.Borders.Factories
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load borders from xml files.
 */
class LoadBorder extends BaseXmlLoader
	private var Dictionary pLoadedFactories
	private var LoadCanvasCreator pCanvasCreatorLoader
	private var BorderFactories pFactories
	
	
	
	/** \brief Create loader. */
	public func new( Console console ) this( console, "LoadBorder" )
	end
	
	/** \brief Create loader. */
	public func new( Console console, String name ) super( console, name )
		this.pLoadedFactories = Dictionary.new()
		this.pFactories = BorderFactories.new()
		this.pFactories.addDefaultFactories()
	end
	
	
	
	/** \brief Canvas creator loader. */
	public func LoadCanvasCreator getCanvasCreatorLoader()
		return this.pCanvasCreatorLoader
	end
	
	/** \brief Set canvas creator loader. */
	public func void setCanvasCreatorLoader( LoadCanvasCreator loader )
		this.pCanvasCreatorLoader = loader
	end
	
	
	
	/** \brief Factories. */
	public func BorderFactories getFactories()
		return this.pFactories
	end
	
	/** \brief Set factories. */
	public func void setFactories( BorderFactories factories )
		if factories == null
			throw EInvalidParam.new()
		end
		this.pFactories = factories
	end
	
	
	
	/**
	 * \brief Load border from xml file.
	 * \returns Factory to create instance of the customized border.
	 */
	public func BorderFactory loadFromFile( String filename )
		var BorderFactory factory = this.pLoadedFactories.getAt( filename, null ) cast BorderFactory
		if factory != null
			return factory.copyFactory()
		end
		
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals( "border" )
			this.logUnknownTag( filename, root )
			throw EInvalidParam.new()
		end
		
		var String basePath = File.new( filename ).getParent().getPath()
		
		factory = this.parseBorder( filename, root, basePath )
		this.pLoadedFactories.setAt( filename, factory )
		return factory.copyFactory()
	end
	
	
	
	/**
	 * \brief Parse border tag.
	 * \details This is public to be used by LoadGuiTheme.
	 * \returns Factory to create instance of the customized border.
	 */
	public func BorderFactory parseBorder( String filename, EasyXMLElement root, String basePath )
		var BorderFactory factory
		
		if root.hasAttributeNamed( "extend" )
			try
				factory = this.loadFromFile( File.absolutePath( \
					root.getAttributeNamed( "extend" ), basePath ).getPath() )
				
			catch Exception e
				this.printOnConsole( filename, root, "Failed loading border '" \
					+ root.getAttributeNamed( "extend" ) + "'" )
				throw
			end
			
		elif root.hasAttributeNamed( "type" )
			try
				factory = this.pFactories.getNamed( root.getAttributeNamed( "type" ) )
				
			catch Exception e
				this.printOnConsole( filename, root, "Border factory type '" \
					+ root.getAttributeNamed( "type" ) + "' not found" )
				throw
			end
			
		else
			this.printOnConsole( filename, root, "Missing source attribute" )
			throw EInvalidParam.new()
		end
		
		var int i, elementCount = root.getElementCount()
		var EasyXMLElement element
		var Object parameterValue
		var String parameterName
		var bool isShared = true
		var String tagName
		
		for i = 0 to elementCount
			element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			if isShared
				factory = factory.copyFactory()
				isShared = false
			end
			
			parameterName = element.getAttributeNamed( "parameter" )
			parameterValue = this.parseParameter( filename, element, basePath )
			
			try
				factory.setParameter( parameterName, parameterValue )
				
			catch Exception e
				this.printOnConsole( filename, element, factory.className() \
					+ " does not understand parameter '" + parameterName \
					+ "' with value '" + parameterValue + "'" )
			end
		end
		
		return factory
	end
	
	/**
	 * \brief Parse border parameter.
	 * \details Overwrite in subclass to extend the supported parameter types.
	 */
	public func Object parseParameter( String filename, EasyXMLElement element, String basePath )
		var String tagName = element.getTagName()
		
		if tagName.equals( "integer" )
			return element.getFirstCDataInt()
			
		elif tagName.equals( "float" )
			return element.getFirstCDataFloat()
			
		elif tagName.equals( "boolean" )
			return element.getFirstCDataBool()
			
		elif tagName.equals( "string" )
			return element.getFirstCData()
			
		elif tagName.equals( "color" )
			return this.readColor( element )
			
		elif tagName.equals( "borderSize" )
			return this.readBorderSize( element )
			
		elif tagName.equals( "point" )
			return this.readPoint( element )
			
		elif tagName.equals( "colorMatrix" )
			return this.readColorMatrix( element )
			
		elif tagName.equals( "image" )
			var String path = element.getFirstCData()
			if path.empty()
				return null
			end
			
			try
				return Image.new( File.absolutePath( path, basePath ).getPath() )
				
			catch Exception e
				this.printOnConsole( filename, element, "Failed loading image '" + path + "'" )
				throw
			end
			
		elif tagName.equals( "video" )
			var String path = element.getFirstCData()
			if path.empty()
				return null
			end
			
			try
				return Video.new( File.absolutePath( path, basePath ).getPath() )
				
			catch Exception e
				this.printOnConsole( filename, element, "Failed loading video '" + path + "'" )
				throw
			end
			
		elif tagName.equals( "null" )
			return null
			
		elif tagName.equals( "canvasCreator" )
			return this.pCanvasCreatorLoader.parseCanvasCreator( filename, element, basePath )
			
		elif tagName.equals( "border" )
			return this.parseBorder( filename, element, basePath )
			
		else
			this.logUnknownTag( filename, element )
			throw EInvalidParam.new()
		end
	end
end
