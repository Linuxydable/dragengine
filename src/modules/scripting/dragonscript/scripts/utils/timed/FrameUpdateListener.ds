/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Utils



/**
 * \brief Listener called every time a frame update is done.
 */
abstract class FrameUpdateListener
	/** \brief Frame update manager this listener is registered at. */
	private var FrameUpdateManager pFrameUpdateManager
	
	
	
	/** \brief Create listener registered at default frame update listener. */
	public func new() this( FrameUpdateManager.getDefault() )
	end
	
	/** \brief Create listener registered at frame update manager. */
	public func new( FrameUpdateManager manager )
		if manager == null
			throw EInvalidParam.new()
		end
		
		manager.addListener( this )
		this.pFrameUpdateManager = manager
	end
	
	
	
	/** \brief Remove listener from manager if registered at one. */
	public func void giveUp()
		if this.pFrameUpdateManager == null
			return
		end
		
		this.pFrameUpdateManager.removeListener( this )
		this.pFrameUpdateManager = null
	end
	
	
	
	/** \brief Frame update manager the listener is registered at. */
	public func FrameUpdateManager getFrameUpdateManager()
		return this.pFrameUpdateManager
	end
	
	
	
	/**
	 * \brief Do frame update.
	 * 
	 * \param elapsed Elapsed time since the last frame update. Equals Engine.getElapsedTime().
	 */
	abstract public func void frameUpdate( float elapsed )
end
