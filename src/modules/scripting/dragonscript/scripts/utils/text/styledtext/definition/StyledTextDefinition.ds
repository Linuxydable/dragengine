/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.Utils.StyledText.Definition

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition.Nodes



/**
 * \brief Styled text definition.
 */
class StyledTextDefinition
	private var Array pNodes
	private var Dictionary pStyles
	private var STDStyle pPageStyle
	private var STDStyle pDefaultStyle
	private var Point pPageSize
	
	
	
	/** \brief Create styled text definition. */
	public func new()
		this.pNodes = Array.new()
		this.pStyles = Dictionary.new()
		this.pPageStyle = STDStyle.new( "" )
		this.pDefaultStyle = STDStyle.new( "" )
		this.pPageSize = Point.new( 350, 500 )
	end
	
	/** \brief Create copy of styled text definition. */
	public func new( StyledTextDefinition definition )
		this.pNodes = definition.pNodes.map( block STDNode each
			return each.copy()
		end )
		this.pPageStyle = STDStyle.new( definition.pPageStyle )
		this.pDefaultStyle = STDStyle.new( definition.pDefaultStyle )
		this.pStyles = definition.pStyles.map( block String name, STDStyle style
			return STDStyle.new( style )
		end )
		this.pPageSize = definition.pPageSize
	end
	
	
	
	/** \brief Number of nodes. */
	public func int getNodeCount()
		return this.pNodes.getCount()
	end
	
	/** \brief Node at index. */
	public func STDNode getNodeAt( int index )
		return this.pNodes.getAt( index ) cast STDNode
	end
	
	/** \brief Add node. */
	public func void addNode( STDNode node )
		this.pNodes.add( node )
	end
	
	/** \brief Remove all nodes. */
	public func void removeAllNodes()
		this.pNodes.removeAll()
	end
	
	/** \brief Visit nodes with block with STDNode as parameter. */
	public func void forEachNode( Block ablock )
		this.pNodes.forEach( ablock )
	end
	
	/** \brief Visit nodes with visitor. */
	public func void visitNodes( STDNodeVisitor visitor )
		this.pNodes.forEach( block STDNode each
			each.visit( visitor )
		end )
	end
	
	
	
	/** \brief Number of styles. */
	public func int getStyleCount()
		return this.pStyles.getCount()
	end
	
	/** \brief Style with name is present. */
	public func bool hasStyleNamed( String name )
		return this.pStyles.has( name )
	end
	
	/** \brief Style with name or \em null if absent. */
	public func STDStyle getStyleNamed( String name )
		return this.pStyles.getAt( name, null ) cast STDStyle
	end
	
	/** \brief Add style replacing style with same name if present. */
	public func void addStyle( STDStyle style )
		this.pStyles.setAt( style.getName(), style )
	end
	
	/** \brief Remove all styles. */
	public func void removeAllStyles()
		this.pStyles.removeAll()
	end
	
	/** \brief Visit styles with block with STDStyle as parameter. */
	public func void forEachStyle( Block ablock )
		this.pStyles.forEachValue( ablock )
	end
	
	
	
	/** \brief Page style. */
	public func STDStyle getPageStyle()
		return this.pPageStyle
	end
	
	/** \brief Set page style. */
	public func void setPageStyle( STDStyle style )
		if style == null
			throw EInvalidParam.new()
		end
		this.pPageStyle = style
	end
	
	/** \brief Style to use for nodes not having a style set. */
	public func STDStyle getDefaultStyle()
		return this.pDefaultStyle
	end
	
	/** \brief Set style to use for nodes not having a style set. */
	public func void setDefaultStyle( STDStyle style )
		if style == null
			throw EInvalidParam.new()
		end
		this.pDefaultStyle = style
	end
	
	/**
	 * \brief Optimal page size in pixels.
	 * \details Using this page size results in an optimal document layout.
	 */
	public func Point getPageSize()
		return this.pPageSize
	end
	
	/**
	 * \brief Set optimal page size in pixels.
	 * \details Using this page size results in an optimal document layout.
	 */
	public func void setPageSize( Point pageSize )
		this.pPageSize = pageSize
	end
end
