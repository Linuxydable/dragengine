/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Utils



/**
 * \brief Rule for resolving variables in text.
 * 
 * Supports tags of the form {action:variable name[,default value]}. "action" is the action
 * named used while adding the rule. A typical value to use for action is "var" or "variable".
 * The "variable name" parameter is the name of the variable to look up in the variable table.
 * If the variable is present the value stored in the variable table is returned as resolved
 * text. If the variable is absent the parameter "default value" is returned as resolved
 * text. If the parameter "default value" is absent an empty string is returned as text.
 * The "," separator between variable name and default value can be changed to any other
 * character. This is useful if you need "," for your variable names.
 * 
 * The variable name can use any character except the default value separator (default ",")
 * and "{" or "}" which are used as tag boundaries. This class is not going to check the
 * names of variables added to the list to follow this rules. If you do not follow this rule
 * the variables will be ignored.
 * 
 * The typical way of using this rule is to store it aside in the scripts using the
 * TagResolver. Before processing text set the variables you want to be used to this rule.
 */
class TRRVariable implements TagResolverRule
	private var Dictionary pVariables
	private var byte pSeparatorDefaultValue
	
	
	
	/** \brief Create resolve variable rule with empty variable table. */
	public func new()
		this.pVariables = Dictionary.new()
		this.pSeparatorDefaultValue = ','
	end
	
	/** \brief Create copy of resolve variable rule. */
	public func new( TRRVariable rule )
		this.pVariables = Dictionary.new( rule.pVariables )
		this.pSeparatorDefaultValue = rule.pSeparatorDefaultValue
	end
	
	
	
	/** \brief Separate character between variable name and default value. */
	public func byte getSeparatorDefaultValue()
		return this.pSeparatorDefaultValue
	end
	
	/** \brief Set separate character between variable name and default value. */
	public func void setSeparatorDefaultValue( byte separator )
		this.pSeparatorDefaultValue = separator
	end
	
	
	
	/** \brief Count of variables. */
	public func int getCount()
		return this.pVariables.getCount()
	end
	
	/** \brief Variable is present. */
	public func bool has( String variable )
		return this.pVariables.has( variable )
	end
	
	/** \brief Value of variable or default value if absent. */
	public func String getAt( String variable, String defaultValue )
		return this.pVariables.getAt( variable, defaultValue ) cast String
	end
	
	/** \brief Set value of variable. */
	public func void setAt( String variable, String value )
		if value == null
			throw ENullPointer.new( "value" )
		end
		this.pVariables.setAt( variable, value )
	end
	
	/** \brief Remove value if present. */
	public func void remove( String variable )
		this.pVariables.removeIfExisting( variable )
	end
	
	/** \brief Remove all variables. */
	public func void removeAll()
		this.pVariables.removeAll()
	end
	
	/**
	 * \brief Visit variables with block.
	 * 
	 * Block receives as first argument String name and as second argument String value.
	 */
	public func void forEach( Block ablock )
		this.pVariables.forEach( ablock )
	end
	
	
	
	/**
	 * \brief Resolve tag returning text to output instead of the tag.
	 * \param parameters Parameters inside tag.
	 * \param context Object in the context of which the resolving is done. Context is not used.
	 */
	public func String resolveTag( String parameters, Object context )
		var int index = parameters.find( this.pSeparatorDefaultValue )
		var String variableName, defaultValue
		
		if index != -1
			variableName = parameters.substring( 0, index )
			defaultValue = parameters.substring( index + 1 )
			
		else
			variableName = parameters
			defaultValue = ""
		end
		
		return this.getAt( variableName, defaultValue )
	end
end
