/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Panel to edit bindings.
 * 
 * Default implementation is a single EditBindingsListBox instance but can be replaced
 * with any custom panel layout desired. The panel creates a copy of the BindingManager
 * to edit. This is the working copy where the changes are made to. The  resetChanges()
 * method is provided to revert the changes to the original binding manager content.
 * Using the applyChanges() method the changes are applied to the original binding manager.
 */
class EditBindingsPanel extends Panel
	/** \brief Binding manager. */
	private var BindingManager pBindingManager
	
	/** \brief Working copy of binding manager. */
	private var BindingManager pEditBindingManager
	
	/** \brief Edit bindings list model. */
	private var EditBindingsListModel pModel
	
	/** \brief Edit bindings list box. */
	private var EditBindingsListBox pListBox
	
	
	
	/**
	 * \brief Create edit bindings panel.
	 * 
	 * Creates a working copy of the binding manager to edit non-distructive. Create a
	 * EditBindingsListBox for editing. Once created add commands to edit to getEditModel().
	 * 
	 * \param bindingManager Bining manager to edit.
	 */
	public func new( BindingManager bindingManager )
		if bindingManager == null
			throw EInvalidParam.new()
		end
		
		this.pBindingManager = bindingManager
		
		this.pEditBindingManager = BindingManager.new()
		this.pModel = EditBindingsListModel.new( this.pEditBindingManager )
		
		this.createContent()
		this.resetChanges()
	end
	
	
	
	/** \brief Working copy of binding manager. */
	public func BindingManager getEditBindingManager()
		return this.pEditBindingManager
	end
	
	/** \brief Edit bindings list model. */
	public func EditBindingsListModel getModel()
		return this.pModel
	end
	
	/** \brief Edit bindings list box. */
	public func EditBindingsListBox getListBox()
		return this.pListBox
	end
	
	
	
	/** \brief Reset working binding manager to original binding manager. */
	public func void resetChanges()
		this.pEditBindingManager.removeAllAxisBindings()
		this.pBindingManager.forEachAxisBinding( block Binding each
			this.pEditBindingManager.addAxisBinding( Binding.new( each ) )
		end )
		
		this.pEditBindingManager.removeAllButtonBindings()
		this.pBindingManager.forEachButtonBinding( block Binding each
			this.pEditBindingManager.addButtonBinding( Binding.new( each ) )
		end )
		
		this.pEditBindingManager.updateAllBindingIndices()
		
		this.pModel.notifyContentChanged( 0, this.pModel.getCount() - 1 )
	end
	
	/** \brief Copy working binding manager to original binding manager. */
	public func void applyChanges()
		this.pModel.forEachEntry( block EditBindingsListModelEntry entry
			this.pBindingManager.removeBindingsWithCommand( entry.getCommand() )
			
			entry.forEachAxisBinding( block Binding binding
				this.pBindingManager.addAxisBinding( Binding.new( binding ) )
			end )
			
			entry.forEachButtonBinding( block Binding binding
				this.pBindingManager.addButtonBinding( Binding.new( binding ) )
			end )
		end )
		
		this.pBindingManager.updateAllBindingIndices()
	end
	
	
	
	/**
	 * \brief Create content with a single EditBindingsListBox.
	 */
	protected func void createContent()
		this.setLayout( BorderLayout.new( 3 ) )
		this.pListBox = EditBindingsListBox.new( this.pModel )
		this.addWidget( ScrollPanel.new( this.pListBox ), BorderLayout.Area.content )
		this.addWidget( Label.new( "Press 'Return' to add and 'Delete' to clear bindings" ), BorderLayout.Area.bottom )
	end
end
