/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Designers
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Shows a scrollbar either horizontal or vertical that allows the user
 * to select a value out of the available range. The size of the knob
 * represents the amount of pages that can be scrolled through.
 * 
 * Supports designing using designer selector "ScrollBar". Designer has to implement
 * interface ScrollBarDesigner.
 */
class ScrollBar extends Container implements RangeModelListener
	/** Scroll button state change listener. */
	class ScrollButtonStateListener extends DefaultStateChangeListener
		/** Scroll action. */
		private var ActionListener pActionScroll
		
		/** Repeat scroll timer */
		private var RepeatActionTimer pRepeatScrollTimer
		
		/** Create scroll button. */
		public func new( ActionListener scrollAction )
			this.pActionScroll = scrollAction
		end
		
		/** \brief Widget changed state. */
		public func void onStateChanged( StateChangeEvent event )
			// state changed can be send due to pressed state change but also due to other state
			// changes like higlighted state changed. care has to be taken to properly start and
			// stop the timer otherwise leaking timers can be created
			if ( event.getSource() cast Button ).getPressed()
				if this.pRepeatScrollTimer == null
					this.pRepeatScrollTimer = RepeatActionTimer.new( this.pActionScroll, event.getSource(), 0 )
					this.pRepeatScrollTimer.sendEvent()
				end
				
			else
				if this.pRepeatScrollTimer != null
					this.pRepeatScrollTimer.giveUp()
					this.pRepeatScrollTimer = null
				end
			end
		end
		
		/** \brief Dispose of listener. */
		public func void dispose()
			if this.pRepeatScrollTimer != null
				this.pRepeatScrollTimer.giveUp()
				this.pRepeatScrollTimer = null
			end
		end
	end
	
	/** Action scroll up/left action. */
	class ActionScrollUpLeft extends DefaultActionListener
		private var ScrollBar pScrollBar
		public func new( ScrollBar scrollBar )
			this.pScrollBar = scrollBar
		end
		public func void onAction( ActionEvent event )
			var RangeModel model = this.pScrollBar.getModel()
			
			if ( event.getModifiers() & ModifiableEvent.shift ) == ModifiableEvent.shift
				model.setValue( model.getValue() - model.getPageSize() )
				
			else
				model.setValue( model.getValue() - model.getIncrement() )
			end
		end
	end
	
	/** Action scroll down/right action. */
	class ActionScrollDownRight extends DefaultActionListener
		private var ScrollBar pScrollBar
		public func new( ScrollBar scrollBar )
			this.pScrollBar = scrollBar
		end
		public func void onAction( ActionEvent event )
			var RangeModel model = this.pScrollBar.getModel()
			
			if ( event.getModifiers() & ModifiableEvent.shift ) == ModifiableEvent.shift
				model.setValue( model.getValue() + model.getPageSize() )
				
			else
				model.setValue( model.getValue() + model.getIncrement() )
			end
		end
	end
	
	/** Action scroll page up/left action. */
	class ActionScrollPageUpLeft extends DefaultActionListener
		private var ScrollBar pScrollBar
		public func new( ScrollBar scrollBar )
			this.pScrollBar = scrollBar
		end
		public func void onAction( ActionEvent event )
			var RangeModel model = this.pScrollBar.getModel()
			model.setValue( model.getValue() - DEMath.max( model.getPageSize(), 1 ) )
		end
	end
	
	/** Action scroll page down/right action. */
	class ActionScrollPageDownRight extends DefaultActionListener
		private var ScrollBar pScrollBar
		public func new( ScrollBar scrollBar )
			this.pScrollBar = scrollBar
		end
		public func void onAction( ActionEvent event )
			var RangeModel model = this.pScrollBar.getModel()
			model.setValue( model.getValue() + DEMath.max( model.getPageSize(), 1 ) )
		end
	end
	
	/** Drag knob mouse listener. */
	class DragKnobMouseListener extends DefaultMouseListener
		private var ScrollBar pScrollBar
		private var Point pOffset
		
		public func new( ScrollBar scrollBar )
			this.pScrollBar = scrollBar
		end
		
		public func void onButtonPress( MouseEvent event )
			if event.getButton() == InputEventMouseButton.left
				this.pOffset = event.getPosition()
				( event.getSource() cast Widget ).captureMouse()
			end
		end
		
		public func void onButtonRelease( MouseEvent event )
			if event.getButton() == InputEventMouseButton.left
				( event.getSource() cast Widget ).releaseMouse()
				this.pOffset = null
			end
		end
		
		public func void onMouseMove( MouseEvent event )
			if this.pOffset == null
				return
			end
			
			var RectArea helperPos = this.pScrollBar.getHelperPositions()
			var RangeModel model = this.pScrollBar.getModel()
			var int range = model.getMaximum() - model.getMinimum()
			var int offset
			
			if this.pScrollBar.getOrientation() == ScrollBar.Orientation.horizontal
				offset = ( event.getSource() cast Widget ).getX() + event.getPosition().getX() - this.pOffset.getX()
				
			else
				offset = ( event.getSource() cast Widget ).getY() + event.getPosition().getY() - this.pOffset.getY()
			end
			
			var int denom = helperPos.getY2() - helperPos.getX1() - this.pScrollBar.getKnobSize()
			var int value
			
			if denom <= 0
				value = 0
				
			else
				value = ( ( ( range * ( offset - helperPos.getX1() ) ) cast float ) / ( denom cast float ) + 0.5 ) cast int
			end
			
			model.setValue( model.getMinimum() + value )
		end
	end
	
	
	
	/** Orientation of the scrollbar */
	private var Orientation pOrientation
	
	/** Range Model holding state of scrollbar */
	private var RangeModel pModel
	
	/** \brief Hide scroll bar if range is empty. */
	private var bool pHideIfEmpty
	
	/** Determines in which area the drag started */
	private var int pDragArea
	
	/** Offset of drag start click to left knob */
	private var int pOffsetDrag
	
	/** Store positions for quick access later */
	private var RectArea pHelperPositions
	
	/** Repeat scroll timer */
	private var RepeatActionTimer pRepeatScrollTimer
	
	/** Left/up button. */
	private var Button pButtonLeftUp
	
	/** Right/down button. */
	private var Button pButtonRightDown
	
	/** Knob widget. */
	private var Widget pWidgetKnob
	
	/** \brief Frame widget. */
	private var Panel pWidgetFrame
	
	/** \brief Scroll state listeners to clean up upon dispose. */
	private var Array pDisposeScrollButtonStateListeners
	
	
	
	/** Create scroll bar widget. */
	public func new( Orientation orientation )
		this.pDisposeScrollButtonStateListeners = Array.new()
		
		this.pModel = DefaultRangeModel.new()
		this.pModel.addListener(this)
		this.pHideIfEmpty = false
		this.pDragArea = 0
		
		this.setDesignerSelector( "ScrollBar" )
		
		this.setOrientation( orientation )
		this.setCanFocus( false )
		
		this.createContent()
		this.enableDirectionButtons()
		
		this.addMouseListener( WheelActionMouseListener.new( \
			ActionScrollUpLeft.new( this ), ActionScrollDownRight.new( this ) ) )
	end
	
	/** \brief Create scroll bar widget with model. */
	public func new( Orientation orientation, RangeModel model ) this( orientation )
		this.setModel( model )
	end
	
	/** Dispose of widget. */
	public func void dispose()
		if this.pDisposeScrollButtonStateListeners != null
			this.pDisposeScrollButtonStateListeners.forEach( block ScrollButtonStateListener each
				each.dispose()
			end )
			this.pDisposeScrollButtonStateListeners = null
		end
		this.stopRepeatScrollTimer()
		this.pButtonLeftUp = null
		this.pButtonRightDown = null
		this.pModel.removeListener( this )
		this.pModel = null
		this.pWidgetFrame = null
		this.pWidgetKnob = null
		
		super.dispose()
	end
	
	
	
	/** Orientation of the scrollbar. */
	public func Orientation getOrientation()
		return this.pOrientation
	end
	
	/** Set oriantation of the scrollbar. */
	public func void setOrientation( Orientation orientation )
		if this.pOrientation == orientation
			return
		end
		
		this.pOrientation = orientation
		
		this.createContent()
		this.enableDirectionButtons()
		this.updateKnobWidget()
	end
	
	/** Range model. */
	public func RangeModel getModel()
		return this.pModel
	end
	
	/** Set range model. */
	public func void setModel( RangeModel rangeModel )
		if rangeModel == null
			throw EInvalidParam.new()
		end
		
		if rangeModel == this.pModel
			return
		end
		
		this.pModel.removeListener( this )
		this.pModel = rangeModel
		this.pModel.addListener( this )
		
		this.enableDirectionButtons()
		this.updateKnobWidget()
	end
	
	/** \brief Hide scroll bar if range is empty. */
	public func bool getHideIfEmpty()
		return this.pHideIfEmpty
	end
	
	/** \brief Set if scroll bar is hidden if range is empty. */
	public func void setHideIfEmpty( bool hideIfEmpty )
		if hideIfEmpty == this.pHideIfEmpty
			return
		end
		this.pHideIfEmpty = hideIfEmpty
		this.checkHiding()
	end
	
	/** Size of the drag knob. */
	public func int getKnobSize()
		var RectArea helperPos = this.getHelperPositions()
		return helperPos.getX2() - helperPos.getY1()
	end
	
	
	
	/**
	 * Send if the outer range properties like minimum value, maximum
	 * value or page size has changed.
	 */
	public func void rangeChanged( RangeModel rangeModel )
		this.checkHiding()
		this.enableDirectionButtons()
		this.updateKnobWidget()
	end
	
	/** Send if the value has changed. */
	public func void valueChanged( RangeModel rangeModel )
		this.checkHiding()
		this.enableDirectionButtons()
		this.updateKnobWidget()
	end
	
	
	
	/** Notification that the gui theme changed. */
	public func void onGuiThemeChanged()
		super.onGuiThemeChanged()
		
		this.createContent()
		this.enableDirectionButtons()
		this.updateKnobWidget()
	end
	
	/** \brief Designer changed. */
	public func void onDesignerChanged()
		this.createContent()
	end
	
	/** \brief Size changed. */
	public func void onResize( WidgetEvent event )
		super.onResize( event )
		this.updateKnobWidget()
	end
	
	
	
	/** Mouse button has been pressed. */
	public func void onButtonPress( MouseEvent event )
		super.onButtonPress( event )
		
		if event.getSource() != this.pWidgetFrame
			return
		end
		
		if event.getButton() == InputEventMouseButton.left
			var Point position = event.getPosition()
			var RectArea helperPos = this.getHelperPositions()
			var int testValue
			
			if this.pOrientation == Orientation.horizontal
				testValue = position.getX()
				this.pOffsetDrag = position.getX() - this.getHelperPositions().getY1()
				
			else
				testValue = position.getY()
				this.pOffsetDrag = position.getY() - this.getHelperPositions().getY1()
			end
			
			if testValue < helperPos.getY1()
				this.stopRepeatScrollTimer()
				this.pDragArea = 2
				this.pRepeatScrollTimer = RepeatActionTimer.new( ActionScrollPageUpLeft.new( this ), \
					event.getSource(), event.getModifiers() )
				this.pRepeatScrollTimer.sendEvent()
				
			elif testValue > helperPos.getX2()
				this.stopRepeatScrollTimer()
				this.pDragArea = 4
				this.pRepeatScrollTimer = RepeatActionTimer.new( ActionScrollPageDownRight.new( this ), \
					event.getSource(), event.getModifiers() )
				this.pRepeatScrollTimer.sendEvent()
			end
			
			this.captureMouse()
		end
	end
	
	/** Mouse button has been released. */
	public func void onButtonRelease( MouseEvent event )
		super.onButtonRelease( event )
		
		if event.getButton() == InputEventMouseButton.left
			this.stopRepeatScrollTimer()
			this.releaseMouse()
			this.pDragArea = 0
		end
	end
	
	
	
	/**
	 * \brief Get designer from gui theme.
	 * 
	 * Modified to ensure a DefaultScrollBarDesigner is used if
	 * super.getDesignerFromTheme() returns null.
	 */
	protected func WidgetDesigner getDesignerFromTheme()
		var WidgetDesigner designer = super.getDesignerFromTheme()
		if designer == null
			designer = DefaultScrollBarDesigner.new()
		end
		return designer
	end
	
	
	
	/** Helper positions. If not present yet they are calculated. */
	public func RectArea getHelperPositions()
		if this.pHelperPositions != null
			return this.pHelperPositions
		end
		
		if this.pWidgetKnob == null
			return RectArea.new()
		end
		
		// determine positions
		var int pageSize = DEMath.max( this.pModel.getPageSize(), 1 )
		var int range = this.pModel.getMaximum() - this.pModel.getMinimum()
		var int value = this.pModel.getValue() - this.pModel.getMinimum()
		var BorderSize borderSize = this.pWidgetKnob.getBorderSize()
		var int pos1, pos2, pos3, pos4
		
		if this.pOrientation == Orientation.horizontal
			pos1 = this.pWidgetFrame.getPadding().getLeft() + borderSize.getLeft()
			pos4 = this.pWidgetFrame.getPadding().getLeft() + this.pWidgetKnob.getParent().getContainerWidth() - borderSize.getRight()
			
		else
			pos1 = this.pWidgetFrame.getPadding().getTop() + borderSize.getTop()
			pos4 = this.pWidgetFrame.getPadding().getTop() + this.pWidgetKnob.getParent().getContainerHeight() - borderSize.getBottom()
		end
		
		var int knobSize = DEMath.max( pageSize * ( pos4 - pos1 ) / ( range + pageSize ), 7 )
		
		if range > 0
			pos2 = pos1 + value * ( pos4 - pos1 - knobSize ) / range
			pos3 = pos2 + knobSize
			
		else
			pos2 = pos1
			pos3 = DEMath.max( pos4, pos1 )
		end
		
		// save positions
		this.pHelperPositions = RectArea.new( pos1, pos2, pos3, pos4 )
		return this.pHelperPositions
	end
	
	/** Stop repeat scroll timer. */
	private func void stopRepeatScrollTimer()
		if this.pRepeatScrollTimer == null
			return
		end
		
		this.pRepeatScrollTimer.giveUp()
		this.pRepeatScrollTimer = null
	end
	
	
	
	/** \brief Remove all widgets. */
	public func void removeAllWidgets()
		super.removeAllWidgets()
		
		if this.pDisposeScrollButtonStateListeners != null
			this.pDisposeScrollButtonStateListeners.forEach( block ScrollButtonStateListener each
				each.dispose()
			end )
			this.pDisposeScrollButtonStateListeners.removeAll()
		end
	end
	
	
	
	/** \brief Hide scroll bar if set to be hidden if range is empty. */
	protected func void checkHiding()
		if this.pHideIfEmpty
			this.setVisible( this.pModel.getMaximum() > this.pModel.getMinimum() )
		end
	end
	
	/** Create content widgets. */
	public func void createContent()
		this.pHelperPositions = null
		
		if this.getGuiTheme() == null
			this.pButtonLeftUp = null
			this.pButtonRightDown = null
			this.removeAllWidgets()
			return
		end
		
		// wheel listener reused across widgets
		var MouseListener wheelListener = WheelActionMouseListener.new( \
			ActionScrollUpLeft.new( this ), ActionScrollDownRight.new( this ) )
		
		// remove all widgets
		this.pButtonLeftUp = null
		this.pButtonRightDown = null
		this.removeAllWidgets()
		
		// set layout to border layout
		this.setLayout( BorderLayout.new( 0 ) )
		
		// fix scrollbar size in the appropriate direction
		var ScrollBarDesigner designer = this.getDesigner() cast ScrollBarDesigner
		var int scrollBarSize = designer.scrollbarSize( this )
		
		if this.pOrientation == Orientation.horizontal
			this.setMinimumSize( Point.new( 0, scrollBarSize ) )
			
		else
			this.setMinimumSize( Point.new( scrollBarSize, 0 ) )
		end
		
		// add center panel hosting the knob
		this.pWidgetFrame = Panel.new()
		this.pWidgetFrame.setBackgroundCanvasCreator( designer.canvasCreatorFrame( this ) )
		this.pWidgetFrame.setLayout( FixedLayout.new() )
		this.pWidgetFrame.setPadding( BorderSize.new( designer.paddingKnobFrame( this ) ) )
		this.pWidgetFrame.setProtectPadding( true )
		this.addWidget( this.pWidgetFrame, BorderLayout.Area.content )
		
		// create left or up arrow button
		this.pButtonLeftUp = designer.createButtonLeftUp( this )
		this.pButtonLeftUp.setCanFocus( false )
		this.pButtonLeftUp.addMouseListener( wheelListener )
		var ScrollButtonStateListener scrollListener = \
			ScrollButtonStateListener.new( ActionScrollUpLeft.new( this ) )
		this.pDisposeScrollButtonStateListeners.add( scrollListener )
		this.pButtonLeftUp.addStateChangeListener( scrollListener )
		
		if this.pOrientation == Orientation.horizontal
			this.addWidget( this.pButtonLeftUp, BorderLayout.Area.left )
			
		else
			this.addWidget( this.pButtonLeftUp, BorderLayout.Area.top )
		end
		
		// create right or down arrow button
		this.pButtonRightDown = designer.createButtonRightDown( this )
		this.pButtonRightDown.setCanFocus( false )
		this.pButtonRightDown.addMouseListener( wheelListener )
		scrollListener = ScrollButtonStateListener.new( ActionScrollDownRight.new( this ) )
		this.pDisposeScrollButtonStateListeners.add( scrollListener )
		this.pButtonRightDown.addStateChangeListener( scrollListener )
		
		if this.pOrientation == Orientation.horizontal
			this.addWidget( this.pButtonRightDown, BorderLayout.Area.right )
			
		else
			this.addWidget( this.pButtonRightDown, BorderLayout.Area.bottom )
		end
		
		// create knob widget
		this.pWidgetKnob = designer.createKnob( this )
		this.pWidgetKnob.setCanFocus( false )
		this.pWidgetKnob.addMouseListener( DragKnobMouseListener.new( this ) )
		this.pWidgetKnob.addMouseListener( wheelListener )
		this.pWidgetFrame.addWidget( this.pWidgetKnob )
		
		if this.pOrientation == Orientation.horizontal
			this.pWidgetKnob.setY( this.pWidgetFrame.getPadding().getTop() + this.pWidgetKnob.getBorderSize().getTop() )
			
		else
			this.pWidgetKnob.setX( this.pWidgetFrame.getPadding().getLeft() + this.pWidgetKnob.getBorderSize().getLeft() )
		end
	end
	
	/** Update knob widget geometry. */
	public func void updateKnobWidget()
		this.pHelperPositions = null
		
		if this.pWidgetKnob == null
			return
		end
		
		var RectArea helperPositions = this.getHelperPositions()
		var int width, height
		
		if this.pOrientation == Orientation.horizontal
			this.pWidgetKnob.setX( helperPositions.getY1() )
			width = helperPositions.getX2() - helperPositions.getY1()
			height = this.pWidgetFrame.getContainerHeight() - this.pWidgetKnob.getBorderSize().getHeight()
			
		else
			this.pWidgetKnob.setY( helperPositions.getY1() )
			width = this.pWidgetFrame.getContainerWidth() - this.pWidgetKnob.getBorderSize().getWidth()
			height = helperPositions.getX2() - helperPositions.getY1()
		end
		
		this.pWidgetKnob.setSize( Point.new( width, height ) )
	end
	
	/** Enable direction buttons depending on the model value. */
	public func void enableDirectionButtons()
		if this.pButtonLeftUp != null
			this.pButtonLeftUp.setEnabled( this.pModel.getValue() > this.pModel.getMinimum() )
		end
		if this.pButtonRightDown != null
			this.pButtonRightDown.setEnabled( this.pModel.getValue() < this.pModel.getMaximum() )
		end
	end
end
