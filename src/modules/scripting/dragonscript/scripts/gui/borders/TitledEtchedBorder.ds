/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
 
namespace Dragengine.Gui.Borders

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * Draws an etched border around a widget with a given color and thickness.
 */
class TitledEtchedBorder extends TitledTwoColorBorder
	/** Creates a new raised etched border. */
	public func new()
	end
	
	/** Creates a new raised etched border. */
	public func new( String text ) super( text )
	end
	
	
	
	/** Border size. */
	public func BorderSize getBorderSize()
		return BorderSize.new( 2, this.getTextSize().getY(), 2, 2 )
	end
	
	/** Update canvas. */
	public func void updateCanvas()
		var Widget widget = this.getWidget()
		if widget == null
			return
		end
		
		var Color fontColor = this.getFontColor()
		var Font font = this.getFont()
		var String text = this.getText()
		var Point textSize = this.getTextSize()
		
		var CanvasView borderCanvas = this.getCanvasView()
		var Point size = borderCanvas.getSize()
		var int bottom = size.getY() - 1
		var int right = size.getX() - 1
		var Color color1, color2
		
		var int textX1 = 8
		var int textX2 = textX1 + textSize.getX() + 4
		var int borderTop = 0
		
		if font != null
			borderTop = ( font.getSize() - 2 ) / 2
		end
		
		if this.getRaised()
			color1 = this.getColorHilight()
			color2 = this.getColorShadow()
			
		else
			color1 = this.getColorShadow()
			color2 = this.getColorHilight()
		end
		
		borderCanvas.removeAllCanvas()
		
		// color 1 if existing
		if color1 != null
			var CanvasPaint canvas = CanvasPaint.new()
			canvas.setShapeType( CanvasPaintShape.lines )
			canvas.setLineColor( color1 )
			canvas.setFillColor( Color.transparent )
			canvas.setSize( size )
			canvas.setOrder( 0.0 )
			
			canvas.addPoint( Point.new( 1, borderTop + 1 ) )
			canvas.addPoint( Point.new( textX1, borderTop + 1 ) )
			
			canvas.addPoint( Point.new( textX2, borderTop + 1 ) )
			canvas.addPoint( Point.new( right - 1, borderTop + 1 ) )
			
			canvas.addPoint( Point.new( 1, borderTop + 2 ) )
			canvas.addPoint( Point.new( 1, bottom - 1 ) )
			
			canvas.addPoint( Point.new( right, borderTop ) )
			canvas.addPoint( Point.new( right, bottom + 1 ) )
			
			canvas.addPoint( Point.new( 0, bottom ) )
			canvas.addPoint( Point.new( right, bottom ) )
			
			borderCanvas.addCanvas( canvas )
		end
		
		// color 2 if existing
		if color2 != null
			var CanvasPaint canvas = CanvasPaint.new()
			canvas.setShapeType( CanvasPaintShape.lines )
			canvas.setLineColor( color2 )
			canvas.setFillColor( Color.transparent )
			canvas.setSize( size )
			canvas.setOrder( 1.0 )
			
			canvas.addPoint( Point.new( 0, borderTop ) )
			canvas.addPoint( Point.new( textX1, borderTop ) )
			
			canvas.addPoint( Point.new( textX2, borderTop ) )
			canvas.addPoint( Point.new( right - 1, borderTop ) )
			
			canvas.addPoint( Point.new( 0, borderTop ) )
			canvas.addPoint( Point.new( 0, bottom - 1 ) )
			
			canvas.addPoint( Point.new( 0, bottom - 1 ) )
			canvas.addPoint( Point.new( right, bottom - 1 ) )
			
			canvas.addPoint( Point.new( right - 1, borderTop ) )
			canvas.addPoint( Point.new( right - 1, bottom ) )
			
			borderCanvas.addCanvas( canvas )
		end
		
		// text if existing
		if not text.empty() and font != null and fontColor != null
			var CanvasText canvas = CanvasText.new()
			canvas.setColor( fontColor )
			canvas.setFont( font )
			canvas.setText( text )
			canvas.setPosition( Point.new( textX1 + 2, 0 ) )
			canvas.setSize( textSize )
			canvas.setOrder( 2.0 )
			borderCanvas.addCanvas( canvas )
		end
	end
end
