/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
 
namespace Dragengine.Gui.Borders


/**
 * Base class for titled borders drawn using a hilight and a shadow color which
 * can be raised or lowered.
 */
class TitledTwoColorBorder extends TwoColorBorder
	/** Text. */
	private var String pText
	
	
	
	/** Creates a new titled border. */
	public func new()
		this.pText = ""
	end
	
	/** Creates a new titled border. */
	public func new( String text )
		if text == null
			throw EInvalidParam.new()
		end
		
		this.pText = text
	end
	
	
	
	/** Retrieves the text. */
	public func String getText()
		return this.pText
	end
	
	/** Sets the text. */
	public func void setText( String text )
		if text.equals( this.pText )
			return
		end
		
		this.pText = text
		
		this.layoutContainer()
		this.updateCanvas()
	end
	
	
	
	/** Font. */
	public func Font getFont()
		var Widget widget = this.getWidget()
		
		if widget != null
			return widget.getFont()
			
		else
			return null
		end
	end
	
	/** Font color. */
	public func Color getFontColor()
		var Widget widget = this.getWidget()
		
		if widget != null
			return widget.getTextColor()
			
		else
			return null
		end
	end
	
	/** Text size. */
	public func Point getTextSize()
		var Font font = this.getFont()
		
		if font != null
			return font.getTextSize( this.pText )
			
		else
			return Point.new()
		end
	end
end
