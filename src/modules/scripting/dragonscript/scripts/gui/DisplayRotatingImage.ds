/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * \brief Display rotating image in widget.
 * 
 * Display an image rotatable around a custom rotation center relative to the image.
 * The default rotation center is at (0.5,0.5) rotating the image about the exact
 * center of the widget.
 * 
 * Rotating images are useful to create various kinds of gauge displays in a simple way.
 * Once created adjust the rotation value to display the appropriate amount.
 * 
 * An optional offset can be set shifting the image relative to the center. A positive
 * X coordinate shift value moves the image to the right of the center. Likewise a
 * positive Y coordinate shift value moves the image upwards.
 */
class DisplayRotatingImage extends DisplayImage
	private var float pRotation
	private var Vector2 pRotationCenter
	private var Vector2 pImageOffset
	private var float pScale
	
	
	/** \brief Create display rotating image widget. */
	public func new() this( null, RepeatMode.once )
	end
	
	public func new( Image image ) this( image, RepeatMode.once )
	end
	
	public func new( Image image, RepeatMode repeatMode ) super( image, repeatMode )
		this.pRotation = 0
		this.pRotationCenter = Vector2.new( 0.5, 0.5 )
		this.pImageOffset = Vector2.new()
		this.pScale = 1
	end
	
	public func new( Image image, String designerSelector ) this( image )
		this.setDesignerSelector( designerSelector )
	end
	
	
	
	/** \brief Rotation angle in degrees. */
	public func float getRotation()
		return this.pRotation
	end
	
	/** \brief Set rotation angle in degrees. */
	public func void setRotation( float rotation )
		if DEMath.fabs( rotation - this.pRotation ) < 0.0001
			return
		end
		
		this.pRotation = rotation
		
		this.updateCanvasImage()
	end
	
	/** \brief Rotation center relative to widget size. */
	public func Vector2 getRotationCenter()
		return this.pRotationCenter
	end
	
	/** \brief Set rotation center relative to widget size. */
	public func void setRotationCenter( Vector2 center )
		if center.equals( this.pRotationCenter )
			return
		end
		
		this.pRotationCenter = center
		
		this.updateCanvasImage()
	end
	
	/** \brief Offset relative to full image size relative to rotation center. */
	public func Vector2 getImageOffset()
		return this.pImageOffset
	end
	
	/** \brief Set offset relative to full image size relative to rotation center. */
	public func void setImageOffset( Vector2 offset )
		if offset.equals( this.pImageOffset )
			return
		end
		
		this.pImageOffset = offset
		
		this.updateCanvasImage()
	end
	
	/** \brief Scale of image. */
	public func float getScale()
		return this.pScale
	end
	
	/** \brief Set scale of image. */
	public func void setScale( float scale )
		if DEMath.fabs( scale - this.pScale ) < 0.0001
			return
		end
		
		this.pScale = scale
		
		this.updateCanvasImage()
	end
	
	
	
	/** \brief Update canvas image. */
	public func void updateCanvasImage()
		super.updateCanvasImage()
		
		if this.getImage() == null or this.pRotationCenter == null
			// pRotationCenter is null during construction time
			return
		end
		
		var Point contentSize = this.getCanvasContent().getSize()
		var Point center = Vector2.new( \
			this.pRotationCenter.getX() * contentSize.getX(), \
			this.pRotationCenter.getY() * contentSize.getY() ).round()
		var CanvasImage canvasImage = this.getCanvasImage()
		var Point imageSize = canvasImage.getSize()
		var Point offset = Vector2.new( \
			this.pImageOffset.getX() * imageSize.getX(), \
			this.pImageOffset.getY() * imageSize.getY() ).round()
		
		canvasImage.setPosition( center - imageSize / 2 + offset )
		
		// tc-offset: -(size/2) + size*offset
		var Vector2 shift = Vector2.new( \
			imageSize.getX() * ( this.pImageOffset.getX() - 0.5 ), \
			imageSize.getY() * ( this.pImageOffset.getY() - 0.5 ) )
		
		canvasImage.setTransform( \
			TexMatrix2.newTranslation( shift ) \
			* TexMatrix2.newScaling( this.pScale, this.pScale ) \
			* TexMatrix2.newRotation( this.pRotation ) \
			* TexMatrix2.newTranslation( -shift ) )
	end
end
