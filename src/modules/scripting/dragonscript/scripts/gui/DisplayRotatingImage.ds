/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * \brief Display rotating image in widget.
 * 
 * Display an image rotatable around a custom rotation center relative to
 * the image. The default rotation center is at (0.5,0.5) rotating the
 * image about the exact center of the widget.
 * 
 * Rotating images are useful to create various kinds of gauge displays
 * in a simple way. Once created adjust the rotation value to display
 * the appropriate amount.
 */
class DisplayRotatingImage extends Widget
	private var CanvasImage pCanvasImage
	private var float pRotation
	private var Vector2 pRotationCenter
	private var Vector2 pImageOffset
	private var float pScale
	private var Image pImage
	
	
	/** \brief Create display rotating image widget. */
	public func new() this( null )
	end
	
	/** \brief Create display rotating image widget. */
	public func new( Image image )
		this.pImage = image
		this.pRotation = 0
		this.pRotationCenter = Vector2.new( 0.5, 0.5 )
		this.pImageOffset = Vector2.new()
		this.pScale = 1
		
		this.pCanvasImage = CanvasImage.new()
		this.getCanvasContent().addCanvas( this.pCanvasImage )
		
		this.setImage( image )
	end
	
	
	
	/** \brief Image to display or \em null if not set. */
	public func Image getImage()
		return this.pImage
	end
	
	/** \brief Set image to display or \em null if not set. */
	public func void setImage( Image image )
		if this.pImage == image
			return
		end
		
		this.pImage = image
		this.pCanvasImage.setImage( image )
		
		this.layoutParent()
		this.resizeCanvasImage()
		this.updateCanvasImage()
	end
	
	/** \brief Rotation angle in degrees. */
	public func float getRotation()
		return this.pRotation
	end
	
	/** \brief Set rotation angle in degrees. */
	public func void setRotation( float rotation )
		if DEMath.fabs( rotation - this.pRotation ) < 0.0001
			return
		end
		
		this.pRotation = rotation
		
		this.updateCanvasImage()
	end
	
	/** \brief Rotation center relative to widget size. */
	public func Vector2 getRotationCenter()
		return this.pRotationCenter
	end
	
	/** \brief Set rotation center relative to widget size. */
	public func void setRotationCenter( Vector2 center )
		if center.equals( this.pRotationCenter )
			return
		end
		
		this.pRotationCenter = center
		
		this.updateCanvasImage()
	end
	
	/** \brief Offset in pixels of image relative to rotation center. */
	public func Vector2 getImageOffset()
		return this.pImageOffset
	end
	
	/** \brief Set offset in pixels of image relative to rotation center. */
	public func void setImageOffset( Vector2 offset )
		if offset.equals( this.pImageOffset )
			return
		end
		
		this.pImageOffset = offset
		
		this.updateCanvasImage()
	end
	
	/** \brief Scale of image. */
	public func float getScale()
		return this.pScale
	end
	
	/** \brief Set scale of image. */
	public func void setScale( float scale )
		if DEMath.fabs( scale - this.pScale ) < 0.0001
			return
		end
		
		this.pScale = scale
		
		this.resizeCanvasImage()
		this.updateCanvasImage()
	end
	
	
	
	/** \brief Minimal size of widget. */
	public func Point getMinimumSize()
		if this.isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		if this.pImage == null
			return super.getMinimumSize()
		end
		
		return this.pImage.getSize()
	end
	
	
	
	/**
	 * \brief State changed.
	 * \details Sends event to listeners.
	 */
	public func void onStateChanged( StateChangeEvent event )
		super.onStateChanged( event )
		this.updateCanvasImage()
	end
	
	
	
	/** \brief Update canvas image. */
	public func void updateCanvasImage()
		if this.pImage == null
			return
		end
		
		var Vector2 contentSize = Vector2.new( this.getCanvasContent().getSize() )
		var Vector2 imageSize = Vector2.new( this.pImage.getSize() )
		var float centerX = this.pRotationCenter.getX() * contentSize.getX()
		var float centerY = this.pRotationCenter.getY() * contentSize.getY()
		this.pCanvasImage.setTransform( \
			TexMatrix2.newTranslation( imageSize * -0.5 - Vector2.new( this.pImageOffset ) ) \
			* TexMatrix2.newScaling( this.pScale, this.pScale ) \
			* TexMatrix2.newRotation( this.pRotation ) \
			* TexMatrix2.newTranslation( centerX, centerY ) )
		
		if this.getEnabled()
			this.pCanvasImage.setColorTransform( ColorMatrix.new() )
			
		else
			this.pCanvasImage.setColorTransform( ColorMatrix.newSaturation( 0 ) * \
				ColorMatrix.newContrast( 0.5 ) * ColorMatrix.newBrightness( 0.25 ) )
		end
	end
	
	/** \brief Resize canvas image. */
	public func void resizeCanvasImage()
		if this.pImage != null
			this.pCanvasImage.setSize( this.pImage.getSize() )
		end
	end
	
	
	
	/** \brief Size changed. */
	public func void onResize( WidgetEvent event )
		super.onResize( event )
		this.updateCanvasImage()
	end
end
