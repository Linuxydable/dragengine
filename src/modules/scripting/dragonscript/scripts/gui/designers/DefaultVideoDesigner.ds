/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Borders.Factories
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner for DisplayVideo.
 */
class DefaultVideoDesigner extends DefaultWidgetDesigner
	/** \brief Design for a particular widget state. */
	public class VideoStateDesign extends StateDesign
		private var ColorMatrix pVideoColorTransform
		
		
		
		/** \brief Create state design. */
		public func new()
		end
		
		/** \brief Create copy of state design. */
		public func new( VideoStateDesign stateDesign ) super( stateDesign )
			this.pVideoColorTransform = stateDesign.pVideoColorTransform
		end
		
		
		
		/** \brief Video color transform or null. */
		public func ColorMatrix getVideoColorTransform()
			return this.pVideoColorTransform
		end
		
		/** \brief Set video color transform or null. */
		public func void setVideoColorTransform( ColorMatrix colorMatrix )
			this.pVideoColorTransform = colorMatrix
		end
		
		
		
		/**
		 * \brief Set parameter.
		 * 
		 * Supported parameters:
		 * | name | value | Setter |
		 * | videoColorTransform | ColorMatrix | setVideoColorTransform |
		 */
		public func void setParameter( String name, Object value )
			if name.equals( "videoColorTransform" )
				this.setVideoColorTransform( value cast ColorMatrix )
				
			else
				super.setParameter( name, value )
			end
		end
		
		
		
		/** \brief Create copy of state. */
		public func DefaultWidgetDesigner.StateDesign copyDesign()
			return VideoStateDesign.new( this )
		end
		
		/**
		 * \brief Merge states.
		 * 
		 * Updates state with parameters of this state if defined. Used to find the first
		 * defined parameter for a series of states acting as fallback for each other.
		 */
		public func void merge( DefaultWidgetDesigner.StateDesign state )
			super.merge( state )
			
			var VideoStateDesign vdesign = state cast VideoStateDesign
			
			if this.pVideoColorTransform != null
				vdesign.pVideoColorTransform = this.pVideoColorTransform
			end
		end
		
		/**
		 * \brief Apply state design to widget.
		 * 
		 * This is typically called on a merged design to find the first defined parameters.
		 */
		public func void apply( Widget widget )
			super.apply( widget )
			
			var DisplayVideo displayVideo = widget cast DisplayVideo
			if not displayVideo.getProtectVideoColorTransform()
				if this.pVideoColorTransform != null
					displayVideo.setVideoColorTransform( this.pVideoColorTransform )
					
				else
					displayVideo.setVideoColorTransform( ColorMatrix.new() )
				end
			end
		end
	end
	
	
	
	/** \brief Create new video designer. */
	public func new()
		this.setDesignNormal( VideoStateDesign.new() )
		this.setDesignDisabled( VideoStateDesign.new() )
		this.setDesignFocused( VideoStateDesign.new() )
		this.setDesignHover( VideoStateDesign.new() )
		this.setDesignFocusedHover( VideoStateDesign.new() )
	end
	
	/** \brief Create copy of widget designer designer. */
	public func new( DefaultVideoDesigner designer ) super( designer )
	end
	
	
	
	/** \brief Design for normal state. */
	public func VideoStateDesign getVideoDesignNormal()
		return this.getDesignNormal() cast VideoStateDesign
	end
	
	/** \brief Design for disabled state. */
	public func VideoStateDesign getVideoDesignDisabled()
		return this.getDesignDisabled() cast VideoStateDesign
	end
	
	/** \brief Design for focused state. */
	public func VideoStateDesign getVideoDesignFocused()
		return this.getDesignFocused() cast VideoStateDesign
	end
	
	/** \brief Design for hover state. */
	public func VideoStateDesign getVideoDesignHover()
		return this.getDesignHover() cast VideoStateDesign
	end
	
	/** \brief Design for focused hover state. */
	public func VideoStateDesign getVideoDesignFocusedHover()
		return this.getDesignFocusedHover() cast VideoStateDesign
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * See DefaultWidgetDesigner.setParameter for supported parameters.
	 * 
	 * Additional supported parameters:
	 * | name | value | Setter |
	 * | {state}.videoColorTransform | ColorMatrix | getDesign{state}.setVideoColorTransform |
	 */
	public func void setParameter( String name, Object value )
		super.setParameter( name, value )
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultVideoDesigner.new( this )
	end
end
