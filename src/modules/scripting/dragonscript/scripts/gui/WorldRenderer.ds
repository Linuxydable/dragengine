/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Scenery



/**
 * \brief Widget rendering world using camera.
 */
class WorldRenderer extends Widget
	/** \brief Render world canvas. */
	private var CanvasRenderWorld pCanvasRenderWorld
	
	/** \brief Minimum renderer size or null if not set. */
	private var Point pRenderMinimumSize
	
	
	
	/** \brief Create world renderer. */
	public func new()
		this.pCanvasRenderWorld = CanvasRenderWorld.new()
		this.getCanvasContent().addCanvas( this.pCanvasRenderWorld )
	end
	
	/** \brief Create world renderer. */
	public func new( int x, int y, int width, int height ) super( x, y, width, height ) 
		this.pRenderMinimumSize = Point.new( width, height )
		
		this.pCanvasRenderWorld = CanvasRenderWorld.new()
		this.getCanvasContent().addCanvas( this.pCanvasRenderWorld )
		
		this.updateCanvasRenderWorld()
	end
	
	
	
	/** \brief Camera. */
	public func Camera getCamera()
		return this.pCanvasRenderWorld.getCamera()
	end
	
	/** \brief Set camera. */
	public func void setCamera( Camera camera )
		this.pCanvasRenderWorld.setCamera( camera )
	end
	
	/** \brief Minimum renderer size or null if not set. */
	public func Point getRenderMinimumSize()
		return this.pRenderMinimumSize
	end
	
	/** \brief Set minimum renderer size or null if not set. */
	public func void setRenderMinimumSize( Point size )
		if size == null
			if this.pRenderMinimumSize == null
				return
			end
			this.pRenderMinimumSize = size
			
		else
			if size.equals( this.pRenderMinimumSize )
				return
			end
			this.pRenderMinimumSize = Point.new().largest( size )
		end
		
		this.layoutParent()
	end
	
	
	
	/** \brief Project point from 3d world. */
	public func Point project( DVector position )
		return this.pCanvasRenderWorld.project( position )
	end
	
	/** \brief Back project position into 3d world. */
	public func Vector backProject( Point position )
		return this.pCanvasRenderWorld.backProject( position )
	end
	
	
	
	/** \brief Minimal size of widget. */
	public func Point getMinimumSize()
		if this.isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		if this.pRenderMinimumSize != null
			return this.getPadding().getSize() + this.pRenderMinimumSize
			
		else
			return super.getMinimumSize()
		end
	end
	
	
	
	/** \brief State changed. */
	public func void onStateChanged( StateChangeEvent event )
		super.onStateChanged( event )
		this.updateCanvasRenderWorld()
	end
	
	/** \brief Padding changed. */
	public func void onPaddingChanged()
		this.updateCanvasRenderWorld()
	end
	
	/** \brief Size changed. */
	public func void onResize( WidgetEvent event )
		super.onResize( event )
		this.updateCanvasRenderWorld()
	end
	
	
	
	/** \brief Update canvas render world. */
	protected func void updateCanvasRenderWorld()
		var BorderSize padding = this.getPadding()
		this.pCanvasRenderWorld.setPosition( Point.new( padding.getLeft(), padding.getTop() ) )
		this.pCanvasRenderWorld.setSize( Point.new().largest( this.getSize() - padding.getSize() ) )
	end
end
