/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Display small view of a widget larger than the viewport.
 * 
 * Typical use is like this:
 * <code>ScrollPanel.new(Viewport.new(widget)).</code>
 * 
 * This shows scroll bars if widget is larger than the viewport and aligns
 * it to the left and top side. For different alignment set a layout.
 * The layout is only overwritten vertically or horizontally if the
 * widget is larger than the viewport. For example to center the widget
 * if smaller than the viewport use
 * <code>viewport.setLayout(CentrizedBoxLayout.new(LayoutAxis.y))</code>
 * 
 * Another typical situation is to stretch the widget to the viewport if
 * smaller. This can be done like this:
 * <code>viewport.setLayout(BoxLayout.new(LayoutAxis.y))</code>
 * 
 * The default layout is FixedMinimalLayout. Other layouts are possible.
 */
class Viewport extends Panel implements RangeModelListener
	/** \brief Vertical range model */
	private var DefaultRangeModel pVertRangeModel
	
	/** \brief Horizontal range model */
	private var DefaultRangeModel pHorzRangeModel
	
	
	
	/** \brief Create viewport center aligning content widget. */
	public func new() this( null )
	end
	
	/** \brief Create viewport with content widget. */
	public func new( Widget content ) this( content, FixedMinimalLayout.new() )
	end
	
	/** \brief Create viewport with content widget and layout. */
	public func new( Widget content, Layout layout )
		this.pVertRangeModel = DefaultRangeModel.new( 0, 0, 100, 0, 20 )
		this.pVertRangeModel.addListener( this )
		this.pHorzRangeModel = DefaultRangeModel.new( 0, 0, 100, 0, 20 )
		this.pHorzRangeModel.addListener( this )
		
		this.runWhileBlockingLayout( block
			this.setLayout( layout )
			
			this.setProtectMinimumSize( true )
			this.setMinimumSize( Point.new( 5, 5 ) )
			
			this.setContent( content )
		end )
	end
	
	/** \brief Dispose of this widget. */
	public func void dispose()
		if this.pHorzRangeModel != null
			this.pHorzRangeModel.removeListener( this )
		end
		if this.pVertRangeModel != null
			this.pVertRangeModel.removeListener( this )
		end
		
		super.dispose()
		
		this.pHorzRangeModel = null
		this.pVertRangeModel = null
	end
	
	
	
	/** \brief Content widget or \em null if not existing. */
	public func Widget getContent()
		if this.getWidgetCount() == 1
			return this.getWidget( 0 )
		end
		
		return null
	end
	
	/** \brief Set content widget or \em null to remove it. */
	public func void setContent( Widget content )
		var Widget curWidget = this.getContent()
		if curWidget == content
			return
		end
		
		if curWidget != null
			this.removeWidget( curWidget )
			curWidget.dispose()
		end
		
		if content != null
			this.addWidget( content )
		end
	end
	
	
	
	/** \brief Range properties changed. */
	public func void rangeChanged( RangeModel rangeModel )
	end
	
	/** \brief Value changed. */
	public func void valueChanged( RangeModel rangeModel )
		if rangeModel == this.pVertRangeModel
			this.updateContentPositionY()
			
		else
			this.updateContentPositionX()
		end
	end
	
	
	
	/**
	 * \brief Vertical range model for viewports to synchronize the vertical scrollbar.
	 * \details If this widget has no reasonable vertical range model it should return \em null.
	 */
	public func RangeModel getVerticalRangeModel()
		return this.pVertRangeModel
	end
	
	/**
	 * \brief Horizontal range model for viewports to synchronize the horizontal scrollbar.
	 * \details If this widget has no reasonable horizontal range model it should return \em null.
	 */
	public func RangeModel getHorizontalRangeModel()
		return this.pHorzRangeModel
	end
	
	
	
	/**
	 * \brief Update content X position.
	 * \details Adjusts the position only if larger than the viewport size.
	 *          Otherwise the layout position is kept.
	 */
	public func void updateContentPositionX()
		var Widget content = this.getContent()
		if content == null
			return
		end
		
		if this.pHorzRangeModel.getMaximum() == 0
			return
		end
		
		content.setX( this.getPadding().getLeft() - this.pHorzRangeModel.getValue() )
	end
	
	/**
	 * \brief Update content Y position.
	 * \details Adjusts the position only if larger than the viewport size.
	 *          Otherwise the layout position is kept.
	 */
	public func void updateContentPositionY()
		var Widget content = this.getContent()
		if content == null
			return
		end
		
		if this.pVertRangeModel.getMaximum() == 0
			return
		end
		
		content.setY( this.getPadding().getTop() - this.pVertRangeModel.getValue() )
	end
	
	
	
	/**
	 * \brief Lay out widgets using the set layout.
	 * 
	 * This call is protected against loops caused by layoutParent called from inside a widget
	 * being laid out. Furthermore changes to the minimum, preferred and maximum size are
	 * tracked to call layoutParent() only if required.
	 */
	public func void doLayout()
		if this.getBlockLayout()
			return
		end
		
		var Widget content = this.getContent()
		if content == null
			this.pHorzRangeModel.setMaximum( 0 )
			this.pVertRangeModel.setMaximum( 0 )
			return
		end
		
		// for layouts like FixedMinimalLayout not setting position
		content.setPosition( Point.new( this.getPadding().getLeft(), this.getPadding().getTop() ) )
		
		super.doLayout()
		
		var Point containerSize = this.getContainerSize()
		
		this.pHorzRangeModel.setMaximum( DEMath.max( content.getWidth() - containerSize.getX(), 0 ) )
		this.pHorzRangeModel.setPageSize( containerSize.getX() * 2 / 3 )
		this.updateContentPositionX()
		
		this.pVertRangeModel.setMaximum( DEMath.max( content.getHeight() - containerSize.getY(), 0 ) )
		this.pVertRangeModel.setPageSize( containerSize.getY() * 2 / 3 )
		this.updateContentPositionY()
	end
end
