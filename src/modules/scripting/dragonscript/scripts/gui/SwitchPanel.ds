/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Panel switching between widgets using a range model.
 * 
 * Widgets are resized to fill the entire panel with only the active
 * Widget set visible. Switching is provided using a RangeModel.
 */
class SwitchPanel extends Panel implements RangeModelListener
	/** \brief Switch panel action listener. */
	public class SwitchAction implements ActionListener
		private var SwitchPanel pSwitchPanel
		private var int pIndex
		
		/** \brief Create listener. */
		public func new( SwitchPanel switchPanel, int index )
			this.pSwitchPanel = switchPanel
			this.pIndex = index
		end
		
		/** \brief Switch panel. */
		public func SwitchPanel getSwitchPanel()
			return this.pSwitchPanel
		end
		
		/** \brief Index of panel to switch to. */
		public func int getIndex()
			return this.pIndex
		end
		
		/** \brief Set index of panel to switch to. */
		public func void setIndex( int index )
			this.pIndex = index
		end
		
		/** \brief Run action. */
		public func void onAction( ActionEvent event )
			this.pSwitchPanel.getModel().setValue( this.pIndex )
		end
	end
	
	/** \brief Switch panel listener useful for ToggleButtonGroup. */
	public class SwitchToggleGroup extends DefaultListModelListener
		private var SwitchPanel pSwitchPanel
		
		/** \brief Create listener. */
		public func new( SwitchPanel switchPanel )
			this.pSwitchPanel = switchPanel
		end
		
		/** \brief Switch panel. */
		public func SwitchPanel getSwitchPanel()
			return this.pSwitchPanel
		end
		
		/** \brief Selection in the model changed. */
		public func void selectionChanged( ListModel listModel )
			this.pSwitchPanel.getModel().setValue( listModel.getSelected() )
		end
	end
	
	
	
	private var RangeModel pModel
	
	
	
	/**
	 * \brief Create switch panel.
	 */
	public func new() this( DefaultRangeModel.new() )
	end
	
	/**
	 * \brief Create switch panel.
	 */
	public func new( RangeModel model ) super( TabLayout.new() )
		this.setModel( model )
	end
	
	/**
	 * \brief Create switch panel.
	 * 
	 * Block receives panel as argument. Block call is wrapped inside runWhileBlockingLayout()
	 * for efficiency. doLayout() will be called after leaving the block.
	 */
	public func new( Block blockAddContent ) this( DefaultRangeModel.new(), blockAddContent )
	end
	
	/**
	 * \brief Create switch panel.
	 * 
	 * Block receives panel as argument. Block call is wrapped inside runWhileBlockingLayout()
	 * for efficiency. doLayout() will be called after leaving the block.
	 */
	public func new( RangeModel model, Block blockAddContent ) super( TabLayout.new(), blockAddContent )
		this.setModel( model )
	end
	
	/** Dispose of the widget. */
	public func void dispose()
		if this.pModel != null
			this.pModel.removeListener( this )
			this.pModel = null
		end
		
		super.dispose()
	end
	
	
	
	/** \brief Selection model. */
	public func RangeModel getModel()
		return this.pModel
	end
	
	/** \brief Set selection model. */
	public func void setModel( RangeModel model )
		if model == null
			throw EInvalidParam.new()
		end
		
		if model == this.pModel
			return
		end
		
		if this.pModel != null
			this.pModel.removeListener( this )
		end
		
		this.pModel = model
		
		model.setAll( 0, this.getWidgetCount() - 1, 1, 0, 1 )
		model.addListener( this )
	end
	
	
	
	/** \brief Add widget to container using default settings. */
	public func void addWidget( Widget widget )
		super.addWidget( widget )
		
		if this.pModel != null
			this.pModel.setMaximum( this.getWidgetCount() - 1 )
		end
	end
	
	/** \brief Add widget to container using the specified settings. */
	public func void addWidget( Widget widget, Object settings )
		super.addWidget( widget, settings )
		
		if this.pModel != null
			this.pModel.setMaximum( this.getWidgetCount() - 1 )
		end
	end
	
	/** \brief Remove widget from container. */
	public func void removeWidget( Widget widget )
		super.removeWidget( widget )
		
		if this.pModel != null
			this.pModel.setMaximum( this.getWidgetCount() - 1 )
		end
	end
	
	/** \brief Remove all widgets from container. */
	public func void removeAllWidgets()
		super.removeAllWidgets()
		
		if this.pModel != null
			this.pModel.setMaximum( 0 )
		end
	end
	
	
	
	/** \brief Update selected tab. */
	public func void updateSelectedTab()
		( this.getLayout() cast TabLayout ).selectTab( this, this.pModel.getValue() )
	end
	
	
	
	/** \brief Minimum, maximum or page size changed. */
	public func void rangeChanged( RangeModel rangeModel )
	end
	
	/** \brief Value changed. */
	public func void valueChanged( RangeModel rangeModel )
		this.updateSelectedTab()
	end
end
