/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief State machine state.
 * 
 * States contain a list of actions to do while entering or existing the state and a list
 * of transitions triggered by events.
 * 
 * States are assigned a unique identifier. Strings are used instead of a number to make the
 * state machine more portable across changing save state revisions.
 * 
 * Each state can have multiple transitions matching the same event by using conditions.
 * The first transition matching the send event with fulfilled condition is selected.
 * If no transition matches the event raises an exception.
 * 
 * Action can have optional condition running them only if the condition evaluates to true.
 */
class SMState
	/** \brief Unique state identifier or \em null. */
	private var String pID
	
	/** \brief Enter actions as Array of SMStateAction. */
	private var Array pEnterActions
	
	/** \brief Exit actions as Array of SMStateAction. */
	private var Array pExitActions
	
	/** \brief Transitions as Array of SMTransition. */
	private var Array pTransitions
	
	
	
	/**
	 * \brief Create state machine state.
	 * \param id Identifier or \em null.
	 * \throws EInvalidParam \em id is empty string.
	 */
	public func new( String id )
		if id != null and id.empty()
			throw EInvalidParam.new()
		end
		
		this.pID = id
		this.pEnterActions = Array.new()
		this.pExitActions = Array.new()
		this.pTransitions = Array.new()
	end
	
	
	
	/** \brief Unique state identifier or \em null. */
	public func String getID()
		return this.pID
	end
	
	
	
	/** \brief Count of enter actions. */
	public func int getEnterActionCount()
		return this.pEnterActions.getCount()
	end
	
	/** \brief Get enter action at index. */
	public func SMStateAction getEnterActionAt( int index )
		return this.pEnterActions.getAt( index ) cast SMStateAction
	end
	
	/** \brief Index of enter action or -1 if absent. */
	public func int indexOfEnterAction( SMStateAction action )
		return this.pEnterActions.indexOf( action )
	end
	
	/** \brief Add enter action. */
	public func void addEnterAction( SMStateAction action )
		if action == null
			throw EInvalidParam.new()
		end
		this.pEnterActions.add( action )
	end
	
	/** \brief Visit enter actions with block with parameter SMStateAction. */
	public func void forEachEnterAction( Block ablock )
		this.pEnterActions.forEach( ablock )
	end
	
	/** \brief Find enter action with block with parameter SMStateAction. */
	public func SMStateAction findEnterAction( Block ablock )
		return this.pEnterActions.find( ablock ) cast SMStateAction
	end
	
	
	
	/** \brief Count of exit actions. */
	public func int getExitActionCount()
		return this.pExitActions.getCount()
	end
	
	/** \brief Get exit action at index. */
	public func SMStateAction getExitActionAt( int index )
		return this.pExitActions.getAt( index ) cast SMStateAction
	end
	
	/** \brief Index of exit action or -1 if absent. */
	public func int indexOfExitAction( SMStateAction action )
		return this.pExitActions.indexOf( action )
	end
	
	/** \brief Add exit action. */
	public func void addExitAction( SMStateAction action )
		if action == null
			throw EInvalidParam.new()
		end
		this.pExitActions.add( action )
	end
	
	/** \brief Visit exit actions with block with parameter SMStateAction. */
	public func void forEachExitAction( Block ablock )
		this.pExitActions.forEach( ablock )
	end
	
	/** \brief Find exit action with block with parameter SMStateAction. */
	public func SMStateAction findExitAction( Block ablock )
		return this.pExitActions.find( ablock ) cast SMStateAction
	end
	
	
	
	/** \brief Count of transitions. */
	public func int getTransitionCount()
		return this.pTransitions.getCount()
	end
	
	/** \brief Get transition at index. */
	public func SMTransition getTransitionAt( int index )
		return this.pTransitions.getAt( index ) cast SMTransition
	end
	
	/** \brief Index of transition or -1 if absent. */
	public func int indexOfTransition( SMTransition transition )
		return this.pTransitions.indexOf( transition )
	end
	
	/** \brief Add transition. */
	public func void addTransition( SMTransition transition )
		if transition == null
			throw EInvalidParam.new()
		end
		this.pTransitions.add( transition )
	end
	
	/** \brief Remove transition. */
	public func void removeTransition( SMTransition transition )
		this.pTransitions.remove( transition )
	end
	
	/** \brief Remove all transitions. */
	public func void removeAllTransitions()
		this.pTransitions.removeAll()
	end
	
	/** \brief Visit transitions with block with parameter SMTransition. */
	public func void forEachTransition( Block ablock )
		this.pTransitions.forEach( ablock )
	end
	
	/** \brief Find transition with block with parameter SMTransition. */
	public func SMTransition findTransition( Block ablock )
		return this.pTransitions.find( ablock ) cast SMTransition
	end
end
