/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief List of string identifier values class property for use with XML loading.
 */
class ECPStringIDList extends ElementClassProperty
	/** \brief List of strings (Array of StringID). */
	private var Array pStringIDs
	
	
	
	/** \brief Create property. */
	public func new( String name ) super( name )
		this.pStringIDs = Array.new()
	end
	
	
	
	/** \brief Number of string identifiers. */
	public func int getCount()
		return this.pStringIDs.getCount()
	end
	
	/** \brief String identifier at index. */
	public func StringID getAt( int index )
		return this.pStringIDs.getAt( index ) cast StringID
	end
	
	/** \brief Get random string identifier or \em null if no string identifiers are present. */
	public func StringID getRandom()
		if this.pStringIDs.getCount() == 0
			return null
			
		else
			return this.pStringIDs.random() cast StringID
		end
	end
	
	/** \brief For each string identifier with block with String as parameter. */
	public func void forEach( Block ablock )
		this.pStringIDs.forEach( ablock )
	end
	
	/** \brief Remove all string identifiers. */
	public func void removeAll()
		this.pStringIDs.removeAll()
	end
	
	/** \brief Add string identifier. */
	public func void add( StringID string )
		this.pStringIDs.add( string )
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue( Object value )
		this.pStringIDs.removeAll()
		( value cast Array ).forEach( block String each
			this.pStringIDs.add( StringID.new( each ) )
		end )
	end
	
	
	
	/**
	 * \brief StringID list modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored list is returned.
	 * If the named stub property is present it is decoded using codec.
	 * 
	 * - "id1 id2 ... idN"
	 */
	public func Array getList( StubWithProperties stub, CodecPropertyString codec )
		var String value = stub.getPropertyValueFor( this.getName(), "" )
		if value.empty()
			return this.pStringIDs
			
		else
			return codec.decodeStringList( value ).map( block String each
				return StringID.new( each )
			end )
		end
	end
end
