/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief Image resource element class property for use with XML loading.
 * 
 * Image resource is set from XML using a path. Loads the resource during preloading.
 * The value of the property is then the loaded resource. If loading fails null
 * resource is stored.
 */
class ECPImage extends ElementClassProperty implements ResourceListener
	private var String pPath
	private var Image pImage
	private var PreloadCounter pCounter
	private var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	public func new( String name ) super( name )
	end
	
	/** \brief Create property with initial path. */
	public func new( String name, String path ) super( name )
		this.pPath = path
	end
	
	
	
	/** \brief Path to image resource. */
	public func String getPath()
		return this.pPath
	end
	
	/** \brief Set path to image resource. */
	public func void setPath( String path )
		this.pPath = path
	end
	
	/** \brief Image resource or \em null if not present. */
	public func Image getImage()
		return this.pImage
	end
	
	/** \brief Set image resource or \em null if not present. */
	public func void setImage( Image image )
		this.pImage = image
	end
	
	/** \brief Property has been preloaded. */
	public func bool getHasPreloaded()
		return this.pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue( Object value )
		this.pPath = value cast String
	end
	
	
	
	/** \brief Preload resources if supported. */
	public func void preloadResources( ElementClass elementClass, PreloadCounter counter )
		if this.pHasPreloaded
			return
		end
		
		this.pHasPreloaded = true
		
		if this.pPath == null or this.pPath.empty()
			return
		end
		
		Image.loadAsynchron( File.absolutePath( this.pPath, elementClass.getBasePath() ).getPath(), this )
		this.pCounter = counter
		counter.increase()
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems( ElementClass elementClass, Console console )
		if this.pPath != null and not this.pPath.empty() and this.pImage == null
			console.addMessage( "Property " + elementClass.getClassname() + "." \
				+ this.getName() + ": Failed loading image " \
				+ File.absolutePath( this.pPath, elementClass.getBasePath() ).getPath() )
			return true
		end
		return false
	end
	
	
	
	/** \brief Resource has finished loading. */
	public func void finishedLoading( String path, ResourceLoaderType resourceType, Object resource )
		this.pImage = resource cast Image
		this.pCounter.decrease()
	end
	
	/** \brief Resource failed loading. */
	public func void failedLoading( String filename, ResourceLoaderType resourceType )
		this.pCounter.decrease()
	end
	
	
	
	/**
	 * \brief Image modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored image is returned.
	 * If the named stub property is present it is loaded as image resource.
	 */
	public func Image getImage( StubWithProperties stub, ElementClass eclass )
		var String value = stub.getPropertyValueFor( this.getName(), "" )
		if value.empty()
			return this.pImage
			
		else
			try
				return Image.new( value )
				
			catch Exception e
				throw ELoadResourceFailed.new( value, eclass.getClassname() )
			end
		end
	end
end
