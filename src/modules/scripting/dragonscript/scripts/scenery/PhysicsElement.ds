/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery


/**
 * \brief Physics element.
 * 
 * Physics behavior element composing of these behaviors:
 * - ECBehaviorComponent
 * - ECBehaviorCollider
 * - ECBehaviorAttachToParent
 * 
 * This class is a quick way to add physics elements to a game world. Such elements use
 * CollisionResponse.dynamic and are affected by physical simulation. You can create new
 * element classes by subclassing and adding additional behaviors. It is usually though
 * better to create a new BehaviorElementClass subclass instead adding the desired
 * behaviors. This also allows to use subclassed behaviors for specific needs.
 * 
 * The default collision filter makes the physics element being affected by
 * BaseGameApp.CollisionFilterBit.actor but not BaseGameApp.CollisionFilterBit.actorAI .
 * This is on purpose. If BaseGameApp.CollisionFilterBit.actorAI is used then the actor
 * will stop moving when it touches the physics element. This prevents the actor from
 * pushing the physics element. Instead by using BaseGameApp.CollisionFilterBit.actor
 * the actor AI collider is moving through the physics element as if it is not present.
 * The regular collider present in the actor can then be used to assign a shape which
 * affects the physics element.
 */
class PhysicsElement extends BehaviorElement
	private var ECBehaviorComponent.Instance pComponent
	private var ECBehaviorCollider.Instance pCollider
	private var ECBehaviorAttachToParent.Instance pAttachToParent
	
	
	
	/** \brief Create element. */
	public func new( PhysicsElementClass eclass ) super( eclass )
		this.pComponent = eclass.getComponent().instance( this )
		this.pCollider = eclass.getCollider().instance( this )
		this.pAttachToParent = eclass.getAttachToParent().instance( this )
	end
	
	
	/** \brief Component behavio instance. */
	public func ECBehaviorComponent.Instance getComponent()
		return this.pComponent
	end
	
	/** \brief Collider behavior instance. */
	public func ECBehaviorCollider.Instance getCollider()
		return this.pCollider
	end
	
	/** \brief Attach to parent behavior instance. */
	public func ECBehaviorAttachToParent.Instance getAttachToParent()
		return this.pAttachToParent
	end
	
	
	
	/** \brief Visit element. */
	public func void visit( ElementVisitor visitor )
		visitor.visitPhysicsElement( this )
	end
end
