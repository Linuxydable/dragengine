/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Composable speaker for element class.
 * 
 * Provides speaker support to element class without subclassing from a specific class.
 */
class ECComposeSpeaker
	private var ECPEnumeration pSpeakerType
	private var ECPSound pSound
	private var ECPSynthesizer pSynthesizer
	private var ECPFloat pVolume
	private var ECPFloat pRange
	private var ECPFloat pRollOff
	private var ECPFloat pPlaySpeed
	private var ECPBoolean pMuted
	private var ECPBoolean pLooping
	private var ECPBoolean pPlaying
	private var ECPShapeList pShape
	private var LayerMask pLayerMask
	
	private var String pPrefix
	
	
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new( ElementClass ownerClass, Loaders loaders ) this( ownerClass, loaders, "speaker." )
	end
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new( ElementClass ownerClass, Loaders loaders, String prefix )
		this.pLayerMask = LayerMask.newWith( BaseGameApp.WorldLayerBit.audio )
		
		this.pSpeakerType = ECPEnumeration.new( prefix + "type", SpeakerType.all(), SpeakerType.point )
		ownerClass.addProperty( this.pSpeakerType )
		
		this.pSound = ECPSound.new( prefix + "sound" )
		ownerClass.addProperty( this.pSound )
		
		this.pSynthesizer = ECPSynthesizer.new( prefix + "synthesizer", loaders.getSynthesizer() )
		ownerClass.addProperty( this.pSynthesizer )
		
		this.pVolume = ECPFloat.new( prefix + "volume", 1, 0 )
		ownerClass.addProperty( this.pVolume )
		
		this.pRange = ECPFloat.new( prefix + "range", 30, 0 )
		ownerClass.addProperty( this.pRange )
		
		this.pRollOff = ECPFloat.new( prefix + "rollOff", 1, 0 )
		ownerClass.addProperty( this.pRollOff )
		
		this.pPlaySpeed = ECPFloat.new( prefix + "playSpeed", 1 )
		ownerClass.addProperty( this.pPlaySpeed )
		
		this.pMuted = ECPBoolean.new( prefix + "muted", false )
		ownerClass.addProperty( this.pMuted )
		
		this.pLooping = ECPBoolean.new( prefix + "looping", true )
		ownerClass.addProperty( this.pLooping )
		
		this.pPlaying = ECPBoolean.new( prefix + "playing", true )
		ownerClass.addProperty( this.pPlaying )
		
		this.pShape = ECPShapeList.new( prefix + "shape", ownerClass.getSharedCodecPropertyString() )
		ownerClass.addProperty( this.pShape )
		
		this.pPrefix = prefix
	end
	
	
	
	/** \brief Speaker type. */
	public func ECPEnumeration getSpeakerType()
		return this.pSpeakerType
	end
	
	/** \brief Speaker sound. */
	public func ECPSound getSound()
		return this.pSound
	end
	
	/** \brief Speaker synthesizer. */
	public func ECPSynthesizer getSynthesizer()
		return this.pSynthesizer
	end
	
	/** \brief Speaker volume. */
	public func ECPFloat getVolume()
		return this.pVolume
	end
	
	/** \brief Speaker range. */
	public func ECPFloat getRange()
		return this.pRange
	end
	
	/** \brief Half volume distance. */
	public func ECPFloat getRollOff()
		return this.pRollOff
	end
	
	/** \brief Play speed. */
	public func ECPFloat getPlaySpeed()
		return this.pPlaySpeed
	end
	
	/** \brief Speaker is muted. */
	public func ECPBoolean getMuted()
		return this.pMuted
	end
	
	/** \brief Speaker is looping. */
	public func ECPBoolean getLooping()
		return this.pLooping
	end
	
	/** \brief Speaker is playing. */
	public func ECPBoolean getPlaying()
		return this.pPlaying
	end
	
	/** \brief Layer mask. */
	public func LayerMask getLayerMask()
		return this.pLayerMask
	end
	
	/** \brief Set layer mask. */
	public func void setLayerMask( LayerMask layerMask )
		if layerMask == null
			throw EInvalidParam.new()
		end
		this.pLayerMask = layerMask
	end
	
	/** \brief Property prefix. */
	public func String getPrefix()
		return this.pPrefix
	end
	
	/** \brief Speaker shape. */
	public func ECPShapeList getShape()
		return this.pShape
	end
	
	
	
	/** \brief Create speaker. */
	public func Speaker createSpeaker()
		var Speaker speaker = Speaker.new()
		
		speaker.setType( this.pSpeakerType.getEnumeration() cast SpeakerType )
		speaker.setSound( this.pSound.getSound() )
		speaker.setVolume( this.pVolume.getValue() )
		speaker.setRange( this.pRange.getValue() )
		speaker.setLayerMask( this.pLayerMask )
		speaker.setRollOff( this.pRollOff.getValue() )
		speaker.setPlaySpeed( this.pPlaySpeed.getValue() )
		speaker.setMuted( this.pMuted.getValue() )
		speaker.setLooping( this.pLooping.getValue() )
		speaker.setShape( this.pShape.getShapeList() )
		
		var Synthesizer synthesizer = this.pSynthesizer.getSynthesizer()
		if synthesizer != null
			var SynthesizerInstance synthInst = SynthesizerInstance.new()
			synthInst.setSynthesizer( synthesizer )
			speaker.setSynthesizer( synthInst )
		end
		
		if this.pPlaying.getValue()
			speaker.play()
		end
		
		return speaker
	end
	
	/** \brief Initialize speaker for element from stub. */
	public func Speaker createSpeaker( Element element, StubElement stub )
		var ElementClass eclass = element.getClass()
		var Speaker speaker = Speaker.new()
		
		speaker.setPosition( element.getPosition() )
		speaker.setOrientation( element.getOrientation() )
		speaker.setType( this.pSpeakerType.getEnumeration( stub ) cast SpeakerType )
		speaker.setSound( this.pSound.getSound( stub, eclass ) )
		speaker.setVolume( this.pVolume.getValue( stub ) )
		speaker.setRange( this.pRange.getValue( stub ) )
		speaker.setLayerMask( this.pLayerMask )
		speaker.setRollOff( this.pRollOff.getValue( stub ) )
		speaker.setPlaySpeed( this.pPlaySpeed.getValue( stub ) )
		speaker.setMuted( this.pMuted.getValue( stub ) )
		speaker.setLooping( this.pLooping.getValue( stub ) )
		speaker.setShape( this.pShape.getShapeList( stub ) )
		
		var Synthesizer synthesizer = this.pSynthesizer.getSynthesizer( stub, eclass )
		if synthesizer != null
			var SynthesizerInstance synthInst = SynthesizerInstance.new()
			synthInst.setSynthesizer( synthesizer )
			speaker.setSynthesizer( synthInst )
		end
		
		if this.pPlaying.getValue( stub )
			speaker.play()
		end
		
		return speaker
	end
	
	/** \brief Create muted speaker trigger expression from stub or \em null if not used. */
	public func TSTriggerExpression createTriggerMuted( Element element, StubElement stub )
		return this.createTriggerMuted( element, stub, "" )
	end
	
	/** \brief Create muted speaker trigger expression from stub or \em null if not used. */
	public func TSTriggerExpression createTriggerMuted( Element element, StubElement stub, String defaultValue )
		var String value = stub.getPropertyValueFor( this.pPrefix + "trigger(muted)", defaultValue )
		
		if value.empty()
			return null
			
		else
			return element.getClass().getTriggerExpressionParser().stringToExpression( value )
		end
	end
	
	/** \brief Create playing speaker trigger expression from stub or \em null if not used. */
	public func TSTriggerExpression createTriggerPlaying( Element element, StubElement stub )
		return this.createTriggerPlaying( element, stub, "" )
	end
	
	/** \brief Create playing speaker trigger expression from stub or \em null if not used. */
	public func TSTriggerExpression createTriggerPlaying( Element element, StubElement stub, String defaultValue )
		var String value = stub.getPropertyValueFor( this.pPrefix + "trigger", defaultValue )
		
		if value.empty()
			return null
			
		else
			return element.getClass().getTriggerExpressionParser().stringToExpression( value )
		end
	end
end
