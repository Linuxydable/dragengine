/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Two state animated element class.
 * 
 * - "deactivated": Controller used while the behavior is in deactivated state.
 *                  This is typically an unclamped controller. If missing behavior does
 *                  not think consuming no processing time.
 * - "activated": Controller used while the behavior is in activated state.
 *                This is typically an unclamped controller. If missing behavior does
 *                not think consuming no processing time.
 * - "activating": Controller used while behavior is transitioning from deactivated state
 *                 to activated state. The transition ends when the controller reaches
 *                 the upper limit. For this reason the controller has to be a clamped
 *                 controller otherwise the transition never ends. If missing behavior
 *                 transitions immediately to activated state.
 * - "deactivating": Controller used while behavior is transitioning from activated state
 *                   to deactivated state. The transition ends when the controller reaches
 *                   the upper limit. For this reason the controller has to be a clamped
 *                   controller otherwise the transition never ends. If missing behavior
 *                   transitions immediately to deactivated state.
 * 
 * \par Activate Trigger
 * 
 * When changing to true the element is switched to the activated state. When changing to
 * false the element is switched to the deactivated state. If the switch happens during
 * transition time the transition is finished before switching.
 */
class TwoStateAnimatedElementClass extends SimpleElementClass
	private var ECBehaviorTwoStateAnimated pAnimated
	
	
	
	/** \brief Create element class using loaders from BaseGameApp. */
	public func new() this( "TwoStateAnimatedElement" )
	end
	
	/** \brief Create element class. */
	public func new( Loaders loaders, TSTriggerTable triggerTable ) \
	this( "TwoStateAnimatedElement", loaders, triggerTable )
	end
	
	/** \brief Create element class using loaders from BaseGameApp. */
	public func new( String className ) this( className, BaseGameApp.getApp().getLoaders(), \
	BaseGameApp.getApp().getTriggerTable() )
	end
	
	/** \brief Create element class. */
	public func new( String className, Loaders loaders, TSTriggerTable triggerTable ) \
	super( className, loaders )
		this.pAnimated = ECBehaviorTwoStateAnimated.new( this, this.getComponent(), loaders, triggerTable )
	end
	
	
	
	/** \brief Two state animated behavior. */
	public func ECBehaviorTwoStateAnimated getAnimated()
		return this.pAnimated
	end
	
	
	
	/** \brief Create duplicate of class with new name. */
	public func ElementClass duplicateNamed( String classname )
		return TwoStateAnimatedElementClass.new( classname )
	end
	
	
	
	/**
	 * \brief Create element instance.
	 */
	protected func Element createElement()
		return TwoStateAnimatedElement.new( this )
	end
end
