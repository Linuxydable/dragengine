/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Actor element class.
 */
class BaseActorClass extends BehaviorElementClass
	private var ECBehaviorComponent pComponent
	private var ECBehaviorCollider pCollider
	private var ECBehaviorColliderAI pColliderAI
	private var ECBehaviorParameterTable pParameterTable
	private var ECBehaviorProjectToGround pProjectToGround
	private var ECBehaviorLocomotion pLocomotion
	private var ECBehaviorActorAnimated pActorAnimated
	private var ECBehaviorConversationActor pConversationActor
	private var ECBCTRRBindings pCTRRBindings
	private var ECBehaviorNavigator pNavigator
	private var ECBehaviorFootSteps pFootSteps
	private var ECBehaviorRideOn pRideOn
	private var ECBehaviorActorMover pActorMover
	private var ECBehaviorAlignActor pAlignActor
	private var ECBehaviorAvoidedByActor pAvoidedByActor
	private var ECBehaviorAvoidCollision pAvoidCollision
	private var ECBehaviorPlayerInputLook pPlayerInputLook
	private var ECBehaviorPlayerInputTurn pPlayerInputTurn
	private var ECBehaviorPlayerInputCrouch pPlayerInputCrouch
	private var ECBehaviorPlayerInputMove pPlayerInputMove
	private var ECBehaviorPlayerControllable pPlayerControllable
	private var ECBehaviorActorAIAction pAIAction
	
	
	
	/** \brief Create element class using loaders from BaseGameApp. */
	public func new() this( "Actor", BaseGameApp.getApp().getLoaders(), \
	BaseGameApp.getApp().getPlayerControlledActor() )
	end
	
	/** \brief Create element class. */
	public func new( Loaders loaders, ECBehaviorPlayerControllable.Tracker tracker ) \
	this( "Actor", loaders, tracker )
	end
	
	/** \brief Create element class using loaders from BaseGameApp. */
	public func new( String className ) this( className, BaseGameApp.getApp().getLoaders(), \
	BaseGameApp.getApp().getPlayerControlledActor() )
	end
	
	/** \brief Create element class. */
	public func new( String className, Loaders loaders, ECBehaviorPlayerControllable.Tracker tracker ) \
	super( className )
		this.pComponent = ECBehaviorComponent.new( this, null )
		
		// collider
		this.pCollider = ECBehaviorCollider.new( this, this.pComponent )
		
		var ECComposeCollider collider = this.pCollider.getCollider()
		
		var LayerMask cfcategory = LayerMask.newWith( BaseGameApp.CollisionFilterBit.actor )
		
		var LayerMask cffilter = LayerMask.new()
		cffilter.setBit( BaseGameApp.CollisionFilterBit.geometry )
		cffilter.setBit( BaseGameApp.CollisionFilterBit.dynamic )
		cffilter.setBit( BaseGameApp.CollisionFilterBit.particle )
		
		collider.setCollisionFilter( CollisionFilter.new( cfcategory, cffilter ) )
		collider.getPhysicsType().setEnumeration( CollisionResponse.kinematic )
		collider.getLocalGravity().setVector( Vector.new() )
		
		// add behaviors
		this.pColliderAI = ECBehaviorColliderAI.new( this, this.pCollider )
		this.pParameterTable = ECBehaviorParameterTable.new( this )
		this.pProjectToGround = ECBehaviorProjectToGround.new( this, this.pColliderAI )
		this.pLocomotion = ECBehaviorLocomotion.new( this, this.pColliderAI )
		
		this.pActorAnimated = ECBehaviorActorAnimated.new( this, this.pComponent, this.pLocomotion )
		this.pActorAnimated.setDefaultControllerMappings()
		
		this.pConversationActor = ECBehaviorConversationActor.new( this )
		this.pConversationActor.setActorAnimated( this.pActorAnimated )
		this.pConversationActor.setLocomotion( this.pLocomotion )
		this.pConversationActor.setParameterTable( this.pParameterTable )
		
		this.pCTRRBindings = ECBCTRRBindings.new( this, this.pConversationActor )
		
		this.pNavigator = ECBehaviorNavigator.new( this )
		this.pFootSteps = ECBehaviorFootSteps.new( this )
		this.pRideOn = ECBehaviorRideOn.new( this, this.pLocomotion, this.pProjectToGround )
		
		this.pActorMover = ECBehaviorActorMover.new( this, this.pLocomotion, this.pNavigator, this.pRideOn )
		this.pActorMover.setConversationActor( this.pConversationActor )
		
		this.pAlignActor = ECBehaviorAlignActor.new( this, this.pLocomotion, this.pConversationActor )
		this.pAvoidedByActor = ECBehaviorAvoidedByActor.new( this )
		this.pAvoidCollision = ECBehaviorAvoidCollision.new( this, this.pActorMover, this.pRideOn )
		this.pPlayerInputLook = ECBehaviorPlayerInputLook.new( this, this.pLocomotion )
		this.pPlayerInputTurn = ECBehaviorPlayerInputTurn.new( this, this.pLocomotion )
		this.pPlayerInputCrouch = ECBehaviorPlayerInputCrouch.new( this, this.pLocomotion )
		this.pPlayerInputMove = ECBehaviorPlayerInputMove.new( this, this.pLocomotion )
		
		// actor can be controlled by player
		this.pPlayerControllable = ECBehaviorPlayerControllable.new( this, tracker )
		this.pPlayerControllable.setConversationActor( this.pConversationActor )
		
		// AI and action support
		this.pAIAction = ECBehaviorActorAIAction.new( this, this.pColliderAI, \
			this.pConversationActor, this.pPlayerControllable )
		
		// actors are best not affecting sound nor showing up in env maps since they
		// are dynamic. still doing so is usually expensive for modules to perform. 
		var ECComposeComponent component = this.getComponent().getComponent()
		component.getRenderEnvMap().setValue( false )
		component.getAffectsAudio().setValue( false )
		component.getHintMovement().setEnumeration( ComponentHintMovement.dynamic )
	end
	
	
	
	/** \brief Component behavior. */
	public func ECBehaviorComponent getComponent()
		return this.pComponent
	end
	
	/** \brief Collider behavior. */
	public func ECBehaviorCollider getCollider()
		return this.pCollider
	end
	
	/** \brief Collider AI behavior. */
	public func ECBehaviorColliderAI getColliderAI()
		return this.pColliderAI
	end
	
	/** \brief Parameter table behavior. */
	public func ECBehaviorParameterTable getParameterTable()
		return this.pParameterTable
	end
	
	/** \brief Project to ground behavior. */
	public func ECBehaviorProjectToGround getProjectToGround()
		return this.pProjectToGround
	end
	
	/** \brief Locomotion behavior. */
	public func ECBehaviorLocomotion getLocomotion()
		return this.pLocomotion
	end
	
	/** \brief Actor animated behavior. */
	public func ECBehaviorActorAnimated getActorAnimated()
		return this.pActorAnimated
	end
	
	/** \brief Navigator behavior. */
	public func ECBehaviorNavigator getNavigator()
		return this.pNavigator
	end
	
	/** \brief Foot steps behavior. */
	public func ECBehaviorFootSteps getFootSteps()
		return this.pFootSteps
	end
	
	/** \brief Ride on behavior. */
	public func ECBehaviorRideOn getRideOn()
		return this.pRideOn
	end
	
	/** \brief Actor mover behavior. */
	public func ECBehaviorActorMover getActorMover()
		return this.pActorMover
	end
	
	/** \brief Align actor behavior. */
	public func ECBehaviorAlignActor getAlignActor()
		return this.pAlignActor
	end
	
	/** \brief Avoided by actor behavior. */
	public func ECBehaviorAvoidedByActor getAvoidedByActor()
		return this.pAvoidedByActor
	end
	
	/** \brief Avoid collision behavior. */
	public func ECBehaviorAvoidCollision getAvoidCollision()
		return this.pAvoidCollision
	end
	
	/** \brief Conversation actor behavior. */
	public func ECBehaviorConversationActor getConversationActor()
		return this.pConversationActor
	end
	
	/** \brief Binding tag resolver for conversation actor behavior. */
	public func ECBCTRRBindings getCTRRBindings()
		return this.pCTRRBindings
	end
	
	/** \brief Player input looking around behavior. */
	public func ECBehaviorPlayerInputLook getPlayerInputLook()
		return this.pPlayerInputLook
	end
	
	/** \brief Player input turning behavior. */
	public func ECBehaviorPlayerInputTurn getPlayerInputTurn()
		return this.pPlayerInputTurn
	end
	
	/** \brief Player input crouching behavior. */
	public func ECBehaviorPlayerInputCrouch getPlayerInputCrouch()
		return this.pPlayerInputCrouch
	end
	
	/** \brief Player input moving behavior. */
	public func ECBehaviorPlayerInputMove getPlayerInputMove()
		return this.pPlayerInputMove
	end
	
	/** \brief Player controllable behavior. */
	public func ECBehaviorPlayerControllable getPlayerControllable()
		return this.pPlayerControllable
	end
	
	/** \brief AI-Action behavior. */
	public func ECBehaviorActorAIAction getAIAction()
		return this.pAIAction
	end
	
	
	
	/** \brief Create element instance. */
	protected func Element createElement()
		return BaseActor.new( this )
	end
end
