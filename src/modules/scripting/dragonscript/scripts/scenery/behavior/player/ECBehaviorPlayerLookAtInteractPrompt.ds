/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Commands
pin Dragengine.Gui.Layouts
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding look-at interact prompt support to player actor.
 * 
 * If the actor is the player controlled actor creates a UI panel overlayed on the HUD
 * showing interaction prompts. If the actor is not the active player actor destroys
 * the UI panel.
 * 
 * If the actor looks an an element supporting ECBehaviorInteractPrompt the UI panel is
 * shown and updated with the prompt information. Otherwise the UI panel is cleared and
 * hidden.
 * 
 * The widget is shown inside a container Panel created by the behavior. The default layout
 * of the panel is CentrizedBoxLayout. Change the layout instance to use your own.
 * 
 * This behavior is used for player actors only.
 * 
 * Uses property prefix "playerLookAtInteractPrompt."
 */
class ECBehaviorPlayerLookAtInteractPrompt extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Player takes control listener. */
		class PlayerTakesControl extends ECBehaviorPlayerControllable.DefaultListener
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void playerTakesControl( ECBehaviorPlayerControllable.Instance instance )
				this.pInstance.playerTakesControl()
			end
			
			public func void playerReleasesControl( ECBehaviorPlayerControllable.Instance instance )
				this.pInstance.playerReleasesControl()
			end
		end
		
		/** \brief Players looks at element listener. */
		class LookAtChanged extends ECBehaviorLookAt.DefaultListener
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void enabledChanged( ECBehaviorLookAt.Instance instance )
				this.pInstance.lookAtChanged()
			end
			
			public func void lookAtChanged( ECBehaviorLookAt.Instance instance )
				this.pInstance.lookAtChanged()
			end
		end
		
		
		private var ECBehaviorPlayerLookAtInteractPrompt pECBehavior
		private var ECBehaviorPlayerControllable.Instance pPlayerControllable
		private var ECBehaviorLookAt.Instance pLookAt
		private var int pBindingIconHeight
		private var Container pUIContainer
		private var Panel pPanelPrompt
		private var Widget pWidgetPrompt
		
		
		
		/** \brief Create instance. */
		public func new( ECBehaviorPlayerLookAtInteractPrompt ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			
			this.pUIContainer = ecbehavior.getUIContainer()
			
			this.pPlayerControllable = ecbehavior.getPlayerControllable().instance( element )
			this.pLookAt = ecbehavior.getLookAt().instance( element )
		end
		
		/** \brief Dispose of instance. */
		public func void dispose()
			this.pPlayerControllable = null
			this.pLookAt = null
			this.pUIContainer = null
			if this.pPanelPrompt != null
				this.pPanelPrompt.dispose()
				this.pPanelPrompt = null
			end
			this.pWidgetPrompt = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			this.pBindingIconHeight = this.pECBehavior.getBindingIconHeight().getValue( stub )
			this.pPlayerControllable.addListener( PlayerTakesControl.new( this ) )
			this.pLookAt.addListener( LookAtChanged.new( this ) )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorPlayerLookAtInteractPrompt getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Player controllable behavior. */
		public func ECBehaviorPlayerControllable.Instance getPlayerControllable()
			return this.pPlayerControllable
		end
		
		/** \brief Look-at behavior. */
		public func ECBehaviorLookAt.Instance getLookAt()
			return this.pLookAt
		end
		
		/** \brief Binding icon height. */
		public func int getBindingIconHeight()
			return this.pBindingIconHeight
		end
		
		/** \brief UI Container to add panel to. */
		public func Container getUIContainer()
			return this.pUIContainer
		end
		
		/** \brief Set UI container to add panel to. */
		public func void setUIContainer( Container container )
			if container == null
				throw ENullPointer.new( "container" )
			end
			
			if container == this.pUIContainer
				return
			end
			
			if this.pPanelPrompt != null
				this.pPanelPrompt.dispose()
				this.pPanelPrompt = null
			end
			this.pWidgetPrompt = null
			
			this.pUIContainer = container
		end
		
		
		
		/** \brief Prompt panel or null if not created. */
		public func Panel getPanelPrompt()
			return this.pPanelPrompt
		end
		
		/** \brief Prompt widget or null if not created. */
		public func Widget getWidgetPrompt()
			return this.pWidgetPrompt
		end
		
		
		
		/** \brief Create prompt panel. */
		protected func Panel createPanelPrompt()
			return Panel.new( CentrizedBoxLayout.new( LayoutAxis.x ) )
		end
		
		/**
		 * \brief Create prompt widget.
		 * 
		 * Default implementation creates instance of PanelInteractPrompt.
		 */
		protected func Widget createWidgetPrompt()
			return PanelInteractPrompt.new( this.pECBehavior.getBindingManager(), this.pBindingIconHeight )
		end
		
		/**
		 * \brief Update prompt widget.
		 * 
		 * Default implementation update prompt widget of type PanelInteractPrompt.
		 * 
		 * \param prompts Array of ECBehaviorInteractPrompt.Instance .
		 */
		protected func void updateWidgetPrompt( Array prompts )
			( ( this.pWidgetPrompt cast PanelInteractPrompt ).getModel() cast DefaultListModel ).setContent( \
				prompts.map( block ECBehaviorInteractPrompt.Instance each
					var InteractPromptEntry entry = InteractPromptEntry.new()
					entry.setImage( each.getImage() )
					entry.setVideo( each.getVideo() )
					entry.setStyle( each.getStyle() )
					entry.setVerb( each.getVerb() )
					entry.setDescription( each.getDescription() )
					entry.setCommand( this.pECBehavior.getCommandManager().getNamed( each.getCommand() ) )
					return entry
				end ) )
		end
		
		
		
		/**
		 * \brief Player takes control.
		 * 
		 * Creates prompt widget if not created already and adds it to UI container.
		 */
		public func void playerTakesControl()
			if this.pWidgetPrompt != null
				return
			end
			
			this.pPanelPrompt = this.createPanelPrompt()
			this.pPanelPrompt.setVisible( false )
			
			this.pWidgetPrompt = this.createWidgetPrompt()
			
			this.pPanelPrompt.addWidget( this.pWidgetPrompt )
			this.pUIContainer.addWidget( this.pPanelPrompt )
		end
		
		/**
		 * \brief Player released control.
		 * 
		 * Destroys prompt widget if created removing it from the UI container.
		 */
		public func void playerReleasesControl()
			if this.pPanelPrompt != null
				this.pPanelPrompt.dispose()
				this.pPanelPrompt = null
			end
			this.pWidgetPrompt = null
		end
		
		/**
		 * \brief Look at element changed.
		 * 
		 * If prompt widget is present and looking at an element collects all
		 * ECBehaviorInteractPrompt instances, calls updateWidgetPrompt() and shows widget.
		 * Otherwise clears prompt and hides widget.
		 */
		public func void lookAtChanged()
			if this.pWidgetPrompt == null
				return
			end
			
			var Element element = this.pLookAt.getLookAtElement()
			var Array prompts = Array.new()
			
			if element != null and element castable BehaviorElement
				prompts = this.getPromptsFrom( element cast BehaviorElement )
			end
			
			this.updateWidgetPrompt( prompts )
			
			this.pPanelPrompt.setVisible( prompts.getCount() > 0 )
		end
		
		/**
		 * \brief Get prompts to shows as Array of ECBehaviorInteractPrompt.Instance.
		 * 
		 * Default implementation gets all enabled instances.
		 */
		public func Array getPromptsFrom( BehaviorElement element )
			return ECBehaviorInteractPrompt.getAllEnabledInstancesIn( element )
		end
	end
	
	
	
	private var ECBehaviorPlayerControllable pPlayerControllable
	private var ECBehaviorLookAt pLookAt
	private var Container pUIContainer
	private var CommandManager pCommandManager
	private var BindingManager pBindingManager
	private var ECPInteger pBindingIconHeight
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These parameters can be null:
	 * - commandManager
	 * - bindingManager
	 */
	public func new( BehaviorElementClass eclass, ECBehaviorPlayerControllable playerControllable, \
	ECBehaviorLookAt lookAt, Container uiContainer ) \
	this( eclass, playerControllable, lookAt, uiContainer, BaseGameApp.getApp().getCommandManager(), \
	BaseGameApp.getApp().getBindingManager() )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorPlayerControllable playerControllable, \
	ECBehaviorLookAt lookAt, Container uiContainer, CommandManager commandManager, \
	BindingManager bindingManager ) \
	this( eclass, playerControllable, lookAt, uiContainer, \
	commandManager, bindingManager, "playerLookAtInteractPrompt." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorPlayerControllable playerControllable, \
	ECBehaviorLookAt lookAt, Container uiContainer, String prefix ) \
	this( eclass, playerControllable, lookAt, uiContainer, BaseGameApp.getApp().getCommandManager(), \
	BaseGameApp.getApp().getBindingManager(), prefix )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorPlayerControllable playerControllable, \
	ECBehaviorLookAt lookAt, Container uiContainer, CommandManager commandManager, \
	BindingManager bindingManager, String prefix ) super( eclass )
		if playerControllable == null
			throw ENullPointer.new( "playerControllable" )
		end
		if lookAt == null
			throw ENullPointer.new( "lookAt" )
		end
		if uiContainer == null
			throw ENullPointer.new( "uiContainer" )
		end
		if uiContainer == null
			throw ENullPointer.new( "uiContainer" )
		end
		if this.getBehaviorIn( eclass ) != null
			throw BEMultipleInstanceException.new( eclass, this )
		end
		
		this.pPlayerControllable = playerControllable
		this.pLookAt = lookAt
		this.pUIContainer = uiContainer
		this.pCommandManager = commandManager
		this.pBindingManager = bindingManager
		
		this.pBindingIconHeight = ECPInteger.new( prefix + ".bindingIconHeight", 32, 1 )
		eclass.addProperty( this.pBindingIconHeight )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pCommandManager = null
		this.pBindingManager = null
		this.pPlayerControllable = null
		this.pLookAt = null
		this.pUIContainer = null
		super.dispose()
	end
	
	
	
	/** \brief Player controllable behavior. */
	public func ECBehaviorPlayerControllable getPlayerControllable()
		return this.pPlayerControllable
	end
	
	/** \brief Look-at behavior. */
	public func ECBehaviorLookAt getLookAt()
		return this.pLookAt
	end
	
	/** \brief UI Container to add panel to. */
	public func Container getUIContainer()
		return this.pUIContainer
	end
	
	/** \brief Command manager or null. */
	public func CommandManager getCommandManager()
		return this.pCommandManager
	end
	
	/** \brief Set command manager or null. */
	public func void setCommandManager( CommandManager commandManager )
		this.pCommandManager = commandManager
	end
	
	/** \brief Binding manager or null. */
	public func BindingManager getBindingManager()
		return this.pBindingManager
	end
	
	/** \brief Set binding manager or null. */
	public func void setBindingManager( BindingManager bindingManager )
		this.pBindingManager = bindingManager
	end
	
	/** \brief Binding icon height. */
	public func ECPInteger getBindingIconHeight()
		return this.pBindingIconHeight
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlayerLookAtInteractPrompt.
	 */
	static public func ECBehaviorPlayerLookAtInteractPrompt getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehavior each
			return each castable ECBehaviorPlayerLookAtInteractPrompt
		end ) cast ECBehaviorPlayerLookAtInteractPrompt
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlayerLookAtInteractPrompt.Instance .
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block ECBehaviorInstance each
			return each castable Instance
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
