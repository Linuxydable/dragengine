/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine



/**
 * \brief File path.
 * 
 * This is not an open file but only an object for working with filenames.
 * This object though can then be used with appropriate other objects to load files.
 */
class File
	private var Array pComponents
	private var String pPrefix
	
	
	
	/** \brief Create File with root path. */
	public func new()
		this.pComponents = Array.new()
		this.pPrefix = "/"
	end
	
	/** \brief Create copy of file. */
	public func new( File file )
		this.pComponents = Array.new( file.pComponents )
		this.pPrefix = file.pPrefix
	end
	
	/**
	 * \brief Create File from filename.
	 * \param filename Filename to parse.
	 */
	public func new( String filename )
		this.pComponents = Array.new()
		this.pPrefix = ""
		this.pParseFilename( filename )
	end
	
	/**
	 * \brief Create File from filename appended to parent File.
	 * \param parent Path to parse filename relative to.
	 * \param filename Filename to parse.
	 */
	public func new( File parent, String filename )
		this.pComponents = Array.new( parent.pComponents )
		this.pPrefix = parent.pPrefix
		this.pParseFilename( filename )
	end
	
	/**
	 * \brief Create File from filename appended to parent File.
	 * \param parent Path to parse filename relative to.
	 * \param filename Filename to parse.
	 */
	public func new( String parent, String filename )
		this.pComponents = Array.new()
		this.pPrefix = ""
		this.pParseFilename( parent )
		this.pParseFilename( filename )
	end
	
	/**
	 * \brief Create File from filename appended to parent File.
	 * \param parent Path to parse filename relative to.
	 * \param filename Filename to parse.
	 * \throws EInvalidParam \em filename is absolute.
	 */
	public func new( File parent, File filename )
		if filename.isAbsolute()
			throw EInvalidParam.new()
		end
		
		this.pComponents = Array.new( parent.pComponents )
		this.pPrefix = parent.pPrefix
		filename.pComponents.forEach( block String each
			this.pComponents.add( each )
		end )
	end
	
	
	
	/** \brief Path prefix. */
	public func String getPrefix()
		return this.pPrefix
	end
	
	/** \brief Count of components. */
	public func int getComponentCount()
		return this.pComponents.getCount()
	end
	
	/** \brief Component at index. */
	public func String getComponentAt( int index )
		return this.pComponents.getAt( index ) cast String
	end
	
	
	
	/** \brief String representation of path. */
	public func String getPath()
		if this.pComponents.getCount() == 0
			return this.pPrefix
		end
		
		return this.pPrefix + ( this.pComponents.fold( block String a, String b
			return a + "/" + b
		end ) cast String )
	end
	
	/** \brief Parent directory of path or \em null if not present. */
	public func File getParent()
		if this.pComponents.getCount() == 0 and this.pPrefix.empty() 
			return null
		end
		
		var File parent = File.new()
		parent.pPrefix = this.pPrefix
		parent.pComponents = this.pComponents.slice( 0, -1 )
		return parent
	end
	
	/** \brief Name of path which is the last path component or the prefix if empty. */
	public func String getName()
		if this.pComponents.getCount() == 0
			return this.pPrefix
		end
		
		return this.pComponents.getAt( -1 ) cast String
	end
	
	
	
	/**
	 * \brief Path is absolute.
	 * \details Path is absolute if prefix is '/'.
	 */
	public func bool isAbsolute()
		return this.pPrefix.equals( "/" )
	end
	
	/**
	 * \brief Path is relative.
	 * \details Path is relative if prefix is empty.
	 */
	public func bool isRelative()
		return this.pPrefix.empty()
	end
	
	/** \brief Path is empty. */
	public func bool isEmpty()
		return this.pComponents.getCount() == 0
	end
	
	
	
	/**
	 * \brief Path is absolute.
	 * 
	 * \returns true if path begins with '/'.
	 */
	public static func bool isAbsolute( String path )
		return not path.empty() and path.getAt( 0 ) == '/'
	end
	
	/**
	 * \brief Create absolute path of base directory and a potential relative path.
	 * 
	 * Used for loading files relative to a base path where the file path can be absolute
	 * or relative. If path is absolute a File instance of path is returned.  If path is
	 * relative a File instance of baseDirectory with path appended is returned.
	 * 
	 * This method is safe to be used with path containing '..' at the beginning.
	 */
	public static func File absolutePath( String path, String baseDirectory )
		if isAbsolute( path )
			return File.new( path )
			
		else
			return File.new( baseDirectory, path )
		end
	end
	
	
	
	/**
	 * \brief File is a direct or indirect parent of another file.
	 * 
	 * Typically used to check if a file is inside a directory.
	 */
	public func bool isParentOf( File file )
		var int i, count = this.pComponents.getCount()
		if file.pComponents.getCount() < count or not this.pPrefix.equals( file.pPrefix )
			return false
		end
		
		for i = 0 to count
			if not this.pComponents.getAt( i ).equals( file.pComponents.getAt( i ) )
				return false
			end
		end
		
		return true
	end
	
	
	
	/** \brief Hash code of File. */
	public func int hashCode()
		return this.getPath().hashCode()
		/*
		return this.pComponents.inject( pPrefix.hashCode(), block String a, String b
			return a + b.hashCode()
		end ) cast int
		*/
	end
	
	/**
	 * \brief Files are equal.
	 * \param object Object to check.
	 * \returns True if both objects describe the same filename.
	 */
	public func bool equals( Object object )
		if object castable File
			return this.getPath().equals( ( object cast File ).getPath() )
			
		else
			return false
		end
	end
	
	/**
	 * \brief String representation of this filename.
	 * \details Same as getPath().
	 */
	public func String toString()
		return this.getPath()
	end
	
	
	
	/**
	 * \brief Create File from filename appended to parent File.
	 * \param parent Path to parse filename relative to.
	 * \param filename Filename to parse.
	 */
	public func File +( File file )
		return File.new( this, file )
	end
	
	/**
	 * \brief Create File from filename appended to parent File.
	 * \param parent Path to parse filename relative to.
	 * \param filename Filename to parse.
	 */
	public func File +( String file )
		return File.new( this, file )
	end
	
	
	
	/**
	 * Parses a file-string into components and adds them to
	 * the current components. Relative file attributes are
	 * also directly merged into the current set of components.
	 *
	 * \param filename Filename to parse into components.
	 */
	private func void pParseFilename( String filename )
		var String component
		var int offset = 0
		var int deliIndex
		var int len = filename.getLength()
		
		// step through the filename obtaining one path component
		// after the other and merging it directly with the
		// current path list array
		while offset < len
			// find path separator
			deliIndex = filename.find( '/', offset )
			if deliIndex == -1
				deliIndex = len
			end
			
			// extract path component
			component = filename.substring( offset, deliIndex )
			offset = deliIndex + 1
			
			// merge component with current components
			if component.empty()
				// this is either the root prefix right at the beginning (no components)
				// or an empty path in which case it is ignored
				if this.pComponents.getCount() == 0
					this.pPrefix = "/"
				end
				
			elif component.equals( ".." )
				if this.pComponents.getCount() == 0
					throw Exception.new( "Can not move into parent directory of root" )
				end
				
				this.pComponents.removeFrom( this.pComponents.getCount() - 1 )
				
			elif not component.equals( "." )
				this.pComponents.add( component )
			end
		end
	end
end
