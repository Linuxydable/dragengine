/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of animator controller.
 * 
 * Once defined a controller can be added to an animator using the stored definition.
 */
class ADController
	private var String pName
	private var bool pFrozen
	private var bool pClamp
	private var float pMinimum
	private var float pMaximum
	private var Vector pVector
	private var int pIndex
	
	
	
	/** \brief Create animation controller definition. */
	public func new()
		this.pName = ""
		this.pFrozen = false
		this.pClamp = true
		this.pMinimum = 0.0
		this.pMaximum = 1.0
		this.pVector = Vector.new()
		this.pIndex = 0
	end
	
	
	
	/** \brief Name. */
	public func String getName()
		return this.pName
	end
	
	/** \brief Set name. */
	public func void setName( String name )
		this.pName = name
	end
	
	/** \brief Controller is frozen. */
	public func bool getFrozen()
		return this.pFrozen
	end
	
	/** \brief Set if controller is frozen. */
	public func void setFrozen( bool frozen )
		this.pFrozen = frozen
	end
	
	/** \brief Controller value is clamped. */
	public func bool getClamp()
		return this.pClamp
	end
	
	/** \brief Set if controller value is clamped. */
	public func void setClamp( bool clamp )
		this.pClamp = clamp
	end
	
	/** \brief Minimum value. */
	public func float getMinimum()
		return this.pMinimum
	end
	
	/** \brief Set minimum value. */
	public func void setMinimum( float minimum )
		this.pMinimum = minimum
	end
	
	/** \brief Maximum value. */
	public func float getMaximum()
		return this.pMaximum
	end
	
	/** \brief Set maximum value. */
	public func void setMaximum( float maximum )
		this.pMaximum = maximum
	end
	
	/** \brief Vector value. */
	public func Vector getVector()
		return this.pVector
	end
	
	/** \brief Set vector value. */
	public func void setVector( Vector vector )
		this.pVector = vector
	end
	
	
	
	/** \brief Index of controller in animator. */
	public func int getIndex()
		return this.pIndex
	end
	
	
	
	/** \brief Add controller to animator using stored definition. */
	public func void addToAnimator( Animator animator, int index )
		if animator == null
			throw EInvalidParam.new()
		end
		
		this.pIndex = index
		
		var AnimatorController controller = animator.getControllerAt( index )
		controller.setName( this.pName )
		controller.setClamp( this.pClamp )
		controller.setRange( this.pMinimum, this.pMaximum )
		controller.setVector( this.pVector )
		controller.setFrozen( this.pFrozen )
	end
	
	
	
	public func void debug( Console console, int index )
		console.addMessage( "- Controller '" + this.pName + "' " + index \
			+ " ( frozen=" + this.pFrozen + " clamp=" + this.pClamp \
			+ " min=" + this.pMinimum + " max=" + this.pMaximum + " vector=" + this.pVector )
	end
end
