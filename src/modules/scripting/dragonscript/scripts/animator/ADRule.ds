/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Definition of an animator rule. Once defined a rule can be
 * added to an animator using the stored definition. This is the
 * base rule class with the properties shared amongst all rule
 * types.
 */
abstract class ADRule
	/** Name of the rule. */
	private var String pName
	/** List of target links. */
	private var Array pTargetLinks
	/** List of bones. */
	private var Array pBones
	/** Determines if the rule is enabled. */
	private var bool pEnabled
	/** Blend mode. */
	private var AnimatorRuleBlendMode pBlendMode
	/** Blend factor. */
	private var float pBlendFactor
	
	
	
	/** Creates a new animation rule definition. */
	public func new()
		this.pName = ""
		this.pTargetLinks = Array.new()
		this.pBones = Array.new()
		this.pEnabled = true
		this.pBlendMode = AnimatorRuleBlendMode.blend
		this.pBlendFactor = 1.0
	end
	
	
	
	/** Retrieves the name of the rule. */
	public func String getName()
		return this.pName
	end
	
	/** Sets the name of the rule. */
	public func void setName( String name )
		this.pName = name
	end
	
	/** Retrieves the number of target links. */
	public func int getTargetLinkCount()
		return this.pTargetLinks.getCount()
	end
	
	/** Retrieves the target link at the given index. */
	public func ADRuleTargetLink getTargetLinkAt( int index )
		return this.pTargetLinks.getAt( index ) cast ADRuleTargetLink
	end
	
	/** Adds a target link. */
	public func void addTargetLink( ADRuleTargetLink targetLink )
		if targetLink == null
			throw EInvalidParam.new()
		end
		
		this.pTargetLinks.add( targetLink )
	end
	
	/** \brief Visit targets with a block. */
	public func void forEachTarget( Block ablock )
		this.pTargetLinks.forEach( ablock )
	end
	
	
	
	/** Retrieves the number of bones. */
	public func int getBoneCount()
		return this.pBones.getCount()
	end
	
	/** Retrieves the bone at the given index. */
	public func String getBoneAt( int index )
		return this.pBones.getAt( index ) cast String
	end
	
	/** Adds a bone. */
	public func void addBone( String bone )
		if bone == null
			throw EInvalidParam.new()
		end
		
		this.pBones.add( bone )
	end
	
	
	
	/** Determines if the rule is enabled. */
	public func bool getEnabled()
		return this.pEnabled
	end
	
	/** Sets if the rule is enabled. */
	public func void setEnabled( bool enabled )
		this.pEnabled = enabled
	end
	
	/** Retrieves the blend mode. */
	public func AnimatorRuleBlendMode getBlendMode()
		return this.pBlendMode
	end
	
	/** Sets the blend mode. */
	public func void setBlendMode( AnimatorRuleBlendMode mode )
		this.pBlendMode = mode
	end
	
	/** Retrieves the blend factor. */
	public func float getBlendFactor()
		return this.pBlendFactor
	end
	
	/** Sets the blend factor. */
	public func void setBlendFactor( float factor )
		this.pBlendFactor = factor
	end
	
	
	
	/** Build engine animator rule using the stored definition. */
	abstract public func AnimatorRule buildRule( Animator animator )
	
	/** Setup common parameters for the given engine animator rule. */
	protected func void buildRuleCommon( AnimatorRule rule )
		var ADRuleTargetLink targetLink
		var int i, count
		
		if rule == null
			throw EInvalidParam.new()
		end
		
		rule.setEnabled( this.pEnabled )
		rule.setBlendMode( this.pBlendMode )
		rule.setBlendFactor( this.pBlendFactor )
		
		count = this.pBones.getCount()
		for i = 0 to count
			rule.addBone( this.pBones.getAt( i ) cast String )
		end
	end
	
	
	
	public func void debug( Console console )
	end
	
	protected func String debugCommon( String type )
		var ADRuleTargetLink targetLink
		var int i, count
		
		var String text = "- Rule " + type + " ( name=" + this.pName + " enabled=" + this.pEnabled \
			+ " mode=" + this.pBlendMode + " factor=" + this.pBlendFactor
		
		count = this.pBones.getCount()
		for i = 0 to count
			text = text + " bone=" + this.pBones.getAt( i ).toString()
		end
		
		count = this.pTargetLinks.getCount()
		for i = 0 to count
			targetLink = this.pTargetLinks.getAt( i ) cast ADRuleTargetLink
			
			text = text + " link=" + targetLink.getTarget() + ":" + targetLink.getLink().getIndex()
		end
		
		return text
	end
end
