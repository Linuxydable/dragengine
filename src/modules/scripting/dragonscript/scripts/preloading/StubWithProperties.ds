/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Preloading

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Base class for stubs having properties.
 */
class StubWithProperties
	/** \brief Properties. */
	private var Dictionary pProperties
	
	
	
	/** \brief Create stub with properties. */
	public func new()
		this.pProperties = Dictionary.new()
	end
	
	/** \brief Create copy of stub with properties. */
	public func new( StubWithProperties stub )
		this.pProperties = Dictionary.new( stub.pProperties )
	end
	
	
	
	/** \brief Number of properties. */
	public func int getPropertyCount()
		return this.pProperties.getCount()
	end
	
	/** \brief Property keys (String array). */
	public func Array getPropertyKeys()
		return this.pProperties.getKeys()
	end
	
	/** \brief Property key is present. */
	public func bool hasPropertyWithKey( String key )
		return this.pProperties.has( key )
	end
	
	/** \brief Value of property or default value if absent. */
	public func String getPropertyValueFor( String key, String default )
		return this.pProperties.getAt( key, default ) cast String
	end
	
	/** \brief Set property. */
	public func void setPropertyValueFor( String key, String value )
		if value == null
			throw EInvalidParam.new()
		end
		this.pProperties.setAt( key, value )
	end
	
	/** \brief Set property. */
	public func void setPropertyBoolFor( String key, bool value )
		this.pProperties.setAt( key, value if "1" else "0" )
	end
	
	/** \brief Set property. */
	public func void setPropertyIntFor( String key, int value )
		this.pProperties.setAt( key, value.toString() )
	end
	
	/** \brief Set property. */
	public func void setPropertyFloatFor( String key, float value )
		this.pProperties.setAt( key, value.toString() )
	end
	
	/** \brief Remove property if present. */
	public func void removePropertyWithKey( String key )
		this.pProperties.removeIfExisting( key )
	end
	
	/** \brief Remove all properties. */
	public func void removeAllProperties()
		this.pProperties.removeAll()
	end
	
	
	
	/** \brief Boolean property value or default value if absent. */
	public func bool getPropertyBoolFor( String key, bool default )
		var String value = this.pProperties.getAt( key, null ) cast String
		
		if value == null
			return default
			
		else
			return ( ( value.toFloat() + 0.5 ) cast int ) != 0
		end
	end
	
	/** \brief Integer property value or default value if absent. */
	public func int getPropertyIntFor( String key, int default )
		var String value = this.pProperties.getAt( key, null ) cast String
		
		if value == null
			return default
			
		else
			return value.toInt()
		end
	end
	
	/** \brief Floating point property value or default value if absent. */
	public func float getPropertyFloatFor( String key, float default )
		var String value = this.pProperties.getAt( key, null ) cast String
		
		if value == null
			return default
			
		else
			return value.toFloat()
		end
	end
	
	/** \brief Set properties from another StubWithProperties. */
	public func void setFrom( StubWithProperties properties )
		this.pProperties = Dictionary.new( properties.pProperties )
	end
	
	
	
	/** \brief Read properties from file. */
	public func void readPropertiesFromFile( FileReader reader )
		var int count = reader.readUShort()
		var String key, value
		var int i
		
		for i = 0 to count
			key = reader.readString8()
			value = reader.readString16()
			this.pProperties.setAt( key, value )
		end
	end
	
	/** \brief Write properties to file. */
	public func void writePropertiesToFile( FileWriter writer )
		writer.writeUShort( this.pProperties.getCount() )
		this.pProperties.forEach( block String key, String value
			writer.writeString8( key )
			writer.writeString16( value )
		end )
	end
end
