/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Non-interactive prop for InteractiveMainMenu.
 * 
 * Shows a simple element with optional animator. If animator is used it can have up
 * to one controller.
 * 
 * If first controller is present it has to be non-clamped controller and is incremented
 * by the elapsed time to provide a continous idle animation.
 */
class IMMProp extends BehaviorElement
	private var ECBehaviorTwoStateAnimated.Instance pTwoStateAnimated
	
	
	
	/** \brief Create element. */
	public func new( IMMPropClass eclass ) super( eclass )
		this.pTwoStateAnimated = eclass.getTwoStateAnimated().instance( this )
	end
	
	
	
	/** \brief Main menu. */
	public func InteractiveMainMenu getMainMenu()
		return ( this.getClass() cast IMMPropClass ).getMainMenu()
	end
	
	/** \brief Two state animated. */
	public func ECBehaviorTwoStateAnimated.Instance getTwoStateAnimated()
		return this.pTwoStateAnimated
	end
	
	
	
	/** \brief Start playing back activation part of animator if present. */
	public func void activate()
		this.pTwoStateAnimated.activate()
	end
	
	/** \brief Start playing back deactivate part of animator if present. */
	public func void deactivate()
		this.pTwoStateAnimated.deactivate()
	end
	
	/** \brief Reset initial state immediately. */
	public func void reset()
		this.pTwoStateAnimated.setDeactivated()
	end
	
	/** \brief Set activated immediately. */
	public func void setActivated()
		this.pTwoStateAnimated.setActivated()
	end
	
	
	
	/** \brief Visit element. */
	public func void visit( ElementVisitor visitor )
		( visitor cast IMMElementVisitor ).visitProp( this )
	end
end
