/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Audio.SynthesizerDefinition

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of wave source.
 * 
 * Once defined a source can be added to an synthesizer using the stored definition.
 * 
 */
class SDSourceWave extends SDSource
	/** \brief Wave type. */
	private var SSWaveType pType
	
	/** \brief Minimum frequency. */
	private var float pMinFrequency
	
	/** \brief Maximum frequency. */
	private var float pMaxFrequency
	
	
	
	/** \brief Create synthesizer source definition. */
	public func new()
		this.pType = SSWaveType.sine
		this.pMinFrequency = 440
		this.pMaxFrequency = 440
	end
	
	
	
	/** \brief Wave type. */
	public func SSWaveType getType()
		return this.pType
	end
	
	/** \brief Set wave type. */
	public func void setType( SSWaveType type )
		this.pType = type
	end
	
	/** \brief Minium frequency. */
	public func float getMinFrequency()
		return this.pMinFrequency
	end
	
	/** \brief Set minimum frequency. */
	public func void setMinFrequency( float frequency )
		this.pMinFrequency = frequency
	end
	
	/** \brief Maxium frequency. */
	public func float getMaxFrequency()
		return this.pMaxFrequency
	end
	
	/** \brief Set maximum frequency. */
	public func void setMaxFrequency( float frequency )
		this.pMaxFrequency = frequency
	end
	
	
	
	/**
	 * \brief Build engine synthesizer source using the stored definition.
	 */
	public func SynthesizerSource buildSource( Synthesizer synthesizer )
		var SSWave source = SSWave.new()
		
		this.buildSourceCommon( synthesizer, source )
		
		this.forEachTarget( block SDSourceTargetLink each
			source.targetAddLink( each.getTarget() cast SSWaveTarget, each.getLink().getIndex() )
		end )
		
		source.setType( this.pType )
		source.setMinFrequency( this.pMinFrequency )
		source.setMaxFrequency( this.pMaxFrequency )
		
		return source
	end
	
	
	
	public func void debug( Console console )
		console.addMessage( this.debugCommon( console, "Wave" ) + " type=" + this.pType \
			+ " freq=" + this.pMinFrequency + "-" + this.pMaxFrequency + " )" )
	end
end
