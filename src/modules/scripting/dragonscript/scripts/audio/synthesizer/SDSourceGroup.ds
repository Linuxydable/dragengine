/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Audio.SynthesizerDefinition

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of a group synthesizer source.
 * 
 * Once defined a source can be added to an synthesizer using the stored definition.
 * 
 */
class SDSourceGroup extends SDSource
	/** \brief Application type. */
	private var SSGroupApplication pApplicationType
	
	/** \brief Sources. */
	private var Array pSources
	
	
	
	/** \brief Create synthesizer source definition. */
	public func new()
		this.pApplicationType = SSGroupApplication.all
		this.pSources = Array.new()
	end
	
	
	
	/** \brief Application type. */
	public func SSGroupApplication getApplicationType()
		return this.pApplicationType
	end
	
	/** \brief Set application type. */
	public func void setApplicationType( SSGroupApplication applicationType )
		this.pApplicationType = applicationType
	end
	
	/** \brief Number of sources. */
	public func int getSourceCount()
		return this.pSources.getCount()
	end
	
	/** \brief Source at index. */
	public func SDSource getSourceAt( int index )
		return this.pSources.getAt( index ) cast SDSource
	end
	
	/** \brief Add source. */
	public func void addSource( SDSource source )
		if source == null or this.pSources.has( source )
			throw EInvalidParam.new()
		end
		this.pSources.add( source )
	end
	
	/** \brief Remove source. */
	public func void removeSource( SDSource source )
		if source == null
			throw EInvalidParam.new()
		end
		this.pSources.remove( source )
	end
	
	/** \brief Remove all sources. */
	public func void removeAllSources()
		this.pSources.removeAll()
	end
	
	/** \brief Visit sources using a block. */
	public func void forEachSource( Block ablock )
		this.pSources.forEach( ablock )
	end
	
	
	
	/** \brief Build engine synthesizer source using the stored definition. */
	public func SynthesizerSource buildSource( Synthesizer synthesizer )
		var SSGroup source = SSGroup.new()
		
		this.buildSourceCommon( synthesizer, source )
		
		this.forEachTarget( block SDSourceTargetLink each
			source.targetAddLink( each.getTarget() cast SSGroupTarget, each.getLink().getIndex() )
		end )
		
		source.setApplicationType( this.pApplicationType )
		this.pSources.forEach( block SDSource each
			source.addSource( each.buildSource( synthesizer ) )
		end )
		
		return source
	end
	
	
	
	public func void debug( Console console )
		console.addMessage( this.debugCommon( console, "Group" ) + \
			" applicationType=" + this.pApplicationType + \
			" sources=" + this.pSources.getCount() + " )" )
		
		this.pSources.forEach( block SDSource each
			each.debug( console )
		end )
	end
end
