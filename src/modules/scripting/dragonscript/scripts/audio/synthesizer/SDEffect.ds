/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Audio.SynthesizerDefinition

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of synthesizer effect.
 * 
 * Once defined a effect can be added to an synthesizer using the stored definition.
 * This is the base effect class with the properties shared amongst all effect types.
 * 
 */
abstract class SDEffect
	/** \brief List of target links. */
	private var Array pTargetLinks
	
	/** \brief Effect is enabled. */
	private var bool pEnabled
	
	/** \brief Strength. */
	private var float pStrength
	
	
	
	/** \brief Create synthesizer effect definition. */
	public func new()
		this.pTargetLinks = Array.new()
		this.pEnabled = true
		this.pStrength = 1.0
	end
	
	
	
	/** \brief Number of target links. */
	public func int getTargetLinkCount()
		return this.pTargetLinks.getCount()
	end
	
	/** \brief Target link at index. */
	public func SDSourceTargetLink getTargetLinkAt( int index )
		return this.pTargetLinks.getAt( index ) cast SDSourceTargetLink
	end
	
	/** \brief Add target link. */
	public func void addTargetLink( SDSourceTargetLink targetLink )
		if targetLink == null
			throw EInvalidParam.new()
		end
		
		this.pTargetLinks.add( targetLink )
	end
	
	/** \brief Visit targets with a block. */
	public func void forEachTarget( Block ablock )
		this.pTargetLinks.forEach( ablock )
	end
	
	
	
	/** \brief Effect is enabled. */
	public func bool getEnabled()
		return this.pEnabled
	end
	
	/** \brief Set if effect is enabled. */
	public func void setEnabled( bool enabled )
		this.pEnabled = enabled
	end
	
	/** \brief Strength of effect. */
	public func float getStrength()
		return this.pStrength
	end
	
	/** \brief Set strength of effect. */
	public func void setStrength( float strength )
		this.pStrength = strength
	end
	
	
	
	/** \brief Build engine synthesizer effect using the stored definition. */
	abstract public func SynthesizerEffect buildEffect( Synthesizer synthesizer )
	
	/** \brief Setup common parameters for the given engine synthesizer effect. */
	protected func void buildEffectCommon( SynthesizerEffect effect )
		if effect == null
			throw EInvalidParam.new()
		end
		
		effect.setEnabled( this.pEnabled )
		effect.setStrength( this.pStrength )
	end
	
	
	
	public func void debug( Console console )
	end
	
	protected func String debugCommon( String type )
		var SDSourceTargetLink targetLink
		var int i, count
		
		var String text = "- Effect " + type + " enabled=" + this.pEnabled + " strength=" + this.pStrength
		
		count = this.pTargetLinks.getCount()
		for i = 0 to count
			targetLink = this.pTargetLinks.getAt( i ) cast SDSourceTargetLink
			
			text = text + " link=" + targetLink.getTarget() + ":" + targetLink.getLink().getIndex()
		end
		
		return text
	end
end
