/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Audio.Announcer

pin Dragengine.LoadSave
pin Dragengine.Files
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load announcer from a dynmusic.xml file.
 * 
 * Before first set the synthesizer loader with setSynthesizerLoader. Otherwise
 * loading announcer fails if a modifier synthesizer tag is encountered.
 * 
 */
class LoadAnnouncer extends BaseXmlLoader
	/** \brief Synthesizer loader. */
	private var LoadSynthesizer pSynthesizerLoader
	
	
	
	/** \brief Create loader. */
	public func new( Console console ) this( console, "LoadAnnouncer" )
	end
	
	/** \brief Create loader. */
	public func new( Console console, String name ) super( console, name )
	end
	
	
	
	/** \brief Synthesizer loader. */
	public func LoadSynthesizer getSynthesizerLoader()
		return this.pSynthesizerLoader
	end
	
	/** \brief Set synthesizer loader. */
	public func void setSynthesizerLoader( LoadSynthesizer loader )
		this.pSynthesizerLoader = loader
	end
	
	
	
	/** \brief Load announcer from file. */
	public func Announcer loadFromFile( String filename )
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		
		if not root.getTagName().equals( "announcer" )
			this.logUnknownTag( root )
			throw EInvalidParam.new()
		end
		
		var Announcer announcer = Announcer.new()
		this.pParseAnnouncer( root, File.new( filename ).getParent().getPath(), announcer, null )
		return announcer
	end
	
	/**
	 * \brief Asynchronously load announcer from file.
	 * \returns Preloader for loaded announcer. Add listener and call checkFinished().
	 */
	public func PreloadAnnouncer loadFromFileAsync( String filename, PreloadCounter parentCounter )
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		
		if not root.getTagName().equals( "announcer" )
			this.logUnknownTag( root )
			throw EInvalidParam.new()
		end
		
		var Announcer announcer = Announcer.new()
		var PreloadAnnouncer preloader = PreloadAnnouncer.new( announcer, parentCounter )
		this.pParseAnnouncer( root, File.new( filename ).getParent().getPath(), announcer, preloader )
		return preloader
	end
	
	
	
	/** \brief Parse announcer tag. */
	private func void pParseAnnouncer( EasyXMLElement root, String baseDirectory, \
	Announcer announcer, PreloadAnnouncer preloader )
		var int i, count = root.getElementCount()
		var EasyXMLElement element
		var String tagName
		
		for i = 0 to count
			element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			tagName = element.getTagName()
			
			if tagName.equals( "parts" )
				this.pParseParts( element, announcer, baseDirectory, preloader )
				
			elif tagName.equals( "part" )
				this.pParsePart( element, announcer, baseDirectory, preloader )
				
			elif tagName.equals( "synthesizer" )
				if this.pSynthesizerLoader == null
					this.printOnConsole( element, "Synthesizer loader missing" )
					throw EInvalidParam.new()
				end
				
				var String filename = root.getFirstCData()
				if not filename.empty()
					filename = File.absolutePath( filename, baseDirectory ).getPath()
					
					try
						announcer.setModifierSynthesizer( this.pSynthesizerLoader.loadFromFile( filename ) )
						
					catch Exception e
						this.logLoadFileFailed( root, filename )
					end
				end
				
			else
				this.logUnknownTag( element )
				throw EInvalidParam.new()
			end
		end
		
		if preloader == null
			announcer.updateSpeaker()
		end
	end
	
	/** \brief Parse part tag. */
	private func void pParsePart( EasyXMLElement root, Announcer announcer, \
	String baseDirectory, PreloadAnnouncer preloader )
		var AnnouncerPart part = AnnouncerPart.new( root.getAttributeNamed( "id" ) )
		announcer.addPart( part )
		
		var String filename = root.getFirstCData()
		if not filename.empty()
			filename = File.absolutePath( filename, baseDirectory ).getPath()
			
			try
				if preloader == null
					part.setSound( Sound.new( filename ) )
					
				else
					Sound.loadAsynchron( filename, PreloadAnnouncer.PartSoundFinishedListener.new( preloader, part ) )
				end
				
			catch Exception e
				this.logLoadFileFailed( root, filename )
			end
		end
	end
	
	/** \brief Parse parts tag. */
	private func void pParseParts( EasyXMLElement root, Announcer announcer, \
	String baseDirectory, PreloadAnnouncer preloader )
		var String directoryName = root.getFirstCData()
		var String pattern = "*.announcer.xml"
		var int idCutOff = 0
		
		if root.hasAttributeNamed( "pattern" )
			pattern = root.getAttributeNamed( "pattern" )
		end
		if root.hasAttributeNamed( "idCutOff" )
			idCutOff = root.getAttributeIntNamed( "idCutOff" )
			if idCutOff < 0
				this.logInvalidAttributeValue( root, "idCutOff", root.getAttributeNamed( "idCutOff" ) )
				throw EInvalidParam.new()
			end
		end
		
		directoryName = File.absolutePath( directoryName, baseDirectory ).getPath()
		
		this.scanForSoundFiles( root, directoryName, pattern, -idCutOff, baseDirectory, announcer, preloader )
	end
	
	/** Scan directory for materials files. */
	private func void scanForSoundFiles( EasyXMLElement root, String directoryName, String pattern, \
	int idCutOff, String baseDirectory, Announcer announcer, PreloadAnnouncer preloader )
		FileSystem.searchFiles( directoryName, true, block String each, FileType type
			if type == FileType.file
				var File file = File.absolutePath( each, baseDirectory )
				var String filetitle = file.getName()
				
				if FileSystem.pathMatchesPattern( filetitle, pattern )
					// convert filename to id. id is lowercase with idCutOff characters cut off from the
					// end of the file title with separators converted to whitespace
					var String id = filetitle.substring( 0, idCutOff ).toLower().replace( "_-", ' ' )
					
					this.loadPartFromFile( root, file.getPath(), id, announcer, preloader )
				end
			end
			return true
		end )
	end
	
	/** \brief Load part from file. */
	private func void loadPartFromFile( EasyXMLElement root, String filename, String id, \
	Announcer announcer, PreloadAnnouncer preloader )
		var AnnouncerPart part = AnnouncerPart.new( id )
		announcer.addPart( part )
		
		try
			if preloader == null
				part.setSound( Sound.new( filename ) )
				
			else
				Sound.loadAsynchron( filename, PreloadAnnouncer.PartSoundFinishedListener.new( preloader, part ) )
			end
			
		catch Exception e
			this.logLoadFileFailed( root, filename )
		end
	end
end
