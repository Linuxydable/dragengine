/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.TriggerSystem

pin Dragengine.Utils


/**
 * \brief Create TSTriggerExpression object from string.
 * 
 * Also allows to turn a TSTriggerExpression object into a string representation.
 * This is done in a separate class as the representation could potentially
 * be different in different implementations.
 */
class TSTriggerExpressionParser
	/** Class used to hold the parser state. */
	public class ParserState
		private var String pString
		private var int pPosition
		private var int pLength
		
		public func new( String string )
			this.pString = string
			this.pLength = string.getLength()
			this.pPosition = 0
		end
		
		public func bool hasMoreCharacters()
			return this.pPosition < this.pLength
		end
		
		public func int getPosition()
			return this.pPosition
		end
		
		public func byte getNextCharacter()
			return this.pString.getAt( this.pPosition++ )
		end
		
		public func void adjustPosition( int amount )
			this.pPosition += amount
		end
	end
	
	
	
	/** Symbol for negation. */
	private var byte pSymbolNegate
	/** Symbol for current state. */
	private var byte pSymbolCurState
	/** Symbol for logical and. */
	private var byte pSymbolAnd
	/** Symbol for logical or. */
	private var byte pSymbolOr
	/** Symbol for the start of child expressions. */
	private var byte pSymbolGroupStart
	/** Symbol for the end of child expressions. */
	private var byte pSymbolGroupEnd
	/** Symbol for quoting trigger names. */
	private var byte pSymbolQuote
	/** List of characters requiring a name to be quoted. */
	private var String pRequiresQuoteCharacters
	
	
	
	/** Creates a new trigger expression parser. */
	public func new()
		this.pSymbolNegate = '!'
		this.pSymbolCurState = '@'
		this.pSymbolAnd = '&'
		this.pSymbolOr = '|'
		this.pSymbolGroupStart = '('
		this.pSymbolGroupEnd = ')'
		this.pSymbolQuote = '"'
		
		this.pRequiresQuoteCharacters = " \t"
		this.pRequiresQuoteCharacters = this.pRequiresQuoteCharacters + this.pSymbolNegate
		this.pRequiresQuoteCharacters = this.pRequiresQuoteCharacters + this.pSymbolCurState
		this.pRequiresQuoteCharacters = this.pRequiresQuoteCharacters + this.pSymbolAnd
		this.pRequiresQuoteCharacters = this.pRequiresQuoteCharacters + this.pSymbolOr
		this.pRequiresQuoteCharacters = this.pRequiresQuoteCharacters + this.pSymbolGroupStart
		this.pRequiresQuoteCharacters = this.pRequiresQuoteCharacters + this.pSymbolGroupEnd
		this.pRequiresQuoteCharacters = this.pRequiresQuoteCharacters + this.pSymbolQuote
	end
	
	
	
	/** Create trigger expression from a string. */
	public func TSTriggerExpression stringToExpression( String string )
		var TSTriggerExpression expression = TSTriggerExpression.new()
		var ParserState state = ParserState.new( string )
		
		expression.setRootComponent( this.parseExpressionComponent( state, false, false, false ) )
		
		return expression
	end
	
	/** Parse an expression component. */
	public func TSTriggerExpressionComponent parseExpressionComponent( \
	ParserState state, bool requireEnd, bool initCurState, bool initNegate )
		// modes:
		// 0 => parse trigger/child(0) (negate,curState allowed)
		// 1 => parse logical operator
		// 2 => parse child(1..N) (negate,curState allowed)
		// 3 => parse identical logical operator or end of group or end of expression
		// 4 => exit parser
		var TSTriggerExpressionComponent component = TSTriggerExpressionComponent.new()
		var TSTriggerExpressionComponent child
		var bool curState = initCurState
		var bool negate = initNegate
		var byte character
		var int mode = 0
		
		while mode != 4 and state.hasMoreCharacters()
			character = state.getNextCharacter()
			
			if mode == 2 and component.getTargetName() != null
				child = TSTriggerExpressionComponent.new()
				child.setTargetName( component.getTargetName() )
				child.setNegate( component.getNegate() )
				child.setCurState( component.getCurState() )
				component.addChild( child )
				component.setTargetName( null )
				component.setNegate( false )
				component.setCurState( false )
			end
			
			if character == ' ' or character == '\t'
				continue
				
			elif character == this.pSymbolNegate
				select mode
				case 0, 2
					negate = true
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == this.pSymbolCurState
				select mode
				case 0, 2
					curState = true
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == this.pSymbolGroupStart
				if curState
					throw EInvalidParam.new()
				end
				
				select mode
				case 0
					child = this.parseExpressionComponent( state, true, false, false )
					child.setNegate( negate )
					component.addChild( child )
					negate = false
					curState = false
					mode = 1
					
				case 2
					child = this.parseExpressionComponent( state, true, false, false )
					child.setNegate( negate )
					component.addChild( child )
					negate = false
					curState = false
					mode = 3
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == this.pSymbolGroupEnd
				select mode
				case 3
					if not requireEnd
						state.adjustPosition( -1 )
					end
					mode = 4
					
				else:
					throw EInvalidParam.new()
				end
				
			elif character == this.pSymbolAnd
				select mode
				case 1
					component.setChildrenOr( false )
					mode = 2
					
				case 3
					if component.getChildrenOr()
						throw EInvalidParam.new() // or/and changed inside list
					end
					mode = 2
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == this.pSymbolOr
				select mode
				case 1
					component.setChildrenOr( true )
					mode = 2
					
				case 3
					if not component.getChildrenOr()
						throw EInvalidParam.new() // or/and changed inside list
					end
					mode = 2
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == this.pSymbolQuote
				if mode == 0
					component.setTargetName( StringID.new( this.parseTargetName( state, true ) ) )
					component.setNegate( negate )
					component.setCurState( curState )
					negate = false
					curState = false
					mode = 1
					
				elif mode == 2
					child = TSTriggerExpressionComponent.new()
					child.setTargetName( StringID.new( this.parseTargetName( state, true ) ) )
					child.setNegate( negate )
					child.setCurState( curState )
					component.addChild( child )
					negate = false
					curState = false
					mode = 3
					
				else
					throw EInvalidParam.new()
				end
				
			//elif ( character >= 'a' and character <= 'z' ) \
			//or ( character >= 'A' and character <= 'Z' ) \
			//or character == '_'
			else
				state.adjustPosition( -1 )
				
				select mode
				case 0
					component.setTargetName( StringID.new( this.parseTargetName( state, false ) ) )
					component.setNegate( negate )
					component.setCurState( curState )
					negate = false
					curState = false
					mode = 1
					
				case 2
					child = TSTriggerExpressionComponent.new()
					child.setTargetName( StringID.new( this.parseTargetName( state, false ) ) )
					child.setNegate( negate )
					child.setCurState( curState )
					component.addChild( child )
					negate = false
					curState = false
					mode = 3
					
				else
					throw EInvalidParam.new()
				end
				
			//else
			//	throw EInvalidParam.new()
			end
		end
		
		if requireEnd and mode != 4
			throw EInvalidParam.new()
		end
		
		if mode == 0
			return null
		end
		
		if component.getChildCount() == 1
			child = component.getChildAt( 0 )
			if child.getTargetName() == null
				component = child
				
			else
				component.setTargetName( child.getTargetName() )
				component.setNegate( child.getNegate() )
				component.setCurState( child.getCurState() )
				component.removeAllChildren()
			end
		end
		
		return component
	end
	
	/** Parse trigger name. */
	public func String parseTargetName( ParserState state, bool quoted )
		// modes
		// 0 => parse first character
		// 1 => parse other characters
		var String name = ""
		var byte character
		var int mode = 0
		
		while state.hasMoreCharacters()
			character = state.getNextCharacter()
			
			if quoted
				if character == '\\'
					if not state.hasMoreCharacters()
						throw EInvalidParam.new()
					end
					name = name + state.getNextCharacter()
					mode = 1
					
				elif character == this.pSymbolQuote
					if mode == 0
						throw EInvalidParam.new()
					end
					break
					
				else
					name = name + character
					mode = 1
				end
				
			else
				if this.pRequiresQuoteCharacters.find( character ) == -1
				/*if ( character >= 'a' and character <= 'z' ) or ( character >= 'A' and character <= 'Z' ) \
				or character == '_' or character == '.' or ( character >= '0' and character <= '9' )*/
					name = name + character
					mode = 1
					
				else
					if mode == 0
						throw EInvalidParam.new()
					end
					
					state.adjustPosition( -1 )
					break
				end
			end
		end
		
		return name
	end
	
	/** Create string from a trigger expression. */
	public func String expressionToString( TSTriggerExpression expression )
		var TSTriggerExpressionComponent component = expression.getRootComponent()
		
		if component == null
			return ""
			
		else
			return this.expressionComponentToString( component, false )
		end
	end
	
	/** Create string from a trigger expression component. */
	public func String expressionComponentToString( TSTriggerExpressionComponent component, bool grouping )
		var StringID targetName = component.getTargetName()
		var String string = ""
		
		if component.getNegate()
			string = string + this.pSymbolNegate
			grouping = true
		end
		if component.getCurState()
			string = string + this.pSymbolCurState
			grouping = true
		end
		
		/*
		var String debug = "neg=" + component.getNegate() + ",cs=" + component.getCurState()
		if trigger != null
			debug = debug + ",trig='" + trigger.getString() + "'"
		end
		debug = debug + ",children=" + component.getChildCount()
		BaseGameApp.getApp().getConsole().addMessage( debug + "\n" )
		*/
		
		if targetName == null
			var int count = component.getChildCount()
			if count == 0
				throw EInvalidParam.new()
			end
			
			if grouping
				string = string + this.pSymbolGroupStart
			end
			
			var byte separator = component.getChildrenOr() if this.pSymbolOr else this.pSymbolAnd
			var int i
			for i = 0 to count
				if i > 0
					string = string + separator
				end
				string = string + this.expressionComponentToString( component.getChildAt( i ), true )
			end
			
			if grouping
				string = string + this.pSymbolGroupEnd
			end
			
		else
			string = string + this.quoteTriggerName( targetName.getString() )
		end
		
		return string
	end
	
	/** Retrieves a properly quoted version of a trigger name. */
	public func String quoteTriggerName( String name )
		if name.findAny( this.pRequiresQuoteCharacters ) == -1
			return name
			
		else
			return "" + this.pSymbolQuote + name.replaceString( "\"", "\\\"" ) + this.pSymbolQuote
		end
	end
end
