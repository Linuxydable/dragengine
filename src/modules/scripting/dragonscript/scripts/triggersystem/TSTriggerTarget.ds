/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.TriggerSystem

pin Dragengine.LoadSave


/**
 * \brief Target in a trigger table.
 * 
 * Triggers can set or reset the target. Whenever the state of the target changes
 * all listeners are notified. Elements using a trigger expression add themselves
 * to all the targets they use in the trigger expression.
 */
class TSTriggerTarget
	private var StringID pName
	private var bool pFired
	private var bool pHasFired
	private var Array pListeners
	
	
	
	/** \brief Create trigger target. */
	public func new( StringID name )
		if name == null
			throw EInvalidParam.new()
		end
		
		this.pName = name
		this.pFired = false
		this.pHasFired = false
		this.pListeners = Array.new()
	end
	
	/** \brief Dispose of trigger target. */
	public func void dispose()
		this.pListeners = null
	end
	
	
	
	/** \brief Name. */
	public func StringID getName()
		return this.pName
	end
	
	/** \brief Target is currently fired. */
	public func bool getFired()
		return this.pFired
	end
	
	/** \brief Set if target is currently fired. */
	public func void setFired( bool fired )
		this.pFired = fired
	end
	
	/** \brief Target has ever fired. */
	public func bool getHasFired()
		return this.pHasFired
	end
	
	/** \brief Set if target has ever fired. */
	public func void setHasFired( bool hasFired )
		this.pHasFired = hasFired
	end
	
	
	
	/** \brief Fire trigger. */
	public func void fire()
		if this.pFired
			return
		end
		
		this.pFired = true
		this.pHasFired = true
		this.notifyListeners()
	end
	
	/** \brief Reset trigger. */
	public func void reset()
		if not this.pFired
			return
		end
		
		this.pFired = false
		this.notifyListeners()
	end
	
	/** \brief Fully reset trigger. */
	public func void fullReset()
		if not this.pFired and not this.pHasFired
			return
		end
		
		this.pFired = false
		this.pHasFired = false
		this.notifyListeners()
	end
	
	
	
	/** \brief Number of listeners. */
	public func int getListenerCount()
		return this.pListeners.getCount()
	end
	
	/** \brief Add listener. */
	public func void addListener( TSTriggerListener listener )
		if listener == null or this.pListeners.has( listener )
			throw EInvalidParam.new()
		end
		this.pListeners.add( listener )
	end
	
	/** \brief Add listener if absent. */
	public func void addListenerIfAbsent( TSTriggerListener listener )
		if listener == null
			throw EInvalidParam.new()
		end
		if not this.pListeners.has( listener )
			this.pListeners.add( listener )
		end
	end
	
	/** \brief Remove listener. */
	public func void removeListener( TSTriggerListener listener )
		this.pListeners.remove( listener )
	end
	
	/** \brief Remove listener if present. */
	public func void removeListenerIfPresent( TSTriggerListener listener )
		if this.pListeners.has( listener )
			this.pListeners.remove( listener )
		end
	end
	
	/** \brief Notify all listeners. */
	public func void notifyListeners()
		this.pListeners.forEach( block TSTriggerListener each
			each.triggerTargetChanged( this )
		end )
	end
	
	
	
	/** \brief Read trigger target from file. */
	static public func TSTriggerTarget readFromFile( FileReader reader )
		var TSTriggerTarget target = TSTriggerTarget.new( StringID.new( reader.readString8() ) )
		
		var PersistencyFlags flags = PersistencyFlags.new( 2, reader )
		target.pFired = flags.getAt( 0 )
		target.pHasFired = flags.getAt( 1 )
		
		return target
	end
	
	/** \brief Write trigger target to file. */
	public func void writeToFile( FileWriter writer )
		writer.writeString8( this.pName.toString() )
		
		var PersistencyFlags flags = PersistencyFlags.new( 2 )
		flags.setAt( 0, this.pFired )
		flags.setAt( 1, this.pHasFired )
		flags.writeToFile( writer )
	end
end
