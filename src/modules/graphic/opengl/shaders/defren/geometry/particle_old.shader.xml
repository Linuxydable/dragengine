<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE shader SYSTEM "DEOpenGLShader.dtd">
<shader>
	<name>DefRen Geometry Particle Old</name>
	
	<texture name="texDepth" target="0"/>
	<texture name="texDiffuse" target="1"/>
	<texture name="texEmissive" target="2"/>
	
	<parameter name="pMaterialDiffuse"/>
	<parameter name="pMaterialEmissive"/>
	<parameter name="pMaterialGamma"/>
	<parameter name="pViewport"/>
	
	<program language="glsl" unit="vertex"><![CDATA[
uniform vec4 pMaterialDiffuse;
uniform vec4 pMaterialEmissive;
uniform vec4 pMaterialGamma;
uniform vec4 pViewport;

varying vec2 vTCDiffuse;
#ifdef HAS_MAP_EMISSIVE
varying vec2 vTCEmissive;
#endif

void main( void ){
	// transform the texture coordinates used for the lookups.
	vTCDiffuse = mat3x2( gl_TextureMatrix[ 0 ] ) * vec3( gl_MultiTexCoord0.st, 1.0 );
#ifdef HAS_MAP_EMISSIVE
	vTCEmissive = mat3x2( gl_TextureMatrix[ 1 ] ) * vec3( gl_MultiTexCoord0.st, 1.0 );
#endif
	
	// transform the position with the matrix
	gl_Position = gl_ModelViewProjectionMatrix * vec4( gl_Vertex.xyz, 1.0 );
	
	// take over color
	gl_FrontColor = gl_Color;
}
	]]></program>
	
	<program language="glsl" unit="fragment"><![CDATA[
uniform vec4 pMaterialDiffuse; // sum of ambient and all lights hitting the particle
uniform vec4 pMaterialEmissive;
uniform vec4 pMaterialGamma;
uniform vec4 pViewport; // minX, minY, maxX, maxY

uniform sampler2D texDepth;
uniform sampler2D texDiffuse;
#ifdef HAS_MAP_EMISSIVE
uniform sampler2D texEmissive;
#endif

varying vec2 vTCDiffuse;
#ifdef HAS_MAP_EMISSIVE
varying vec2 vTCEmissive;
#endif

#ifdef GEOM_ENCODED_DEPTH
const vec3 unpackGeomDepth = vec3( 1.0, 1.0 / 256.0, 1.0 / 65536.0 );
#endif

// buffer1: color.r, color.g, color.b, color.a

void main( void ){
#ifdef GEOM_ENCODED_DEPTH
	if( gl_FragCoord.z >= dot( texture2D( texDepth, gl_FragCoord.xy * pViewport.xy ).rgb, unpackGeomDepth ) ) discard;
#else
	if( gl_FragCoord.z >= texture2D( texDepth, gl_FragCoord.xy ).r ) discard;
#endif
	
	vec4 color = pow( texture2D( texDiffuse, vTCDiffuse ), pMaterialGamma ) * gl_Color;
#ifdef IGNORE_HOLES
	if( color.a < 0.5 ) discard;
#endif
	
#ifdef HAS_MAP_EMISSIVE
	float emission = texture2D( texEmissive, vTCEmissive ).r;
#endif // HAS_MAP_EMISSIVE
	
#ifdef HAS_MAP_EMISSIVE
	vec3 finalColor = color.rgb * ( pMaterialDiffuse.rgb + pMaterialEmissive.rgb * emission );
#else // HAS_MAP_EMISSIVE
	vec3 finalColor = color.rgb * pMaterialDiffuse.rgb;
#endif // HAS_MAP_EMISSIVE
	
	gl_FragColor = vec4( finalColor, color.a );
}
	]]></program>
</shader>
