<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE shader SYSTEM "DEOpenGLShader.dtd">
<shader>
	<name>DefRen Ambient</name>
	
	<texture name="texDiffuse" target="0"/>
	<texture name="texNormal" target="1"/>
	<texture name="texGlow" target="2"/>
	
	<program language="glsl" unit="vertex"><![CDATA[
#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect texDiffuse;
uniform sampler2DRect texNormal;
uniform sampler2DRect texGlow;

void main( void ){
	// the ambient color becomes the front color
	gl_FrontColor.rgb = gl_Color.rgb;
	
	// copy texture coordinates and position
	gl_TexCoord[ 0 ].st = gl_MultiTexCoord0.st;
	gl_Position = vec4( gl_Vertex.xyz, 1.0 );
}
	]]></program>
	
	<program language="glsl" unit="fragment"><![CDATA[
#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect texDiffuse; // color.r, color.g, color.b, alpha
uniform sampler2DRect texNormal; // normal.x, normal.y, normal.z, specular.exp
uniform sampler2DRect texGlow; // ambient.int, emissive.int, diffuse.int, specular.int

void main( void ){
	vec4 diffuse = texture2DRect( texDiffuse, gl_TexCoord[ 0 ].st );
	vec4 intensities = texture2DRect( texGlow, gl_TexCoord[ 0 ].st );
	
	// ignore fragments not in need of lighting
	if( diffuse.a < 0.0001 ) discard;
	
	// ambient contribution
	gl_FragColor = vec4( diffuse.rgb * gl_Color.rgb * intensities.r, 1.0 );
	
	// emission contribution
	gl_FragColor.rgb += diffuse.rgb * intensities.g;
}
	]]></program>
	
</shader>
