<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE shader SYSTEM "DEOpenGLShader.dtd">
<shader>
	<name>DefRen AO Sky</name>
	
	<texture name="texDepth" target="0"/>
	
	<parameter name="pTCTransform"/>
	<parameter name="pTC2SC"/>
	<parameter name="pPosTransform"/>
	
	<program language="glsl" unit="vertex"><![CDATA[
uniform vec4 pTCTransform; // texture coordinate transform
uniform vec4 pTC2SC; // texture coordinate to screen coordinate
uniform vec4 pPosTransform; // position transform

uniform sampler2D texDepth;

varying vec2 vProbeParams;
varying vec3 vProbePosition;

void main( void ){
	vProbeParams = gl_MultiTexCoord0.st;
	vProbePosition = ( gl_ModelViewMatrix * gl_MultiTexCoord1 ).xyz;
	
//	gl_Position = gl_ProjectionMatrix * vec4( gl_Vertex.xyz, 1.0 );
	gl_Position = gl_ModelViewProjectionMatrix * vec4( gl_Vertex.xyz * vec3( gl_MultiTexCoord0.t ) + gl_MultiTexCoord1.stp, 1.0 );
}
	]]></program>
	
	<program language="glsl" unit="fragment"><![CDATA[
uniform vec4 pTCTransform; // texture coordinate transform
uniform vec4 pTC2SC; // texture coordinate to screen coordinate
uniform vec4 pPosTransform; // position transform

uniform sampler2D texDepth;

varying vec2 vProbeParams;
varying vec3 vProbePosition;

#ifdef GEOM_ENCODED_DEPTH
const vec3 unpackGeomDepth = vec3( 1.0, 1.0 / 256.0, 1.0 / 65536.0 );
#endif

#define epsilon 0.0001

void main( void ){
	vec2 tc = gl_FragCoord.xy * pTCTransform.xy;
	
	// calculate position
#ifdef GEOM_ENCODED_DEPTH
	vec3 position = vec3( dot( texture2D( texDepth, tc ).rgb, unpackGeomDepth ) );
#else
	vec3 position = vec3( texture2D( texDepth, tc ).r );
#endif
	position.z = pPosTransform.x / ( pPosTransform.y - position.z );
	position.xy = ( tc * pTC2SC.xy + pTC2SC.zw ) * pPosTransform.zw * position.zz;
	
	// calculate occlusion
//	float weight = max( 0.0, 1.0 - distance( position, vProbePosition ) / vProbeParams.g );
//	if( weight < epsilon ) discard;
	float weight = 1.0 - distance( position, vProbePosition ) / vProbeParams.g;
	if( weight < 0.0 ) discard;
	
	gl_FragColor.rg = vec2( vProbeParams.r * weight, weight );
}
	]]></program>
	
</shader>
