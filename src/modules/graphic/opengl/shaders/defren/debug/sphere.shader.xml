<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE shader SYSTEM "DEOpenGLShader.dtd">
<shader>
	<name>DefRen Debug Sphere</name>
	
	<version>130</version>
	
	<parameter name="pMatrixMVP"/> <!-- 0 -->
	<parameter name="pMatrixMV"/> <!-- 1 -->
	<parameter name="pScreenTransform"/> <!-- 2 -->
	<parameter name="pColorBegin"/> <!-- 3 -->
	<parameter name="pColorEnd"/> <!-- 4 -->
	<parameter name="pRadius"/> <!-- 5 -->
	
	<attribute name="inPosition" target="0"/>
	<attribute name="inNormal" target="1"/>
	<attribute name="inValue" target="2"/>
	
	<output name="outColor" target="0"/>
	
	<program language="glsl" unit="vertex"><![CDATA[
precision highp float;
precision highp int;

uniform mat4x4 pMatrixMVP; // matrix model-view-projection
uniform mat4x3 pMatrixMV; // matrix model-view
uniform vec2 pScreenTransform; // (width/2)/2, (height/2)/2
uniform vec4 pColorBegin;
uniform vec4 pColorEnd;
uniform float pRadius;

in vec3 inPosition;
in vec3 inNormal;
in float inValue;

out vec4 vColor;
out vec2 vCenter;
out float vCutOffRadius;

void main( void ){
	gl_Position = pMatrixMVP * vec4( inPosition.xyz, 1.0 );
	gl_PointSize = pRadius;
	
	vColor = mix( pColorBegin, pColorEnd, inValue );
	
	vCenter = ( gl_Position.xy / gl_Position.w ) * pScreenTransform + pScreenTransform;
	vCutOffRadius = pRadius * 0.5;
}
	]]></program>
	
	<program language="glsl" unit="fragment"><![CDATA[
precision highp float;
precision highp int;

in vec4 vColor;
in vec2 vCenter;
in float vCutOffRadius;

out vec4 outColor;

void main( void ){
	if( length( gl_FragCoord.xy - vCenter ) > vCutOffRadius ) discard;
	
	outColor = vColor;
}
	]]></program>
	
</shader>
