--- genpatch/BulletDynamics/ConstraintSolver/btSolverConstraint.h	2014-11-22 15:08:45.593705282 +0100
+++ Bullet/BulletDynamics/ConstraintSolver/btSolverConstraint.h	2014-11-22 18:49:36.094728758 +0100
@@ -63,6 +63,9 @@ ATTRIBUTE_ALIGNED16 (struct)	btSolverCon
 	int m_solverBodyIdA;
 	int m_solverBodyIdB;
 
+	btScalar	m_lowerBreakingThreshold;
+	btScalar	m_upperBreakingThreshold;
+	int			m_breakingMask;
     
 	enum		btSolverConstraintType
 	{
--- genpatch/BulletDynamics/ConstraintSolver/btTypedConstraint.h	2014-11-22 15:30:40.818321682 +0100
+++ Bullet/BulletDynamics/ConstraintSolver/btTypedConstraint.h	2014-11-22 18:49:37.422728180 +0100
@@ -102,6 +102,7 @@ protected:
 	btScalar	m_appliedImpulse;
 	btScalar	m_dbgDrawSize;
 	btJointFeedback*	m_jointFeedback;
+	int m_breakingMask;
 
 	///internal method used by the constraint solver, don't use them directly
 	btScalar getMotorFactor(btScalar pos, btScalar lowLim, btScalar uppLim, btScalar vel, btScalar timeFact);
@@ -143,6 +144,13 @@ public:
 		// lo and hi limits for variables (set to -/+ infinity on entry).
 		btScalar *m_lowerLimit,*m_upperLimit;
 
+		// lower and upper breaking threshold /set to -/+ infinity on entry).
+		btScalar *m_lowerBreakingThreshold;
+		btScalar *m_upperBreakingThreshold;
+		
+		// bits to set if the constraint breaks (set to 0 on entry).
+		int *m_breakingMask;
+		
 		// findex vector for variables. see the LCP solver interface for a
 		// description of what this does. this is set to -1 on entry.
 		// note that the returned indexes are relative to the first index of
@@ -285,6 +293,15 @@ public:
 		return m_jointFeedback;
 	}
 
+	/** \brief Retrieves the breaking mask telling which constraint axes are broken. */
+	inline int GetBreakingMask() const{ return m_breakingMask; }
+	/** \brief Sets the breaking mask telling which constraint axes are broken. */
+	void SetBreakingMask( int mask );
+	/**
+	 * \brief Break constraint.
+	 * \details Adds the mask to the breaking mask and sets the constraint to disabled.
+	 */
+	void Break( int mask );
 
 	int getUid() const
 	{
--- genpatch/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp	2014-11-22 15:12:35.479630975 +0100
+++ Bullet/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp	2014-11-22 18:49:38.006727926 +0100
@@ -1187,6 +1187,9 @@ btScalar btSequentialImpulseConstraintSo
 						currentConstraintRow[j].m_solverBodyIdA = solverBodyIdA;
 						currentConstraintRow[j].m_solverBodyIdB = solverBodyIdB;
 						currentConstraintRow[j].m_overrideNumSolverIterations = overrideNumSolverIterations;
+						currentConstraintRow[ j ].m_lowerBreakingThreshold = -SIMD_INFINITY;
+						currentConstraintRow[ j ].m_upperBreakingThreshold = SIMD_INFINITY;
+						currentConstraintRow[ j ].m_breakingMask = 0;
 					}
 
 					bodyAPtr->internalGetDeltaLinearVelocity().setValue(0.f,0.f,0.f);
@@ -1215,6 +1218,9 @@ btScalar btSequentialImpulseConstraintSo
 					info2.cfm = &currentConstraintRow->m_cfm;
 					info2.m_lowerLimit = &currentConstraintRow->m_lowerLimit;
 					info2.m_upperLimit = &currentConstraintRow->m_upperLimit;
+					info2.m_lowerBreakingThreshold = &currentConstraintRow->m_lowerBreakingThreshold;
+					info2.m_upperBreakingThreshold = &currentConstraintRow->m_upperBreakingThreshold;
+					info2.m_breakingMask = &currentConstraintRow->m_breakingMask;
 					info2.m_numIterations = infoGlobal.m_numIterations;
 					constraints[i]->getInfo2(&info2);
 
@@ -1223,15 +1229,13 @@ btScalar btSequentialImpulseConstraintSo
 					{
 						btSolverConstraint& solverConstraint = currentConstraintRow[j];
 
-						if (solverConstraint.m_upperLimit>=constraints[i]->getBreakingImpulseThreshold())
-						{
-							solverConstraint.m_upperLimit = constraints[i]->getBreakingImpulseThreshold();
+						if( solverConstraint.m_upperLimit >= solverConstraint.m_upperBreakingThreshold ){
+							solverConstraint.m_upperLimit = solverConstraint.m_upperBreakingThreshold;
 						}
-
-						if (solverConstraint.m_lowerLimit<=-constraints[i]->getBreakingImpulseThreshold())
-						{
-							solverConstraint.m_lowerLimit = -constraints[i]->getBreakingImpulseThreshold();
+						if( solverConstraint.m_lowerLimit <= solverConstraint.m_lowerBreakingThreshold ){
+							solverConstraint.m_lowerLimit = solverConstraint.m_lowerBreakingThreshold;
 						}
+						solverConstraint.m_breakingMask = 1 << j;
 
 						solverConstraint.m_originalContactPoint = constraint;
 
@@ -1671,9 +1675,10 @@ btScalar btSequentialImpulseConstraintSo
 		}
 
 		constr->internalSetAppliedImpulse(solverConstr.m_appliedImpulse);
-		if (btFabs(solverConstr.m_appliedImpulse)>=constr->getBreakingImpulseThreshold())
-		{
-			constr->setEnabled(false);
+		
+		if( solverConstr.m_appliedImpulse >= solverConstr.m_upperBreakingThreshold
+		|| solverConstr.m_appliedImpulse <= solverConstr.m_lowerBreakingThreshold ){
+			constr->Break( solverConstr.m_breakingMask );
 		}
 	}
 
--- genpatch/BulletDynamics/ConstraintSolver/btTypedConstraint.cpp	2014-11-22 15:51:55.309768909 +0100
+++ Bullet/BulletDynamics/ConstraintSolver/btTypedConstraint.cpp	2014-11-22 18:49:38.510727707 +0100
@@ -33,7 +33,8 @@ m_rbA(rbA),
 m_rbB(getFixedBody()),
 m_appliedImpulse(btScalar(0.)),
 m_dbgDrawSize(DEFAULT_DEBUGDRAW_SIZE),
-m_jointFeedback(0)
+m_jointFeedback(0),
+m_breakingMask( 0 )
 {
 }
 
@@ -50,7 +51,8 @@ m_rbA(rbA),
 m_rbB(rbB),
 m_appliedImpulse(btScalar(0.)),
 m_dbgDrawSize(DEFAULT_DEBUGDRAW_SIZE),
-m_jointFeedback(0)
+m_jointFeedback(0),
+m_breakingMask( 0 )
 {
 }
 
@@ -220,3 +222,14 @@ btScalar btAngularLimit::getHigh() const
 {
 	return btNormalizeAngle(m_center + m_halfRange);
 }
+
+
+
+void btTypedConstraint::SetBreakingMask( int mask ){
+	m_breakingMask = mask;
+}
+
+void btTypedConstraint::Break( int mask ){
+	m_breakingMask |= mask;
+	m_isEnabled = false;
+}
