from SConsCommon import *

import os

Import('parent_env parent_targets parent_report')

envInstaller = parent_env.Clone()

def buildInstaller(env, target, source):
	with open(target[0].abspath, 'wb') as installer:
		with open(source[0].abspath, 'rb') as script:
			while True:
				data = script.read(8192)
				if not data:
					break
				installer.write(data)
		
		installer.write(b'PAYLOAD:\n')
		
		with open(source[1].abspath, 'rb') as payload:
			while True:
				data = payload.read(8192)
				if not data:
					break
				installer.write(data)
	
	os.chmod(target[0].abspath, 0o755)

installers = []
if envInstaller['OSPosix']:
	if envInstaller['installer_name_engine'] and parent_targets['archive']['archiveEngine']:
		filename = '{}.sh'.format(envInstaller['installer_name_engine'])
		installers.append(envInstaller.Command(filename,
			['install-dragengine.sh.in'] + parent_targets['archive']['archiveEngine'],
			envInstaller.Action(buildInstaller, 'Building Installer {}'.format(filename))))
	
	if envInstaller['installer_name_engine_dev'] and parent_targets['archive']['archiveEngineDev']:
		filename = '{}.sh'.format(envInstaller['installer_name_engine_dev'])
		installers.append(envInstaller.Command(filename,
			['install-dragengine-dev.sh.in'] + parent_targets['archive']['archiveEngineDev'],
			envInstaller.Action(buildInstaller, 'Building Installer {}'.format(filename))))
	
	if envInstaller['installer_name_igde'] and parent_targets['archive']['archiveIgde']:
		filename = '{}.sh'.format(envInstaller['installer_name_igde'])
		installers.append(envInstaller.Command(filename,
			['install-deigde.sh.in'] + parent_targets['archive']['archiveIgde'],
			envInstaller.Action(buildInstaller, 'Building Installer {}'.format(filename))))
	
	if envInstaller['installer_name_igde_dev'] and parent_targets['archive']['archiveIgdeDev']:
		filename = '{}.sh'.format(envInstaller['installer_name_igde_dev'])
		installers.append(envInstaller.Command(filename,
			['install-deigde-dev.sh.in'] + parent_targets['archive']['archiveIgdeDev'],
			envInstaller.Action(buildInstaller, 'Building Installer {}'.format(filename))))

envInstaller.Alias('installer', installers)

parent_targets['installer'] = {
	'name' : 'Drag[en]gine Game Engine Installer'}
